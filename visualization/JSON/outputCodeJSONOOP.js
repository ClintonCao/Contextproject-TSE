var codeExport = 
[
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Formation.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n *\n * Klasse voor de opstellingen van teams\n * \n */\npublic class Formation {\n\n\tprivate ArrayList\u003cSpeler\u003e verdedigers;\n\tprivate ArrayList\u003cSpeler\u003e middenvelders;\n\tprivate ArrayList\u003cSpeler\u003e aanvallers;\n\tprivate Keeper keeper;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic Formation() {\n\t\tverdedigers \u003d new ArrayList\u003cSpeler\u003e();\n\t\tmiddenvelders \u003d new ArrayList\u003cSpeler\u003e();\n\t\taanvallers \u003d new ArrayList\u003cSpeler\u003e();\n\t}\n\n\t/**\n\t * \n\t * @return verdedigers in de opstelling\n\t */\n\tpublic ArrayList\u003cSpeler\u003e getVerdedigers() {\n\t\treturn verdedigers;\n\t}\n\n\t/**\n\t * Verandert de verdedigers in de opstelling\n\t * \n\t * @param verdedigers\n\t */\n\tpublic void setVerdedigers(ArrayList\u003cSpeler\u003e verdedigers) {\n\t\tthis.verdedigers \u003d verdedigers;\n\t}\n\n\t/**\n\t * Voegt een verdediger toe aan de opstelling\n\t * \n\t * @param de\n\t *            toe te voegen verdediger\n\t */\n\tpublic void voegVerdedigerToe(Speler s) {\n\t\tverdedigers.add(s);\n\t}\n\n\t/**\n\t * Verwijdert een verdediger uit de opstelling\n\t * \n\t * @param index\n\t *            , de locatie van de verdediger in de ArrayList van verdedigers\n\t */\n\tpublic void verwijderVerdediger(int index) {\n\t\tverdedigers.remove(index);\n\t}\n\n\t/**\n\t * \n\t * @return middenvelders in de opstelling\n\t */\n\tpublic ArrayList\u003cSpeler\u003e getMiddenvelders() {\n\t\treturn middenvelders;\n\t}\n\n\t/**\n\t * Verandert de middenvelders in de opstelling\n\t * \n\t * @param middenvelders\n\t */\n\tpublic void setMiddenvelders(ArrayList\u003cSpeler\u003e middenvelders) {\n\t\tthis.middenvelders \u003d middenvelders;\n\t}\n\n\t/**\n\t * Voegt een middenvelder toe aan de opstelling\n\t * \n\t * @param de\n\t *            toe te voegen middenvelder\n\t */\n\tpublic void voegMiddenvelderToe(Speler s) {\n\t\tmiddenvelders.add(s);\n\t}\n\n\t/**\n\t * Verwijdert een middenvelder uit de opstelling\n\t * \n\t * @param index\n\t *            , de locatie van de middenvelder in de ArrayList van\n\t *            middenvelders\n\t */\n\tpublic void verwijderMiddenvelder(int index) {\n\t\tmiddenvelders.remove(index);\n\t}\n\n\t/**\n\t * \n\t * @return aanvallers in de opstelling\n\t */\n\tpublic ArrayList\u003cSpeler\u003e getAanvallers() {\n\t\treturn aanvallers;\n\t}\n\n\t/**\n\t * Verandert de aanvallers in de opstelling\n\t * \n\t * @param aanvallers\n\t */\n\tpublic void setAanvallers(ArrayList\u003cSpeler\u003e aanvallers) {\n\t\tthis.aanvallers \u003d aanvallers;\n\t}\n\n\t/**\n\t * Voegt een aanvaller toe aan de opstelling\n\t * \n\t * @param de\n\t *            toe te voegen aanvaller\n\t */\n\tpublic void voegAanvallerToe(Speler s) {\n\t\taanvallers.add(s);\n\t}\n\n\t/**\n\t * Verwijdert een aanvaller uit de opstelling\n\t * \n\t * @param index\n\t *            , locatie van de aanvaller in de ArrayList van aanvallers\n\t */\n\tpublic void verwijderAanvaller(int index) {\n\t\taanvallers.remove(index);\n\t}\n\n\t/**\n\t * \n\t * @return keeper van de opstelling\n\t */\n\tpublic Keeper getKeeper() {\n\t\treturn keeper;\n\t}\n\n\t/**\n\t * Verander de keeper van de opstelling\n\t * \n\t * @param keeper\n\t */\n\tpublic void setKeeper(Keeper keeper) {\n\t\tthis.keeper \u003d keeper;\n\t}\n\n\t/**\n\t * Verwijdert een speler (type onbekend) uit de opstelling\n\t * \n\t * @param de\n\t *            te verwijderen speler\n\t */\n\tpublic void verwijderSpeler(Man m) {\n\t\tif (keeper.equals(m)) {\n\t\t\tsetKeeper(null);\n\t\t}\n\t\tverdedigers.remove(m);\n\t\tmiddenvelders.remove(m);\n\t\taanvallers.remove(m);\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van de opstelling\n\t */\n\tpublic String toString() {\n\t\tString s \u003d keeper.getNaam();\n\t\tfor (int i \u003d 0; i \u003c verdedigers.size(); i++) {\n\t\t\tif (verdedigers.get(i) !\u003d null)\n\t\t\t\ts \u003d s + \", \" + verdedigers.get(i).getNaam();\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c middenvelders.size(); i++) {\n\t\t\tif (middenvelders.get(i) !\u003d null)\n\t\t\t\ts \u003d s + \", \" + middenvelders.get(i).getNaam();\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c aanvallers.size(); i++) {\n\t\t\tif (aanvallers.get(i) !\u003d null)\n\t\t\t\ts \u003d s + \", \" + aanvallers.get(i).getNaam();\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * \n\t * @return grootte van de totale opstelling\n\t */\n\tpublic int size() {\n\t\tint v \u003d 0, m \u003d 0, a \u003d 0;\n\t\tfor (int i \u003d 0; i \u003c 4; i++) {\n\t\t\tif (verdedigers.get(i) !\u003d null) {\n\t\t\t\tv++;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tif (middenvelders.get(i) !\u003d null) {\n\t\t\t\tm++;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tif (aanvallers.get(i) !\u003d null) {\n\t\t\t\ta++;\n\t\t\t}\n\t\t}\n\t\tint res \u003d v + m + a;\n\t\tif (keeper !\u003d null) {\n\t\t\tres++;\n\t\t}\n\t\treturn res;\n\t}\n\n\t/**\n\t * Checkt of een speler in de opstelling staat\n\t * \n\t * @param de\n\t *            speler waarvan gecheckt wordt of hij in de opstelling staat\n\t * @return true als hij erin staat, anders false\n\t */\n\tpublic boolean contains(Speler s) {\n\t\tboolean b \u003d verdedigers.contains(s);\n\t\tif (!b) {\n\t\t\tb \u003d middenvelders.contains(s);\n\t\t}\n\t\tif (!b) {\n\t\t\tb \u003d aanvallers.contains(s);\n\t\t}\n\t\treturn b;\n\t}\n\n\t/**\n\t * Leegt de hele opstelling. Verwijdert verdedigers, middenvelders,\n\t * aanvallers en de keeper.\n\t */\n\tpublic void clear() {\n\t\tverdedigers.clear();\n\t\tmiddenvelders.clear();\n\t\taanvallers.clear();\n\t\tsetKeeper(null);\n\t}\n\n\t/**\n\t * Schrijft de opstelling weg naar de savefile\n\t * \n\t * @param out\n\t *            , de printwriter waarmee wordt weggeschreven\n\t */\n\tpublic void write(PrintWriter out) {\n\t\tout.println(\" \u003cFormatie\u003e\");\n\t\tint j \u003d 1;\n\t\tif (keeper \u003d\u003d null) {\n\t\t\tj \u003d 0;\n\t\t}\n\t\tout.println(\" \u003cKeeper\u003e\" + j + \"\u003c/Keeper\u003e\");\n\t\tif (keeper !\u003d null) {\n\t\t\tkeeper.write(out);\n\t\t}\n\t\tout.println(\" \u003cVerdedigers\u003e\" + verdedigers.size() + \"\u003c/Verdedigers\u003e\");\n\t\tfor (int i \u003d 0; i \u003c verdedigers.size(); i++) {\n\t\t\tif (verdedigers.get(i) !\u003d null) {\n\t\t\t\tverdedigers.get(i).write(out);\n\t\t\t} else {\n\t\t\t\tout.println(\"  \u003cSpeler\u003enull\u003c/Speler\u003e\");\n\t\t\t}\n\t\t}\n\t\tout.println(\" \u003cMiddenvelders\u003e\" + middenvelders.size()\n\t\t\t\t+ \"\u003c/middenvelders\u003e\");\n\t\tfor (int i \u003d 0; i \u003c middenvelders.size(); i++) {\n\t\t\tif (middenvelders.get(i) !\u003d null) {\n\t\t\t\tmiddenvelders.get(i).write(out);\n\t\t\t} else {\n\t\t\t\tout.println(\"  \u003cSpeler\u003enull\u003c/Speler\u003e\");\n\t\t\t}\n\t\t}\n\t\tout.println(\" \u003cAanvallers\u003e\" + aanvallers.size() + \"\u003c/Aanvallers\u003e\");\n\t\tfor (int i \u003d 0; i \u003c aanvallers.size(); i++) {\n\t\t\tif (aanvallers.get(i) !\u003d null) {\n\t\t\t\taanvallers.get(i).write(out);\n\t\t\t} else {\n\t\t\t\tout.println(\"  \u003cSpeler\u003enull\u003c/Speler\u003e\");\n\t\t\t}\n\t\t}\n\t\tout.println(\" \u003c/Formatie\u003e\");\n\t}\n\n\t/**\n\t * Leest een opstelling in van de savefile\n\t * \n\t * @param sc\n\t *            , de scanner waarmee wordt ingelezen\n\t * @return de ingelezen opstelling\n\t */\n\tpublic static Formation read(Scanner sc) {\n\t\tFormation res \u003d new Formation();\n\t\tsc.next();\n\t\tString aantal \u003d SaveData.getContent(sc.next());\n\t\tint aantal1 \u003d Integer.parseInt(aantal);\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tsc.next();\n\t\t\tres.setKeeper(Keeper.read(sc));\n\t\t}\n\t\taantal \u003d SaveData.getContent(sc.next());\n\t\taantal1 \u003d Integer.parseInt(aantal);\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tString s \u003d sc.next();\n\t\t\tif (s.contains(\"null\")) {\n\t\t\t\tres.voegVerdedigerToe(null);\n\t\t\t} else {\n\t\t\t\tres.voegVerdedigerToe(Speler.read(sc));\n\t\t\t}\n\t\t}\n\t\taantal \u003d SaveData.getContent(sc.next());\n\t\taantal1 \u003d Integer.parseInt(aantal);\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tString s \u003d sc.next();\n\t\t\tif (s.contains(\"null\")) {\n\t\t\t\tres.voegMiddenvelderToe(null);\n\t\t\t} else {\n\t\t\t\tres.voegMiddenvelderToe(Speler.read(sc));\n\t\t\t}\n\t\t}\n\t\taantal \u003d SaveData.getContent(sc.next());\n\t\taantal1 \u003d Integer.parseInt(aantal);\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tString s \u003d sc.next();\n\t\t\tif (s.contains(\"null\")) {\n\t\t\t\tres.voegAanvallerToe(null);\n\t\t\t} else {\n\t\t\t\tres.voegAanvallerToe(Speler.read(sc));\n\t\t\t}\n\t\t}\n\t\tsc.next();\n\t\treturn res;\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Goal.java",
    "code": "\"package Brain;\n\n/**\n * \n * Klasse voor Goals\n *\n */\npublic class Goal {\n\n\tprivate Man scorer;\n\tprivate int minuut;\n\tprivate Team team;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param scorer\n\t * @param minuut\n\t *            , minuut van scoren\n\t * @param team\n\t *            , team waarin de scorer speelt\n\t */\n\tpublic Goal(Man scorer, int minuut, Team team) {\n\n\t\tthis.scorer \u003d scorer;\n\t\tthis.minuut \u003d minuut;\n\t\tthis.team \u003d team;\n\n\t}\n\n\t/**\n\t * \n\t * @return scorer van de goal\n\t */\n\tpublic Man getScorer() {\n\t\treturn scorer;\n\t}\n\n\t/**\n\t * \n\t * @return minuut van de goal\n\t */\n\tpublic int getMinuut() {\n\t\treturn minuut;\n\t}\n\n\t/**\n\t * \n\t * @return team waar de scorer in zit\n\t */\n\tpublic Team getTeam() {\n\t\treturn team;\n\t}\n\n\t/**\n\t * @return stringrepresentatie van de goal\n\t */\n\tpublic String toString() {\n\t\treturn scorer.getNaam() + \" scored in \" + minuut + \"th minute\";\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Injury.java",
    "code": "\"package Brain;\n\nimport java.util.Random;\n\n/**\n * \n * Klasse voor blessures\n *\n */\npublic class Injury {\n\n\tprivate Man injured;\n\tprivate int minuut;\n\tprivate String injury;\n\tprivate Team team;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param injured\n\t *            , de geblesseerde\n\t * @param minuut\n\t *            , minuut van blessure\n\t * @param team\n\t *            , team waarin de geblesseerde zit\n\t */\n\tpublic Injury(Man injured, int minuut, Team team) {\n\t\tthis.injured \u003d injured;\n\t\tthis.minuut \u003d minuut;\n\t\tthis.team \u003d team;\n\t\tRandom r \u003d new Random();\n\t\tint random \u003d r.nextInt(5);\n\t\tinjury \u003d generateInjury(random);\n\t}\n\n\t/**\n\t * \n\t * @return minuut van de blessure\n\t */\n\tpublic int getMinuut() {\n\t\treturn minuut;\n\t}\n\n\t/**\n\t * \n\t * @return team van de geblesseerde\n\t */\n\tpublic Team getTeam() {\n\t\treturn team;\n\t}\n\n\t/**\n\t * Verandert de blessure oorzaak\n\t * \n\t * @param injury\n\t */\n\tpublic void setInjury(String injury) {\n\t\tthis.injury \u003d injury;\n\t}\n\n\t/**\n\t * Genereert een random blessure\n\t * \n\t * @param random\n\t *            getal\n\t * @return Een blessure string\n\t */\n\tpublic String generateInjury(int random) {\n\n\t\tswitch (random) {\n\t\tcase 0:\n\t\t\treturn \"broke his leg\";\n\t\tcase 1:\n\t\t\treturn \"got a concussion\";\n\t\tcase 2:\n\t\t\treturn \"bit his tongue\";\n\t\tcase 3:\n\t\t\treturn \"got transported to the hospital\";\n\t\tcase 4:\n\t\t\treturn \"suffered a heartattack\";\n\n\t\tdefault:\n\t\t\treturn \"\";\n\t\t}\n\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van de blessure\n\t */\n\tpublic String toString() {\n\t\treturn injured.getNaam() + \" \" + injury + \" in \" + minuut + \"th minute\";\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Kaart.java",
    "code": "\"package Brain;\n\n/**\n * \n * Klasse voor kaarten\n *\n */\npublic class Kaart {\n\n\tprivate Man overtreder;\n\tprivate int type;\n\tprivate int minuut;\n\tprivate Team team;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param overtreder\n\t * @param type\n\t *            , 1 voor gele kaart, 2 voor rode kaart\n\t * @param minuut\n\t *            , minuut van overtreding\n\t * @param team\n\t *            , team van de overtreder\n\t */\n\tpublic Kaart(Man overtreder, int type, int minuut, Team team) {\n\t\tthis.overtreder \u003d overtreder;\n\t\tthis.type \u003d type;\n\t\tthis.minuut \u003d minuut;\n\t\tthis.team \u003d team;\n\t}\n\n\t/**\n\t * \n\t * @return minuut van overtreding\n\t */\n\tpublic int getMinuut() {\n\t\treturn minuut;\n\t}\n\n\t/**\n\t * \n\t * @return team van de overtreder\n\t */\n\tpublic Team getTeam() {\n\t\treturn team;\n\t}\n\n\t/**\n\t * \n\t * @return overtreder\n\t */\n\tpublic Man getOvertreder() {\n\t\treturn overtreder;\n\t}\n\n\t/**\n\t * Verander de overtreder\n\t * \n\t * @param overtreder\n\t */\n\tpublic void setOvertreder(Man overtreder) {\n\t\tthis.overtreder \u003d overtreder;\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van de overtreding\n\t */\n\tpublic String toString() {\n\t\tString s;\n\t\tif (type \u003d\u003d 1) {\n\t\t\ts \u003d \"Yellow Card\";\n\t\t} else {\n\t\t\ts \u003d \"Red Card\";\n\t\t}\n\t\treturn (overtreder.getNaam() + \" \" + s + \" in \" + minuut + \"th minute\");\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Keeper.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * \n * De klasse Keeper die Man extend.\n * \n */\npublic class Keeper extends Man {\n\n\tprivate int kp;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param naam\n\t *            Naam keeper\n\t * @param id\n\t *            ID keeper\n\t * @param prijs\n\t *            prijs keeper\n\t * @param typekaart\n\t *            typekaart zoals rood, geel\n\t * @param geblesseerd1\n\t *            wel of niet geblesseerd\n\t * @param type\n\t *            heeft als type goalkeeper ofterwijl GK\n\t * @param kp\n\t *            Keeperpunten\n\t * @param team\n\t *            Team waar keeper in behoort.\n\t */\n\tpublic Keeper(String naam, int id, int prijs, int typekaart,\n\t\t\tint geblesseerd1, String type, int kp, String team) {\n\t\tsuper(naam, id, prijs, typekaart, geblesseerd1, type, team);\n\t\tthis.kp \u003d kp;\n\t}\n\n\t/**\n\t * \n\t * @return keeperpoint(kp)\n\t */\n\tpublic int getKp() {\n\t\treturn kp;\n\t}\n\n\t/**\n\t * \n\t * @param kp\n\t *            Geeft aan this waarde kp\n\t */\n\tpublic void setKp(int kp) {\n\t\tthis.kp \u003d kp;\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van de keeper\n\t */\n\tpublic String toString() {\n\t\tString s \u003d getNaam();\n\t\tif (isGeblesseerd() \u003d\u003d 1) {\n\t\t\ts \u003d s + \"\\t\\tGeblesseerd\";\n\t\t}\n\t\tif (getTypekaart() \u003d\u003d 1) {\n\t\t\ts \u003d s + \"\\t\\tGele Kaart\";\n\t\t} else if (getTypekaart() \u003d\u003d 2) {\n\t\t\ts \u003d s + \"\\t\\tRode Kaart\";\n\t\t}\n\t\treturn s;\n\t}\n\n\tpublic void write(PrintWriter out) {\n\t\tout.println(\"  \u003cKeeper\u003e\");\n\t\tout.println(\"  \u003cID\u003e\" + getId() + \"\u003c/ID\u003e\");\n\t\tout.println(\"   \u003cNaam\u003e\" + getNaam() + \"\u003c/Naam\u003e\");\n\t\tout.println(\"   \u003cType\u003e\" + getType() + \"\u003c/Type\u003e\");\n\t\tout.println(\"   \u003cKP\u003e\" + kp + \"\u003c/KP\u003e\");\n\t\tout.println(\"   \u003cKaart\u003e\" + getTypekaart() + \"\u003c/Kaart\u003e\");\n\t\tout.println(\"   \u003cGeblesseerd\u003e\" + isGeblesseerd() + \"\u003c/Geblesseerd\u003e\");\n\t\tout.println(\"   \u003cPrijs\u003e\" + getPrijs() + \"\u003c/Prijs\u003e\");\n\t\tout.println(\"   \u003cTeam\u003e\" + getTeam() + \"\u003c/Team\u003e\");\n\t\tout.println(\"  \u003c/Keeper\u003e\");\n\t}\n\n\t/**\n\t * \n\t * @param sc\n\t *            Scanner sc\n\t * @return new object Keeper\n\t */\n\tpublic static Keeper read(Scanner sc) {\n\t\tString id \u003d SaveData.getContent(sc.next());\n\t\tsc.nextLine();\n\t\tString naam \u003d SaveData.getContent(sc.nextLine());\n\t\tString type \u003d SaveData.getContent(sc.next());\n\t\tString kp \u003d SaveData.getContent(sc.next());\n\t\tString kaart \u003d SaveData.getContent(sc.next());\n\t\tString geblesseerd \u003d SaveData.getContent(sc.next());\n\t\tString prijs \u003d SaveData.getContent(sc.next());\n\t\tsc.nextLine();\n\t\tString team \u003d SaveData.getContent(sc.nextLine());\n\t\tsc.next();\n\t\tint id1 \u003d Integer.parseInt(id);\n\t\tint kp1 \u003d Integer.parseInt(kp);\n\t\tint kaart1 \u003d Integer.parseInt(kaart);\n\t\tint geblesseerd1 \u003d Integer.parseInt(geblesseerd);\n\t\tint prijs1 \u003d Integer.parseInt(prijs);\n\t\treturn new Keeper(naam, id1, prijs1, kaart1, geblesseerd1, type, kp1,\n\t\t\t\tteam);\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Man.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\n\n/**\n *\n * Superklasse van alle Spelers, dwz Speler objecten en Keeper objecten\n * \n */\npublic abstract class Man {\n\n\tprivate String naam;\n\tprivate int id;\n\tprivate int prijs;\n\tprivate int typekaart;\n\tprivate boolean geblesseerd;\n\tprivate String type;\n\tprivate String team;\n\n\t/**\n\t * \n\t * @param naam\n\t *            Naam\n\t * @param id\n\t *            ID\n\t * @param prijs\n\t *            Prijs\n\t * @param typekaart\n\t *            Kaart : Rood/Geel\n\t * @param geblesseerd\n\t *            Wel/Niet geblesseerd\n\t * @param type\n\t *            Type(bijv GK, DF etc.)\n\t * @param team\n\t *            Naam van Team\n\t */\n\tpublic Man(String naam, int id, int prijs, int typekaart, int geblesseerd,\n\t\t\tString type, String team) {\n\t\tthis.naam \u003d naam;\n\t\tthis.id \u003d id;\n\t\tthis.prijs \u003d prijs;\n\t\tthis.typekaart \u003d typekaart;\n\t\tif (geblesseerd \u003d\u003d 0) {\n\t\t\tthis.geblesseerd \u003d false;\n\t\t} else {\n\t\t\tthis.geblesseerd \u003d true;\n\t\t}\n\t\tthis.type \u003d type;\n\t\tthis.team \u003d team;\n\t}\n\n\t/**\n\t * \n\t * @return naam van de man\n\t */\n\tpublic String getNaam() {\n\t\treturn naam;\n\t}\n\n\t/**\n\t * Verandert de naam van de man\n\t * @param naam        \n\t */\n\tpublic void setNaam(String naam) {\n\t\tthis.naam \u003d naam;\n\t}\n\n\t/**\n\t * \n\t * @return ID van de man\n\t */\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\n\t/**\n\t * Verander de id van de man\n\t * @param id\n\t */\n\tpublic void setId(int id) {\n\t\tthis.id \u003d id;\n\t}\n\n\t/**\n\t * \n\t * @return prijs van de man\n\t */\n\tpublic int getPrijs() {\n\t\treturn prijs;\n\t}\n\n\t/**\n\t * Verander de prijs van de man\n\t * @param prijs\n\t */\n\tpublic void setPrijs(int prijs) {\n\t\tthis.prijs \u003d prijs;\n\t}\n\n\t/**\n\t * Checkt of de man geblesseerd is\n\t * @return 1 als de man geblesseerd is, anders 0\n\t */\n\tpublic int isGeblesseerd() {\n\t\tint res \u003d 0;\n\t\tif (geblesseerd) {\n\t\t\tres \u003d 1;\n\t\t}\n\t\treturn res;\n\t}\n\n\t/**\n\t * Verandert of de man geblesseerd is of niet\n\t * @param true als de man geblesseerd is, anders false\n\t */\n\tpublic void setGeblesseerd(boolean geblesseerd) {\n\t\tthis.geblesseerd \u003d geblesseerd;\n\t}\n\n\t/**\n\t * \n\t * @return type van de man\n\t */\n\tpublic String getType() {\n\t\treturn type;\n\t}\n\n\t/**\n\t * Verandert het type van de man\n\t * @param type\n\t */\n\tpublic void setType(String type) {\n\t\tthis.type \u003d type;\n\t}\n\n\t/**\n\t * \n\t * @return team waar de man in speelt\n\t */\n\tpublic String getTeam() {\n\t\treturn team;\n\t}\n\n\t/**\n\t * Verandert het team waar de man in speelt\n\t * @param team\n\t */\n\tpublic void setTeam(String team) {\n\t\tthis.team \u003d team;\n\t}\n\n\t/**\n\t * \n\t * @return kaart van de man. 0 bij geen kaart, 1 bij een gele kaart, 2 bij een rode kaart\n\t */\n\tpublic int getTypekaart() {\n\t\treturn typekaart;\n\t}\n\n\t/**\n\t * Verandert de kaart van de man\n\t * @param typekaart. 0 bij geen kaart, 1 bij een gele kaart, 2 bij een rode kaart\n\t */\n\tpublic void setTypekaart(int typekaart) {\n\t\tthis.typekaart \u003d typekaart;\n\t}\n\n\t/**\n\t * Schrijft de Man weg naar de savefile\n\t * @param out, de printwriter waarmee wordt weggeschreven\n\t */\n\tpublic void write(PrintWriter out) {\n\n\t}\n\n\t/**\n\t * Vergelijkt de man met een ander object\n\t * @param het te vergelijken object\n\t * @return true als het object een Man object is en hetzelfde id heeft als de man en dus gelijk zijn, anders false\n\t */\n\t@Override\n\tpublic boolean equals(Object other) {\n\t\tif (other instanceof Man \u0026\u0026 this.getId() \u003d\u003d ((Man) other).getId()) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Match.java",
    "code": "\"package Brain;\n\nimport java.util.ArrayList;\nimport java.util.Random;\n\n/**\n * \n * Klasse voor wedstrijden\n *\n */\npublic class Match {\n\n\tprivate ArrayList\u003cGoal\u003e goals;\n\tprivate ArrayList\u003cInjury\u003e blessures;\n\tprivate int thuisScore;\n\tprivate int uitScore;\n\tprivate ArrayList\u003cKaart\u003e kaarten;\n\tprivate Team thuis;\n\tprivate Team uit;\n\tprivate Formation thuisElftal;\n\tprivate Formation uitElftal;\n\tprivate Random r \u003d new Random();\n\n\t/**\n\t * Constructor\n\t * \n\t * @param thuis\n\t *            , team dat thuis speelt\n\t * @param uit\n\t *            , team dat uit speelt\n\t */\n\tpublic Match(Team thuis, Team uit) {\n\t\tthis.thuis \u003d thuis;\n\t\tthis.uit \u003d uit;\n\t\tthis.thuisElftal \u003d thuis.getFormation();\n\t\tthis.uitElftal \u003d uit.getFormation();\n\t\tgoals \u003d new ArrayList\u003cGoal\u003e();\n\t\tkaarten \u003d new ArrayList\u003cKaart\u003e();\n\t\tblessures \u003d new ArrayList\u003cInjury\u003e();\n\t\tthuisScore \u003d 0;\n\t\tuitScore \u003d 0;\n\t\tgenerateMatch();\n\t\tupdateStatistics();\n\t\tthuis.setPunten();\n\t\tuit.setPunten();\n\t\tthuis.setGoalstotal();\n\t\tuit.setGoalstotal();\n\t}\n\n\t/**\n\t * \n\t * @return thuiselftal\n\t */\n\tpublic Formation getThuiselftal() {\n\t\treturn this.thuisElftal;\n\t}\n\n\t/**\n\t * \n\t * @return uitelftal\n\t */\n\tpublic Formation getUitelfrtal() {\n\t\treturn this.uitElftal;\n\t}\n\n\t/**\n\t * \n\t * @return de gemaakte goals in de wedstrijd\n\t */\n\tpublic ArrayList\u003cGoal\u003e getGoals() {\n\t\treturn goals;\n\t}\n\n\t/**\n\t * Verander de gemaakte goals in deze wedstrijd\n\t * \n\t * @param goals\n\t */\n\tpublic void setGoals(ArrayList\u003cGoal\u003e goals) {\n\t\tthis.goals \u003d goals;\n\t}\n\n\t/**\n\t * \n\t * @return de blessures van deze wedstrijd\n\t */\n\tpublic ArrayList\u003cInjury\u003e getBlessures() {\n\t\treturn blessures;\n\t}\n\n\t/**\n\t * Verander de blessures\n\t * \n\t * @param blessures\n\t */\n\tpublic void setBlessures(ArrayList\u003cInjury\u003e blessures) {\n\t\tthis.blessures \u003d blessures;\n\t}\n\n\t/**\n\t * \n\t * @return de gegeven kaarten in deze wedstrijd\n\t */\n\tpublic ArrayList\u003cKaart\u003e getKaarten() {\n\t\treturn kaarten;\n\t}\n\n\t/**\n\t * Verander de gegeven kaarten\n\t * \n\t * @param kaarten\n\t */\n\tpublic void setKaarten(ArrayList\u003cKaart\u003e kaarten) {\n\t\tthis.kaarten \u003d kaarten;\n\t}\n\n\t/**\n\t * \n\t * @return team dat thuis speelt\n\t */\n\tpublic Team getThuisTeam() {\n\t\treturn thuis;\n\t}\n\n\t/**\n\t * \n\t * @return team dat uit speelt\n\t */\n\tpublic Team getUitTeam() {\n\t\treturn uit;\n\t}\n\n\t/**\n\t * \n\t * @return aantal goals van het thuisteam\n\t */\n\tpublic int getThuisScore() {\n\t\treturn thuisScore;\n\t}\n\n\t/**\n\t * Verandert het aantal goals van het thuisteam\n\t * \n\t * @param thuisscore\n\t */\n\tpublic void setThuisScore(int thuisScore) {\n\t\tthis.thuisScore \u003d thuisScore;\n\t}\n\n\t/**\n\t * \n\t * @return aantal goals van het uitteam\n\t */\n\tpublic int getUitScore() {\n\t\treturn uitScore;\n\t}\n\n\t/**\n\t * Verandert het aantal goals van het uitteam\n\t * \n\t * @param uitscore\n\t */\n\tpublic void setUitScore(int uitScore) {\n\t\tthis.uitScore \u003d uitScore;\n\t}\n\n\t/**\n\t * Genereert een wedstrijduitslag op basis van de defensepoints,\n\t * attackpoints en stamina van de spelers in de opstelling. Bovendien maakt\n\t * het gebruik van de methoden generateCards en generateInjuries om\n\t * eventuele blessures te genereren.\n\t */\n\tpublic void generateMatch() {\n\n\t\t// Elke minuut in de wedstrijd kunnen er dingen gebeuren\n\t\tfor (int i \u003d 0; i \u003c 90; i++) {\n\t\t\tint thuisAp \u003d apRating(thuisElftal);\n\t\t\tint uitAp \u003d apRating(uitElftal);\n\t\t\tint thuisDp \u003d dpRating(thuisElftal);\n\t\t\tint uitDp \u003d dpRating(uitElftal);\n\t\t\tint thuisStamina \u003d staminaRating(thuisElftal);\n\t\t\tint uitStamina \u003d staminaRating(uitElftal);\n\t\t\tgenerateCards(i + 1);\n\t\t\tgenerateInjuries(i + 1);\n\n\t\t\t// Bereken de kans voor het thuisteam op een doelpunt\n\t\t\t// thuis spelen geeft een hogere scoorkans +- 1 op 47 per min\n\t\t\t// Stamina bepaalt de scorekans naarmate de wedstrijd vordert\n\t\t\tif (r.nextInt(19000 + (i * (10000 / (1 + thuisStamina)))) - 500 \u003c thuisAp\n\t\t\t\t\t- uitDp) {\n\t\t\t\tif (uitElftal.getKeeper() !\u003d null\n\t\t\t\t\t\t\u0026\u0026 r.nextInt(200) \u003e uitElftal.getKeeper().getKp()) {\n\t\t\t\t\tMan s \u003d getRandomScorer(thuisElftal);\n\t\t\t\t\tGoal g \u003d new Goal(s, i + 1, thuis);\n\t\t\t\t\tgoals.add(g);\n\t\t\t\t\tthuisScore++;\n\t\t\t\t} else if (uitElftal.getKeeper() \u003d\u003d null) {\n\t\t\t\t\tMan s \u003d getRandomScorer(thuisElftal);\n\t\t\t\t\tGoal g \u003d new Goal(s, i + 1, thuis);\n\t\t\t\t\tgoals.add(g);\n\t\t\t\t\tthuisScore++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Bereken de kans voor het thuisteam op een doelpunt\n\t\t\t// uit spelen geeft een lagere scoorkans +- 1 op 49 per min\n\t\t\t// Stamina bepaalt de scorekans naarmate de wedstrijd vordert\n\t\t\tif (r.nextInt(20000 + (i * (10000 / (1 + uitStamina)))) - 500 \u003c uitAp\n\t\t\t\t\t- thuisDp) {\n\t\t\t\tif (thuisElftal.getKeeper() !\u003d null\n\t\t\t\t\t\t\u0026\u0026 r.nextInt(200) \u003e thuisElftal.getKeeper().getKp()) {\n\t\t\t\t\tMan s \u003d getRandomScorer(uitElftal);\n\t\t\t\t\tGoal g \u003d new Goal(s, i + 1, uit);\n\t\t\t\t\tgoals.add(g);\n\t\t\t\t\tuitScore++;\n\t\t\t\t} else if (thuisElftal.getKeeper() \u003d\u003d null) {\n\t\t\t\t\tMan s \u003d getRandomScorer(uitElftal);\n\t\t\t\t\tGoal g \u003d new Goal(s, i + 1, uit);\n\t\t\t\t\tgoals.add(g);\n\t\t\t\t\tuitScore++;\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Geeft een scorer van een gemaakt doelpunt in deze wedstrijd. De kans dat\n\t * de keeper scoort is 1 op 100, dat een verdediger scoort 1 op 10, dat een\n\t * middenvelder scoor 3 op 10 en dat een aanvaller scoort ongeveer 6 op 10.\n\t * \n\t * @param het\n\t *            elftal waaruit een scorer gekozen moet worden\n\t * @return scorer van de goal uit het elftal\n\t * \n\t */\n\tpublic Man getRandomScorer(Formation elftal) {\n\t\tMan m \u003d null;\n\t\twhile (m \u003d\u003d null) {\n\t\t\tint i \u003d r.nextInt(100);\n\t\t\tif (i \u003d\u003d 0) {\n\t\t\t\tm \u003d elftal.getKeeper();\n\t\t\t} else if (i \u003e 0 \u0026\u0026 i \u003c 10) {\n\t\t\t\tint j \u003d r.nextInt(elftal.getVerdedigers().size());\n\t\t\t\tm \u003d elftal.getVerdedigers().get(j);\n\t\t\t} else if (i \u003e 9 \u0026\u0026 i \u003c 40) {\n\t\t\t\tint j \u003d r.nextInt(elftal.getMiddenvelders().size());\n\t\t\t\tm \u003d elftal.getMiddenvelders().get(j);\n\t\t\t} else {\n\t\t\t\tint j \u003d r.nextInt(elftal.getAanvallers().size());\n\t\t\t\tm \u003d elftal.getAanvallers().get(j);\n\t\t\t}\n\t\t}\n\t\treturn m;\n\t}\n\n\t/**\n\t * Berekent de totale attackpoints van een elftal. Verdedigers en\n\t * middenvelders dragen de helft van hun individuele attackpoints bij en\n\t * aanvallers hun volle individuele attackpoints.\n\t * \n\t * @param elftal\n\t *            waarvan de totale attackpoints berekend moet worden\n\t * @return de totale attackpoints van het elftal\n\t */\n\tpublic int apRating(Formation elftal) {\n\t\tint aprating \u003d 0;\n\t\tfor (int i \u003d 0; i \u003c elftal.getVerdedigers().size(); i++) {\n\t\t\tif (elftal.getVerdedigers().get(i) !\u003d null) {\n\t\t\t\taprating \u003d aprating + elftal.getVerdedigers().get(i).getAp()\n\t\t\t\t\t\t/ 2;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getMiddenvelders().size(); i++) {\n\t\t\tif (elftal.getMiddenvelders().get(i) !\u003d null) {\n\t\t\t\taprating \u003d aprating + elftal.getMiddenvelders().get(i).getAp()\n\t\t\t\t\t\t/ 2;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getAanvallers().size(); i++) {\n\t\t\tif (elftal.getAanvallers().get(i) !\u003d null) {\n\t\t\t\taprating \u003d aprating + elftal.getAanvallers().get(i).getAp();\n\t\t\t}\n\t\t}\n\t\treturn aprating;\n\t}\n\n\t/**\n\t * Berekent de totale defensepoints van een elftal. Aanvallers en\n\t * middenvelders dragen de helft van hun individuele defensepoints bij en\n\t * verdedigers hun volle individuele defensepoints.\n\t * \n\t * @param elftal\n\t *            waarvan de totale defensepoints berekend moet worden\n\t * @return de totale defensepoints van het elftal\n\t */\n\tpublic int dpRating(Formation elftal) {\n\t\tint dprating \u003d 0;\n\t\tfor (int i \u003d 0; i \u003c elftal.getVerdedigers().size(); i++) {\n\t\t\tif (elftal.getVerdedigers().get(i) !\u003d null) {\n\t\t\t\tdprating \u003d dprating + elftal.getVerdedigers().get(i).getDp();\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getMiddenvelders().size(); i++) {\n\t\t\tif (elftal.getMiddenvelders().get(i) !\u003d null) {\n\t\t\t\tdprating \u003d dprating + elftal.getMiddenvelders().get(i).getDp()\n\t\t\t\t\t\t/ 2;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getAanvallers().size(); i++) {\n\t\t\tif (elftal.getAanvallers().get(i) !\u003d null) {\n\t\t\t\tdprating \u003d dprating + elftal.getAanvallers().get(i).getDp() / 2;\n\t\t\t}\n\t\t}\n\t\treturn dprating;\n\t}\n\n\t/**\n\t * Berekent de totale stamina van een elftal. Aanvallers en verdedigers\n\t * dragen de helft van hun individuele stamina bij en middenvelders hun\n\t * volle individuele stamina.\n\t * \n\t * @param elftal\n\t *            waarvan de totale stamina berekend moet worden\n\t * @return de totale stamina van het elftal\n\t */\n\tpublic int staminaRating(Formation elftal) {\n\t\tint staminarating \u003d 0;\n\t\tfor (int i \u003d 0; i \u003c elftal.getVerdedigers().size(); i++) {\n\t\t\tif (elftal.getVerdedigers().get(i) !\u003d null) {\n\t\t\t\tstaminarating \u003d staminarating\n\t\t\t\t\t\t+ elftal.getVerdedigers().get(i).getStamina() / 2;\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getMiddenvelders().size(); i++) {\n\t\t\tif (elftal.getMiddenvelders().get(i) !\u003d null) {\n\t\t\t\tstaminarating \u003d staminarating\n\t\t\t\t\t\t+ elftal.getMiddenvelders().get(i).getStamina();\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c elftal.getAanvallers().size(); i++) {\n\t\t\tif (elftal.getAanvallers().get(i) !\u003d null) {\n\t\t\t\tstaminarating \u003d staminarating\n\t\t\t\t\t\t+ elftal.getAanvallers().get(i).getStamina() / 2;\n\t\t\t}\n\t\t}\n\t\treturn staminarating;\n\t}\n\n\t/**\n\t * Genereert een kans op een kaart voor elke speler in het veld. De kans is\n\t * 1 op 30000 dat een bepaalde speler in deze minuut een rode kaart krijgt\n\t * en 1 op 3000 dat een bepaalde speler in deze minuut een gele kaart\n\t * krijgt. Spelers met een rode kaart of twee gele kaarten worden uit het\n\t * elftal verwijdert en krijgen een marktwaarde van 0. Spelers met ��n gele\n\t * kaart krijgen een gehalveerde marktwaarde.\n\t * \n\t * @param minuut\n\t *            waar de wedstrijd zich in bevindt\n\t */\n\tpublic void generateCards(int minuut) {\n\t\t// De keeper heeft een kans op een rode kaart\n\t\tKeeper k \u003d thuisElftal.getKeeper();\n\t\tif (k !\u003d null) {\n\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\tk.setTypekaart(2);\n\t\t\t\tk.setPrijs(0);\n\t\t\t\tkaarten.add(new Kaart(k, 2, minuut, thuis));\n\t\t\t\tthuisElftal.setKeeper(null);\n\t\t\t}\n\t\t}\n\t\t// Elke verdediger heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c thuisElftal.getVerdedigers().size(); j++) {\n\t\t\tMan m \u003d thuisElftal.getVerdedigers().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(2);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\tthuisElftal.getVerdedigers().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut,\n\t\t\t\t\t\t\tthuis));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d thuisElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\t\tthuisElftal.getVerdedigers().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke middenvelder heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c thuisElftal.getMiddenvelders().size(); j++) {\n\t\t\tMan m \u003d thuisElftal.getMiddenvelders().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(2);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\tthuisElftal.getMiddenvelders().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut,\n\t\t\t\t\t\t\tthuis));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d thuisElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\t\tthuisElftal.getVerdedigers().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke aanvaller heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c thuisElftal.getAanvallers().size(); j++) {\n\t\t\tMan m \u003d thuisElftal.getAanvallers().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(2);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getAanvallers().indexOf(m);\n\t\t\t\t\tthuisElftal.getAanvallers().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut,\n\t\t\t\t\t\t\tthuis));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d thuisElftal.getAanvallers().indexOf(m);\n\t\t\t\t\t\tthuisElftal.getAanvallers().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// De keeper heeft een kans op een rode kaart\n\t\tk \u003d uitElftal.getKeeper();\n\t\tif (k !\u003d null) {\n\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\tk.setTypekaart(2);\n\t\t\t\tk.setPrijs(0);\n\t\t\t\tkaarten.add(new Kaart(k, 2, minuut, uit));\n\t\t\t\tuitElftal.setKeeper(null);\n\t\t\t}\n\t\t}\n\n\t\t// Elke verdediger heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c uitElftal.getVerdedigers().size(); j++) {\n\t\t\tMan m \u003d uitElftal.getVerdedigers().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\tuitElftal.getVerdedigers().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut, uit));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d uitElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\t\tuitElftal.getVerdedigers().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke middenvelder heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c uitElftal.getMiddenvelders().size(); j++) {\n\t\t\tMan m \u003d uitElftal.getMiddenvelders().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(2);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\tuitElftal.getMiddenvelders().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut, uit));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d uitElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\t\tuitElftal.getMiddenvelders().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke aanvaller heeft een kans op een gele of rode kaart\n\t\tfor (int j \u003d 0; j \u003c uitElftal.getAanvallers().size(); j++) {\n\t\t\tMan m \u003d uitElftal.getAanvallers().get(j);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setTypekaart(2);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tkaarten.add(new Kaart(m, 2, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getAanvallers().indexOf(m);\n\t\t\t\t\tuitElftal.getAanvallers().set(x, null);\n\t\t\t\t}\n\t\t\t\tif (r.nextInt(3000) \u003d\u003d 1) {\n\t\t\t\t\tkaarten.add(new Kaart(m, m.getTypekaart() + 1, minuut, uit));\n\t\t\t\t\tm.setTypekaart(m.getTypekaart() + 1);\n\t\t\t\t\tm.setPrijs(m.getPrijs() / 2);\n\t\t\t\t\tif (m.getTypekaart() \u003d\u003d 2) {\n\t\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\t\tint x \u003d uitElftal.getAanvallers().indexOf(m);\n\t\t\t\t\t\tuitElftal.getAanvallers().set(x, null);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Genereert een kans op een blessure voor elke speler in het veld. De kans\n\t * is 1 op 30000 dat een bepaalde speler in deze minuut geblesseerd raakt.\n\t * Spelers met een blessure worden uit het elftal verwijdert en krijgen een\n\t * marktwaarde van 0.\n\t * \n\t * @param minuut\n\t *            waarin de wedstrijd zich bevindt.\n\t * \n\t */\n\tpublic void generateInjuries(int minuut) {\n\t\t// De keeper heeft een kans op een blessure\n\t\tKeeper k \u003d thuisElftal.getKeeper();\n\t\tif (k !\u003d null) {\n\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\tk.setGeblesseerd(true);\n\t\t\t\tk.setPrijs(0);\n\t\t\t\tblessures.add(new Injury(k, minuut, thuis));\n\t\t\t\tthuisElftal.setKeeper(null);\n\t\t\t}\n\t\t}\n\n\t\t// Elke verdediger heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c thuisElftal.getVerdedigers().size(); i++) {\n\t\t\tMan m \u003d thuisElftal.getVerdedigers().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\tthuisElftal.getVerdedigers().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke middenvelder heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c thuisElftal.getMiddenvelders().size(); i++) {\n\t\t\tMan m \u003d thuisElftal.getMiddenvelders().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\tthuisElftal.getMiddenvelders().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke aanvaller heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c thuisElftal.getAanvallers().size(); i++) {\n\t\t\tMan m \u003d thuisElftal.getAanvallers().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, thuis));\n\t\t\t\t\tint x \u003d thuisElftal.getAanvallers().indexOf(m);\n\t\t\t\t\tthuisElftal.getAanvallers().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// De keeper heeft een kans op een blessure\n\t\tk \u003d uitElftal.getKeeper();\n\t\tif (k !\u003d null) {\n\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\tk.setGeblesseerd(true);\n\t\t\t\tk.setPrijs(0);\n\t\t\t\tblessures.add(new Injury(k, minuut, uit));\n\t\t\t\tuitElftal.setKeeper(null);\n\t\t\t}\n\t\t}\n\n\t\t// Elke verdediger heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c uitElftal.getVerdedigers().size(); i++) {\n\t\t\tMan m \u003d uitElftal.getVerdedigers().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getVerdedigers().indexOf(m);\n\t\t\t\t\tuitElftal.getVerdedigers().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke middenvelder heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c uitElftal.getMiddenvelders().size(); i++) {\n\t\t\tMan m \u003d uitElftal.getMiddenvelders().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getMiddenvelders().indexOf(m);\n\t\t\t\t\tuitElftal.getMiddenvelders().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Elke aanvaller heeft een kans op een blessure\n\t\tfor (int i \u003d 0; i \u003c uitElftal.getAanvallers().size(); i++) {\n\t\t\tMan m \u003d uitElftal.getAanvallers().get(i);\n\t\t\tif (m !\u003d null) {\n\t\t\t\tif (r.nextInt(30000) \u003d\u003d 1) {\n\t\t\t\t\tm.setGeblesseerd(true);\n\t\t\t\t\tm.setPrijs(0);\n\t\t\t\t\tblessures.add(new Injury(m, minuut, uit));\n\t\t\t\t\tint x \u003d uitElftal.getAanvallers().indexOf(m);\n\t\t\t\t\tuitElftal.getAanvallers().set(x, null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stelt na de wedstrijdgeneratie de wins/losses/draws en de\n\t * goalsvoor/goalstegen van de twee spelende teams bij.\n\t */\n\tpublic void updateStatistics() {\n\t\tif (thuisScore \u003e uitScore) {\n\t\t\tthuis.setWins(thuis.getWins() + 1);\n\t\t\tuit.setLoss(uit.getLoss() + 1);\n\t\t} else if (thuisScore \u003c uitScore) {\n\t\t\tthuis.setLoss(thuis.getLoss() + 1);\n\t\t\tuit.setWins(uit.getWins() + 1);\n\t\t} else {\n\t\t\tthuis.setDraw(thuis.getDraw() + 1);\n\t\t\tuit.setDraw(uit.getDraw() + 1);\n\t\t}\n\t\tthuis.incrGoalsvoor(thuisScore);\n\t\tthuis.incrGoalstegen(uitScore);\n\t\tuit.incrGoalsvoor(uitScore);\n\t\tuit.incrGoalstegen(thuisScore);\n\t}\n\n\t/**\n\t * \n\t * @return Stringrepresentatie van alle uitgedeelde kaarten in deze\n\t *         wedstrijd\n\t */\n\tpublic String kaartentoString() {\n\t\tString s \u003d \"\";\n\t\tfor (int i \u003d 0; i \u003c kaarten.size(); i++) {\n\t\t\ts \u003d s + kaarten.get(i).toString() + \"\\n\";\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * \n\t * @return Stringrepresentatie van alle gemaakte goals in deze wedstrijd\n\t */\n\tpublic String goalstoString() {\n\t\tString s \u003d \"\";\n\t\tfor (int i \u003d 0; i \u003c goals.size(); i++) {\n\t\t\ts \u003d s + goals.get(i).toString() + \"\\n\";\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * \n\t * @return Stringrepresentatie van alle blessures in deze wedstrijd\n\t */\n\tpublic String blessurestoString() {\n\t\tString s \u003d \"\";\n\t\tfor (int i \u003d 0; i \u003c blessures.size(); i++) {\n\t\t\ts \u003d s + blessures.get(i).toString() + \"\\n\";\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * \n\t * @return Stringrepresentatie van de uitslag van deze wedstrijd\n\t */\n\tpublic String scoretoString() {\n\t\treturn \"Score \" + thuis.getNaam() + \" \" + thuisScore + \" - \" + uitScore\n\t\t\t\t+ \" \" + uit.getNaam();\n\t}\n\n\t/**\n\t * \n\t * @return Stringrepresentatie van de gehele wedstrijd\n\t */\n\tpublic String toString() {\n\t\treturn scoretoString() + \"\\n\" + goalstoString() + \"\\n\"\n\t\t\t\t+ kaartentoString() + \"\\n\" + blessurestoString();\n\t}\n\n\t/**\n\t * Berekent het verdiende bedrag van een team in de wedstrijd. Alleen\n\t * bedoeld voor myteam. Afhankelijk van de difficulty van het spel krijgt de\n\t * manager 100/200/300 voor een gewonnen wedstrijd, 30/60/90 voor een\n\t * gelijkspel, 0 voor een verloren wedstrijd en 10/20/30 per goal.\n\t * \n\t * @return bedrag dat de manager met deze wedstrijd heeft verdiend\n\t */\n\tpublic int getEarned() {\n\t\tint budget \u003d 0;\n\t\tint dffactor \u003d 0;\n\t\tswitch (SaveData.getDifficulty()) {\n\t\tcase 0:\n\t\t\tdffactor \u003d 1;\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tdffactor \u003d 2;\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tdffactor \u003d 3;\n\t\t\tbreak;\n\t\t}\n\t\tif (SaveData.getMatchCounter() \u003c 17) {\n\t\t\tif (thuisScore \u003e uitScore) {\n\t\t\t\tbudget \u003d budget + 100 * dffactor;\n\t\t\t} else if (thuisScore \u003d\u003d uitScore) {\n\t\t\t\tbudget \u003d budget + 30 * dffactor;\n\t\t\t}\n\t\t\tbudget \u003d budget + thuisScore * 10 * dffactor;\n\t\t} else {\n\t\t\tif (uitScore \u003e thuisScore) {\n\t\t\t\tbudget \u003d budget + 100 * dffactor;\n\t\t\t} else if (uitScore \u003d\u003d thuisScore) {\n\t\t\t\tbudget \u003d budget + 30 * dffactor;\n\t\t\t}\n\t\t\tbudget \u003d budget + uitScore * 10 * dffactor;\n\t\t}\n\t\treturn budget;\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\SaveData.java",
    "code": "\"package Brain;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * \n * SaveFile Manager Deze klasse houdt je vorderingen bij. Slaat jouw team en\n * jouw tegenstanders op. Hierin staan alle statische attributen en methoden.\n * Het slaat alle gegevens van het huidige spel op.\n *\n */\n\npublic class SaveData {\n\n\tprivate static Team myteam;\n\tprivate static TeamLijst opponents;\n\tprivate static String savefile;\n\tprivate static int budget;\n\tprivate static int matchcounter;\n\tprivate static int difficulty;\n\tprivate static Match currentMatch;\n\tprivate static boolean gekocht;\n\tprivate static boolean verkocht;\n\n\t/**\n\t * \n\t * @return de naam van de savefile van het huidige spel.\n\t */\n\tpublic static String getSavefile() {\n\t\treturn savefile;\n\t}\n\n\t/**\n\t * Verander de naam van de savefile van het huidige spel.\n\t * \n\t * @param savefile\n\t *            naam\n\t */\n\tpublic static void setSavefile(String s) {\n\t\tsavefile \u003d s;\n\t}\n\n\t/**\n\t * \n\t * @return team waarmee gespeeld wordt\n\t */\n\tpublic static Team getMyteam() {\n\t\treturn myteam;\n\t}\n\n\t/**\n\t * Verander het team waarmee gespeeld wordt.\n\t * \n\t * @param team\n\t */\n\tpublic static void setMyteam(Team t) {\n\t\tmyteam \u003d t;\n\t}\n\n\t/**\n\t * \n\t * @return teamlijst van de teams van de tegenstanders\n\t */\n\tpublic static TeamLijst getOpponents() {\n\t\treturn opponents;\n\t}\n\n\t/**\n\t * Verander de lijst van de teams van de tegenstanders.\n\t * \n\t * @param teamlijst\n\t */\n\tpublic static void setOpponents(TeamLijst t) {\n\t\topponents \u003d t;\n\t}\n\n\t/**\n\t * \n\t * @return budget van de manager in het huidige spel\n\t */\n\tpublic static int getBudget() {\n\t\treturn budget;\n\t}\n\n\t/**\n\t * Verander het budget van de manager in het huidige spel.\n\t * \n\t * @param budget\n\t */\n\tpublic static void setBudget(int i) {\n\t\tbudget \u003d i;\n\t}\n\n\t/**\n\t * Tel het meegegeven bedrag op bij het budget van de manager in het huidige\n\t * spel.\n\t * \n\t * @param budget\n\t */\n\tpublic static void incrBudget(int i) {\n\t\tbudget \u003d budget + i;\n\t}\n\n\t/**\n\t * \n\t * @return matchcounter, houdt bij hoeveel wedstrijden er al gespeeld zijn\n\t */\n\tpublic static int getMatchCounter() {\n\t\treturn matchcounter;\n\t}\n\n\t/**\n\t * Verander de matchcounter.\n\t * \n\t * @param matchcounter\n\t */\n\tpublic static void setMatchCounter(int mc) {\n\t\tmatchcounter \u003d mc;\n\t}\n\n\t/**\n\t * De matchcounter wordt met 1 verhoogd.\n\t */\n\tpublic static void incrMatchCounter() {\n\t\tmatchcounter++;\n\t}\n\n\t/**\n\t * \n\t * @return difficulty van het huidige spel, 0 voor easy, 1 voor medium, 2\n\t *         voor hard\n\t */\n\tpublic static int getDifficulty() {\n\t\treturn difficulty;\n\t}\n\n\t/**\n\t * Verander de difficulty van het huidige spel.\n\t * \n\t * @param difficulty\n\t *            , 0 voor easy, 1 voor medium, 2 voor hard\n\t */\n\tpublic static void setDifficulty(int df) {\n\t\tdifficulty \u003d df;\n\t}\n\n\t/**\n\t * \n\t * @return match die myteam het laatst heeft gespeeld (nodig in de\n\t *         RealTimeMatchController klasse)\n\t */\n\tpublic static Match getCurrentMatch() {\n\t\treturn currentMatch;\n\t}\n\n\t/**\n\t * Verander currentmatch.\n\t * \n\t * @param current\n\t *            match\n\t */\n\tpublic static void setCurrentMatch(Match m) {\n\t\tcurrentMatch \u003d m;\n\t}\n\n\t/**\n\t * Check of er sinds afgelopen wedstrijd een speler is gekocht.\n\t * \n\t * @return true als er een speler is gekocht, ander false\n\t */\n\tpublic static boolean isGekocht() {\n\t\treturn gekocht;\n\t}\n\n\t/**\n\t * Verander of er sinds afgelopen wedstrijd een speler is gekocht.\n\t * \n\t * @param true als er een speler is gekocht, anders false\n\t */\n\tpublic static void setGekocht(boolean gekocht) {\n\t\tSaveData.gekocht \u003d gekocht;\n\t}\n\n\t/**\n\t * Check of er sinds afgelopen wedstrijd een speler is verkocht.\n\t * \n\t * @return true als er een speler is verkocht, ander false\n\t */\n\tpublic static boolean isVerkocht() {\n\t\treturn verkocht;\n\t}\n\n\t/**\n\t * Verander of er sinds afgelopen wedstrijd een speler is verkocht.\n\t * \n\t * @param true als er een speler is verkocht, anders false\n\t */\n\tpublic static void setVerkocht(boolean verkocht) {\n\t\tSaveData.verkocht \u003d verkocht;\n\t}\n\n\t/**\n\t * Schrijft alle gegevens weg naar de savefile (zie attributen). Oftewel\n\t * save game.\n\t */\n\tpublic static void write() throws IOException {\n\t\t// Sla op in de SaveFiles map\n\t\tString s \u003d SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t.getLocation().getPath()\n\t\t\t\t+ \"SaveFiles/\" + savefile;\n\t\tPrintWriter out \u003d new PrintWriter(new FileWriter(s));\n\t\tout.println(\"\u003cCompetitie\u003e\");\n\t\tout.println(\"  \u003cBudget\u003e\" + budget + \"\u003c/Budget\u003e\");\n\t\tout.println(\"  \u003cMatchcounter\u003e\" + matchcounter + \"\u003c/Matchcounter\u003e\");\n\t\tout.println(\"  \u003cDifficulty\u003e\" + difficulty + \"\u003c/Difficulty\u003e\");\n\t\tout.println(\"  \u003cGekocht\u003e\" + gekocht + \"\u003c/Gekocht\u003e\");\n\t\tout.println(\"  \u003cVerkocht\u003e\" + verkocht + \"\u003c/Verkocht\u003e\");\n\t\tmyteam.getFormation().write(out);\n\t\tmyteam.write(out);\n\t\topponents.write(out);\n\t\tout.println(\"\u003c/Competitie\u003e\");\n\t\tout.flush();\n\t\tout.close();\n\t}\n\n\t/**\n\t * Leest alle teams en spelers van playerdb.xml in. Oftewel new game.\n\t */\n\tpublic static void readPlayerdb() throws FileNotFoundException {\n\t\tScanner sc \u003d new Scanner(\n\t\t\t\tSaveData.class.getResourceAsStream(\"playerdb.xml\"));\n\t\tsc.next();\n\t\tsetOpponents(TeamLijst.read(sc));\n\t\tsc.close();\n\t}\n\n\t/**\n\t * Leest een savefile in. Stelt alle gegevens in. Oftwel load game.\n\t */\n\tpublic static void readSavefile() throws FileNotFoundException {\n\t\tString s \u003d SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t.getLocation().getPath()\n\t\t\t\t+ \"SaveFiles/\" + savefile;\n\t\tScanner sc \u003d new Scanner(new File(s));\n\t\tsc.next();\n\t\tString bg \u003d SaveData.getContent(sc.next());\n\t\tString mc \u003d SaveData.getContent(sc.next());\n\t\tString df \u003d SaveData.getContent(sc.next());\n\t\tString gk \u003d SaveData.getContent(sc.next());\n\t\tString vk \u003d SaveData.getContent(sc.next());\n\t\tFormation form \u003d Formation.read(sc);\n\t\tsetBudget(Integer.parseInt(bg));\n\t\tsetMatchCounter(Integer.parseInt(mc));\n\t\tsetDifficulty(Integer.parseInt(df));\n\t\tif (gk.equals(\"false\")) {\n\t\t\tsetGekocht(false);\n\t\t} else {\n\t\t\tsetGekocht(true);\n\t\t}\n\t\tif (vk.equals(\"false\")) {\n\t\t\tsetVerkocht(false);\n\t\t} else {\n\t\t\tsetVerkocht(true);\n\t\t}\n\t\tsetMyteam(Team.read(sc));\n\t\tsetOpponents(TeamLijst.read(sc));\n\t\tmyteam.setFormation(form);\n\t\tsc.close();\n\t}\n\n\t/**\n\t * Haalt de inhoud tussen XML tags vandaan.\n\t * \n\t * @param string\n\t *            met XML tags en de inhoud ertussen\n\t * @return string met de inhoud\n\t */\n\tpublic static String getContent(String s) {\n\t\tString[] tokens;\n\t\ttokens \u003d s.split(\"\u003e\");\n\t\ttokens \u003d tokens[1].split(\"\u003c\");\n\t\treturn tokens[0];\n\t}\n\n\t/**\n\t * Scheidt de tag van haakjes en de inhoud.\n\t * \n\t * @param string\n\t *            met XML tags en inhoud\n\t * @return tag zonder haakjes en de inhoud\n\t */\n\tpublic static String getTag(String s) {\n\t\tString[] tokens;\n\t\ttokens \u003d s.split(\"\u003e\");\n\t\ttokens \u003d tokens[0].split(\"\u003c\");\n\t\treturn tokens[1];\n\t}\n\n\t/**\n\t * Stelt het meegegeven team in als myteam en verwijdert het uit de\n\t * tegenstanders lijst.\n\t * \n\t * @param het\n\t *            team dat als myteam wordt ingesteld\n\t */\n\tpublic static void SelectTeam(Team t) {\n\t\tsetMyteam(t);\n\t\topponents.getTeamlijst().remove(t);\n\t}\n\n\t/**\n\t * De opstelling van het team van elke tegenstander wordt naar zijn default\n\t * waarde gezet afhankelijk van de difficulty.\n\t */\n\tpublic static void setOpponentsDefaultFormation() {\n\t\tfor (int i \u003d 0; i \u003c opponents.getTeamlijst().size(); i++) {\n\t\t\topponents.getTeamlijst().get(i).setDefaultFormation(difficulty);\n\t\t}\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Speler.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\nimport java.util.Scanner;\n\n/**\n * \n * Klasse voor Speler objecten\n *\n */\npublic class Speler extends Man {\n\n\tprivate int ap;\n\tprivate int dp;\n\tprivate int stamina;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param naam\n\t *            , naam van de speler\n\t * @param id\n\t *            , unieke id van de speler\n\t * @param prijs\n\t *            , prijs van de speler\n\t * @param typekaart\n\t *            , 0 als de speler geen kaart heeft, 1 als de speler een gele\n\t *            kaart heeft, 2 als de speler een rode kaart heeft\n\t * @param geblesseerd\n\t *            , 0 als de speler niet geblesseerd is, 1 als de speler\n\t *            geblesseerd is\n\t * @param type\n\t *            , positie waarin de speler het best op getraind is\n\t * @param ap\n\t *            , attack points/aanvals punten van de speler\n\t * @param dp\n\t *            , defense points/verdedigings punten van de speler\n\t * @param stamina\n\t *            , uithoudingsvermogen van de speler\n\t * @param team\n\t *            , team waarin de speler speelt\n\t */\n\tpublic Speler(String naam, int id, int prijs, int typekaart,\n\t\t\tint geblesseerd, String type, int ap, int dp, int stamina,\n\t\t\tString team) {\n\t\tsuper(naam, id, prijs, typekaart, geblesseerd, type, team);\n\t\tthis.ap \u003d ap;\n\t\tthis.dp \u003d dp;\n\t\tthis.stamina \u003d stamina;\n\t}\n\n\t/**\n\t * \n\t * @return attack points van de speler\n\t */\n\tpublic int getAp() {\n\t\treturn ap;\n\t}\n\n\t/**\n\t * Verander de attack points van de speler.\n\t * \n\t * @param attack\n\t *            points\n\t */\n\tpublic void setAp(int ap) {\n\t\tthis.ap \u003d ap;\n\t}\n\n\t/**\n\t * \n\t * @return defense points van de speler\n\t */\n\tpublic int getDp() {\n\t\treturn dp;\n\t}\n\n\t/**\n\t * Verander de defense points van de speler.\n\t * \n\t * @param defense\n\t *            points\n\t */\n\tpublic void setDp(int dp) {\n\t\tthis.dp \u003d dp;\n\t}\n\n\t/**\n\t * \n\t * @return stamina van de speler\n\t */\n\tpublic int getStamina() {\n\t\treturn stamina;\n\t}\n\n\t/**\n\t * Verander de stamina van de speler\n\t * \n\t * @param stamina\n\t */\n\tpublic void setStamina(int stamina) {\n\t\tthis.stamina \u003d stamina;\n\t}\n\n\t/**\n\t * Berekent het gemiddelde van de attack points, defense points en de\n\t * stamina van de spelers\n\t * \n\t * @return gemiddelde rating van de speler\n\t */\n\tpublic int getRating() {\n\t\treturn ((ap + dp + stamina) / 3);\n\t}\n\n\t/**\n\t * @return Stringrepresenatie van de speler\n\t */\n\tpublic String toString() {\n\t\tString s \u003d getNaam();\n\t\tif (isGeblesseerd() \u003d\u003d 1) {\n\t\t\ts \u003d s + \"\\t\\tGeblesseerd\";\n\t\t}\n\t\tif (getTypekaart() \u003d\u003d 1) {\n\t\t\ts \u003d s + \"\\t\\tGele Kaart\";\n\t\t} else if (getTypekaart() \u003d\u003d 2) {\n\t\t\ts \u003d s + \"\\t\\tRode Kaart\";\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Schrijft de speler weg naar de savefile\n\t * \n\t * @param out\n\t *            , de printwriter waarmee wordt weggeschreven\n\t */\n\tpublic void write(PrintWriter out) {\n\t\tout.println(\"  \u003cSpeler\u003e\");\n\t\tout.println(\"   \u003cID\u003e\" + getId() + \"\u003c/ID\u003e\");\n\t\tout.println(\"   \u003cNaam\u003e\" + getNaam() + \"\u003c/Naam\u003e\");\n\t\tout.println(\"   \u003cType\u003e\" + getType() + \"\u003c/Type\u003e\");\n\t\tout.println(\"   \u003cAP\u003e\" + ap + \"\u003c/AP\u003e\");\n\t\tout.println(\"   \u003cDP\u003e\" + dp + \"\u003c/DP\u003e\");\n\t\tout.println(\"   \u003cStamina\u003e\" + stamina + \"\u003c/Stamina\u003e\");\n\t\tout.println(\"   \u003cKaart\u003e\" + getTypekaart() + \"\u003c/Kaart\u003e\");\n\t\tout.println(\"   \u003cGeblesseerd\u003e\" + isGeblesseerd() + \"\u003c/Geblesseerd\u003e\");\n\t\tout.println(\"   \u003cPrijs\u003e\" + getPrijs() + \"\u003c/Prijs\u003e\");\n\t\tout.println(\"   \u003cTeam\u003e\" + getTeam() + \"\u003c/Team\u003e\");\n\t\tout.println(\"  \u003c/Speler\u003e\");\n\t}\n\n\t/**\n\t * Leest een speler in van de savefile\n\t * \n\t * @param sc\n\t *            , de scanner waarmee wordt ingelezen\n\t * @return de ingelezen speler\n\t */\n\tpublic static Speler read(Scanner sc) {\n\t\tString id \u003d SaveData.getContent(sc.next());\n\t\tsc.nextLine();\n\t\tString naam \u003d SaveData.getContent(sc.nextLine());\n\t\tString type \u003d SaveData.getContent(sc.next());\n\t\tString ap \u003d SaveData.getContent(sc.next());\n\t\tString dp \u003d SaveData.getContent(sc.next());\n\t\tString stamina \u003d SaveData.getContent(sc.next());\n\t\tString kaart \u003d SaveData.getContent(sc.next());\n\t\tString geblesseerd \u003d SaveData.getContent(sc.next());\n\t\tString prijs \u003d SaveData.getContent(sc.next());\n\t\tsc.nextLine();\n\t\tString team \u003d SaveData.getContent(sc.nextLine());\n\t\tsc.next();\n\t\tint id1 \u003d Integer.parseInt(id);\n\t\tint ap1 \u003d Integer.parseInt(ap);\n\t\tint dp1 \u003d Integer.parseInt(dp);\n\t\tint stamina1 \u003d Integer.parseInt(stamina);\n\t\tint kaart1 \u003d Integer.parseInt(kaart);\n\t\tint geblesseerd1 \u003d Integer.parseInt(geblesseerd);\n\t\tint prijs1 \u003d Integer.parseInt(prijs);\n\t\treturn new Speler(naam, id1, prijs1, kaart1, geblesseerd1, type, ap1,\n\t\t\t\tdp1, stamina1, team);\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\Team.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Random;\nimport java.util.Scanner;\n\n/**\n * \n * Klasse voor Team objecten\n *\n */\npublic class Team {\n\n\tprivate ArrayList\u003cMan\u003e team;\n\tprivate Formation formation;\n\tprivate String naam;\n\tprivate int wins;\n\tprivate int loss;\n\tprivate int draw;\n\tprivate int goalsvoor;\n\tprivate int goalstegen;\n\tprivate int id;\n\tprivate int punten;\n\tprivate int goalstotal;\n\n\t/**\n\t * Constructor\n\t * \n\t * @param naam\n\t *            , naam van het team\n\t * @param wins\n\t *            , aantal winsten van het team\n\t * @param loss\n\t *            , aantal verliezen van het team\n\t * @param draw\n\t *            , aantal gelijkspellen van het team\n\t * @param goalsvoor\n\t *            , aantal doelpunten voor van het team\n\t * @param goalstegen\n\t *            , aantal doelpunten tegen van het team\n\t * @param id\n\t *            , unieke id van het team\n\t */\n\tpublic Team(String naam, int wins, int loss, int draw, int goalsvoor,\n\t\t\tint goalstegen, int id) {\n\t\tthis.naam \u003d naam;\n\t\tthis.wins \u003d wins;\n\t\tthis.loss \u003d loss;\n\t\tthis.draw \u003d draw;\n\t\tthis.goalsvoor \u003d goalsvoor;\n\t\tthis.goalstegen \u003d goalstegen;\n\t\tthis.id \u003d id;\n\t\tteam \u003d new ArrayList\u003cMan\u003e();\n\t\tformation \u003d new Formation();\n\t\tgoalsvoor \u003d 0;\n\t\tgoalstegen \u003d 0;\n\t\tthis.punten \u003d this.wins * 3 + this.draw * 1;\n\t\tthis.goalstotal \u003d (this.goalsvoor) - (this.goalstegen);\n\t}\n\n\t/**\n\t * Geeft het aantal punten van een team terug\n\t * \n\t * @return aantal punten van een team\n\t */\n\tpublic int getPunten() {\n\t\treturn this.punten;\n\t}\n\n\t/**\n\t * Berekent het aantal punten voor een team\n\t * \n\t */\n\tpublic void setPunten() {\n\t\tthis.punten \u003d this.wins * 3 + this.draw * 1;\n\t}\n\n\t/**\n\t * Geeft het doelsaldo van een team terug\n\t * \n\t * @return doelsaldo van een team\n\t */\n\tpublic int getGoalstotal() {\n\t\treturn this.goalstotal;\n\t}\n\n\t/**\n\t * Berekent het doelsaldo van het huidige team\n\t * \n\t */\n\tpublic void setGoalstotal() {\n\t\tthis.goalstotal \u003d (this.goalsvoor) - (this.goalstegen);\n\t}\n\n\t/**\n\t * Voegt een speler of keeper toe aan het team als het object niet al in het\n\t * team zit\n\t * \n\t * @param man\n\t */\n\tpublic void voegToe(Man man) {\n\t\tif (!(team.contains(man))) {\n\t\t\tteam.add(man);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @return lijst van spelers en keepers in dit team\n\t */\n\tpublic ArrayList\u003cMan\u003e getTeam() {\n\t\treturn team;\n\t}\n\n\t/**\n\t * \n\t * @return opstelling waarmee dit team speelt\n\t */\n\tpublic Formation getFormation() {\n\t\treturn formation;\n\t}\n\n\t/**\n\t * Verander de opstelling waarmee dit team speelt.\n\t * \"this.formation \u003d formation\" kan niet gebruikt worden omdat anders de\n\t * formatie bestaat uit losse Man objecten die niet hetzelfde zijn als de\n\t * objecten in het team. Als een speler tijdens een Match bijvoorbeeld een\n\t * rode kaart krijgt, wordt deze dus wel aan speler in de formatie\n\t * uitgedeeld maar niet aan de speler in het team zelf.\n\t * \n\t * @param opstelling\n\t */\n\tpublic void setFormation(Formation formation) {\n\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tKeeper k \u003d formation.getKeeper();\n\t\t\tif (k !\u003d null \u0026\u0026 k.equals(team.get(i))) {\n\t\t\t\tthis.formation.setKeeper(k);\n\t\t\t}\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c formation.getVerdedigers().size(); i++) {\n\t\t\tSpeler s \u003d formation.getVerdedigers().get(i);\n\t\t\tif (s \u003d\u003d null) {\n\t\t\t\tthis.formation.voegVerdedigerToe(null);\n\t\t\t} else {\n\t\t\t\tfor (int j \u003d 0; j \u003c team.size(); j++) {\n\t\t\t\t\tif (s.equals(team.get(j))) {\n\t\t\t\t\t\tthis.formation.voegVerdedigerToe((Speler) team.get(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c formation.getMiddenvelders().size(); i++) {\n\t\t\tSpeler s \u003d formation.getMiddenvelders().get(i);\n\t\t\tif (s \u003d\u003d null) {\n\t\t\t\tthis.formation.voegMiddenvelderToe(null);\n\t\t\t} else {\n\t\t\t\tfor (int j \u003d 0; j \u003c team.size(); j++) {\n\t\t\t\t\tif (s !\u003d null \u0026\u0026 s.equals(team.get(j))) {\n\t\t\t\t\t\tthis.formation\n\t\t\t\t\t\t\t\t.voegMiddenvelderToe((Speler) team.get(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c formation.getAanvallers().size(); i++) {\n\t\t\tSpeler s \u003d formation.getAanvallers().get(i);\n\t\t\tif (s \u003d\u003d null) {\n\t\t\t\tthis.formation.voegAanvallerToe(null);\n\t\t\t} else {\n\t\t\t\tfor (int j \u003d 0; j \u003c team.size(); j++) {\n\t\t\t\t\tif (s !\u003d null \u0026\u0026 s.equals(team.get(j))) {\n\t\t\t\t\t\tthis.formation.voegAanvallerToe((Speler) team.get(j));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @return naam van het team\n\t */\n\tpublic String getNaam() {\n\t\treturn naam;\n\t}\n\n\t/**\n\t * Verander de naam van het team\n\t * \n\t * @param naam\n\t */\n\tpublic void setNaam(String naam) {\n\t\tthis.naam \u003d naam;\n\t}\n\n\t/**\n\t * \n\t * @return aantal winsten van het team\n\t */\n\tpublic int getWins() {\n\t\treturn wins;\n\t}\n\n\t/**\n\t * Verander het aantal winsten van het team\n\t * \n\t * @param wins\n\t */\n\tpublic void setWins(int wins) {\n\t\tthis.wins \u003d wins;\n\t}\n\n\t/**\n\t * \n\t * @return aantal verliezen van het team\n\t */\n\tpublic int getLoss() {\n\t\treturn loss;\n\t}\n\n\t/**\n\t * Verander het aantal verliezen van het team\n\t * \n\t * @param loss\n\t */\n\tpublic void setLoss(int loss) {\n\t\tthis.loss \u003d loss;\n\t}\n\n\t/**\n\t * \n\t * @return aantal gelijkspellen van het team\n\t */\n\tpublic int getDraw() {\n\t\treturn draw;\n\t}\n\n\t/**\n\t * Verander het aantal gelijkspellen van het team\n\t * \n\t * @param draw\n\t */\n\tpublic void setDraw(int draw) {\n\t\tthis.draw \u003d draw;\n\t}\n\n\t/**\n\t * \n\t * @return ID van het team\n\t */\n\tpublic int getId() {\n\t\treturn id;\n\t}\n\n\t/**\n\t * Verander het ID van het team\n\t * \n\t * @param id\n\t */\n\tpublic void setId(int id) {\n\t\tthis.id \u003d id;\n\t}\n\n\t/**\n\t * \n\t * @return aantal goals voor van het team\n\t */\n\tpublic int getGoalsvoor() {\n\t\treturn goalsvoor;\n\t}\n\n\t/**\n\t * Verander het aantal goals voor van het team\n\t * \n\t * @param aantal\n\t *            goals voor\n\t */\n\tpublic void setGoalsvoor(int i) {\n\t\tgoalsvoor \u003d i;\n\t}\n\n\t/**\n\t * Verhoog het aantal goals voor van het team met het meegegeven aantal\n\t * \n\t * @param aantal\n\t *            goals voor\n\t */\n\tpublic void incrGoalsvoor(int i) {\n\t\tgoalsvoor \u003d goalsvoor + i;\n\t}\n\n\t/**\n\t * \n\t * @return aantal goals tegen van het team\n\t */\n\tpublic int getGoalstegen() {\n\t\treturn goalstegen;\n\t}\n\n\t/**\n\t * Verander het aantal goals tegen van het team\n\t * \n\t * @param aantal\n\t *            goals tegen\n\t */\n\tpublic void setGoalstegen(int i) {\n\t\tgoalstegen \u003d i;\n\t}\n\n\t/**\n\t * Verhoog het aantal goals tegen van het team met het meegegeven aantal\n\t * \n\t * @param aantal\n\t *            goals tegen\n\t */\n\tpublic void incrGoalstegen(int i) {\n\t\tgoalstegen \u003d goalstegen + i;\n\t}\n\n\t/**\n\t * Berekent de gemiddelde rating van het team door de gemiddelde rating van\n\t * elke veldspeler en de keeper points van elke keeper te nemen.\n\t * \n\t * @return gemiddelde rating van het team\n\t */\n\tpublic int getRating() {\n\t\tint rating \u003d 0;\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tif (team.get(i) instanceof Speler) {\n\t\t\t\trating \u003d rating + ((Speler) team.get(i)).getRating();\n\t\t\t} else {\n\t\t\t\trating \u003d rating + ((Keeper) team.get(i)).getKp();\n\t\t\t}\n\t\t}\n\t\trating \u003d rating / team.size();\n\t\treturn rating;\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van het team\n\t */\n\tpublic String toString() {\n\t\tString s \u003d naam + \"\\t\" + getRating();\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\ts \u003d s + \"\\n\" + team.get(i).getNaam();\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Geeft het team een default opstelling afhankelijk van de difficulty\n\t * \n\t * @param difficulty\n\t */\n\tpublic void setDefaultFormation(int df) {\n\t\tformation.clear();\n\t\tswitch (df) {\n\t\tcase 0:\n\t\t\tsetEasyFormation();\n\t\t\tbreak;\n\t\tcase 1:\n\t\t\tsetMediumFormation();\n\t\t\tbreak;\n\t\tcase 2:\n\t\t\tsetHardFormation();\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tsetEasyFormation();\n\t\t\tbreak;\n\t\t}\n\n\t}\n\n\t/**\n\t * Stelt de opstelling van het team in op easy door de slechtste keeper\n\t * (keeper met de laagste keeper points) en de slechtste 10 veldspelers\n\t * (standaard 4 verdedigers met de laagste defense points, 3 middenvelders\n\t * met de laagste gemiddelde rating en 3 aanvallers met de laagste attack\n\t * points) te selecteren.\n\t */\n\tpublic void setEasyFormation() {\n\t\t// Selecteer slechtste keeper\n\t\tKeeper k \u003d null;\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tMan temp \u003d team.get(i);\n\t\t\tif (temp instanceof Keeper \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tif (k \u003d\u003d null) {\n\t\t\t\t\tk \u003d (Keeper) temp;\n\t\t\t\t} else if (k.getKp() \u003e ((Keeper) temp).getKp()) {\n\t\t\t\t\tk \u003d (Keeper) temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tformation.setKeeper(k);\n\n\t\t// Selecteer slechtste 10 Spelers\n\t\tArrayList\u003cMan\u003e list \u003d new ArrayList\u003cMan\u003e(0);\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tlist.add(team.get(i));\n\t\t}\n\n\t\t// Selecteer slechtse 4 verdedigers\n\t\tfor (int i \u003d 0; i \u003c 4; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getDp() \u003e ((Speler) temp).getDp()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegVerdedigerToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\n\t\t// Selecteer slechtste 3 aanvallers\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getAp() \u003e ((Speler) temp).getAp()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegAanvallerToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\n\t\t// Selecteer slechtste 3 middenvelders\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getRating() \u003e ((Speler) temp).getRating()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegMiddenvelderToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\t}\n\n\t/**\n\t * Stelt de opstelling van het team in op easy door een random keeper en 10\n\t * random veldspelers (standaard 4 verdedigers, 3 middenvelders en 3\n\t * aanvallers) te selecteren.\n\t */\n\tpublic void setMediumFormation() {\n\n\t\tRandom r \u003d new Random();\n\n\t\t// Selecteer random keeper\n\t\twhile (formation.getKeeper() \u003d\u003d null) {\n\t\t\tMan temp \u003d team.get(r.nextInt(team.size()));\n\t\t\tif (temp instanceof Keeper \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tformation.setKeeper((Keeper) temp);\n\t\t\t}\n\t\t}\n\n\t\t// Selecteer random 10 Spelers\n\t\tArrayList\u003cMan\u003e list \u003d new ArrayList\u003cMan\u003e(0);\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tlist.add(team.get(i));\n\t\t}\n\n\t\t// Selecteer random 4 verdedigers\n\t\twhile (formation.getVerdedigers().size() \u003c 4) {\n\t\t\tMan temp \u003d list.get(r.nextInt(list.size()));\n\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tformation.voegVerdedigerToe((Speler) temp);\n\t\t\t\tlist.remove(temp);\n\t\t\t}\n\t\t}\n\n\t\t// Selecteer random 3 aanvallers\n\t\twhile (formation.getAanvallers().size() \u003c 3) {\n\t\t\tMan temp \u003d list.get(r.nextInt(list.size()));\n\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tformation.voegAanvallerToe((Speler) temp);\n\t\t\t\tlist.remove(temp);\n\t\t\t}\n\t\t}\n\n\t\t// Selecteer random 3 middenvelders\n\t\twhile (formation.getMiddenvelders().size() \u003c 3) {\n\t\t\tMan temp \u003d list.get(r.nextInt(list.size()));\n\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tformation.voegMiddenvelderToe((Speler) temp);\n\t\t\t\tlist.remove(temp);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stelt de opstelling van het team in op hard door de beste keeper (keeper\n\t * met de hoogste keeper points) en de beste 10 veldspelers (standaard 4\n\t * verdedigers met de hoogste defense points, 3 middenvelders met de hoogste\n\t * gemiddelde rating en 3 aanvallers met de hoogste attack points) te\n\t * selecteren.\n\t */\n\tpublic void setHardFormation() {\n\t\t// Selecteer beste keeper\n\t\tKeeper k \u003d null;\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tMan temp \u003d team.get(i);\n\t\t\tif (temp instanceof Keeper \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\tif (k \u003d\u003d null) {\n\t\t\t\t\tk \u003d (Keeper) temp;\n\t\t\t\t} else if (k.getKp() \u003c ((Keeper) temp).getKp()) {\n\t\t\t\t\tk \u003d (Keeper) temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tformation.setKeeper(k);\n\n\t\t// Selecteer beste 10 Spelers\n\t\tArrayList\u003cMan\u003e list \u003d new ArrayList\u003cMan\u003e(0);\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tlist.add(team.get(i));\n\t\t}\n\n\t\t// Selecteer beste 4 verdedigers\n\t\tfor (int i \u003d 0; i \u003c 4; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getDp() \u003c ((Speler) temp).getDp()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegVerdedigerToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\n\t\t// Selecteer beste 3 aanvallers\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getAp() \u003c ((Speler) temp).getAp()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegAanvallerToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\n\t\t// Selecteer beste 3 middenvelders\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tSpeler s \u003d null;\n\t\t\tfor (int j \u003d 0; j \u003c list.size(); j++) {\n\t\t\t\tMan temp \u003d list.get(j);\n\t\t\t\tif (temp instanceof Speler \u0026\u0026 temp.isGeblesseerd() !\u003d 1\n\t\t\t\t\t\t\u0026\u0026 temp.getTypekaart() !\u003d 2) {\n\t\t\t\t\tif (s \u003d\u003d null) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t} else if (s.getRating() \u003c ((Speler) temp).getRating()) {\n\t\t\t\t\t\ts \u003d (Speler) temp;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tformation.voegMiddenvelderToe(s);\n\t\t\tlist.remove(s);\n\t\t}\n\t}\n\n\t/**\n\t * Schrijft het team weg naar de savefile\n\t * \n\t * @param out\n\t *            , de printwriter waarmee wordt weggeschreven\n\t */\n\tpublic void write(PrintWriter out) {\n\t\tout.println(\" \u003cTeam\u003e\");\n\t\tout.println(\"  \u003cID\u003e\" + id + \"\u003c/ID\u003e\");\n\t\tout.println(\"  \u003cNaam\u003e\" + naam + \"\u003c/Naam\u003e\");\n\t\tout.println(\"  \u003cWins\u003e\" + wins + \"\u003c/Wins\u003e\");\n\t\tout.println(\"  \u003cLosses\u003e\" + loss + \"\u003c/Losses\u003e\");\n\t\tout.println(\"  \u003cDraws\u003e\" + draw + \"\u003c/Draws\u003e\");\n\t\tout.println(\"  \u003cGoalsvoor\u003e\" + goalsvoor + \"\u003c/Goalsvoor\u003e\");\n\t\tout.println(\"  \u003cGoalstegen\u003e\" + goalstegen + \"\u003c/Goalstegen\u003e\");\n\t\tout.println(\"  \u003cAantalSpelers\u003e\" + team.size() + \"\u003c/AantalSpelers\u003e\");\n\t\tfor (int i \u003d 0; i \u003c team.size(); i++) {\n\t\t\tteam.get(i).write(out);\n\t\t}\n\t\tout.println(\" \u003c/Team\u003e\");\n\t}\n\n\t/**\n\t * Leest een team in van de savefile\n\t * \n\t * @param sc\n\t *            , de scanner waarmee wordt ingelezen\n\t * @return het ingelezen team\n\t */\n\tpublic static Team read(Scanner sc) {\n\t\tsc.next();\n\t\tString id \u003d SaveData.getContent(sc.next());\n\t\tsc.nextLine();\n\t\tString naam \u003d SaveData.getContent(sc.nextLine());\n\t\tString wins \u003d SaveData.getContent(sc.next());\n\t\tString losses \u003d SaveData.getContent(sc.next());\n\t\tString draws \u003d SaveData.getContent(sc.next());\n\t\tString goalsvoor \u003d SaveData.getContent(sc.next());\n\t\tString goalstegen \u003d SaveData.getContent(sc.next());\n\t\tString aantal \u003d SaveData.getContent(sc.next());\n\t\tint id1 \u003d Integer.parseInt(id);\n\t\tint wins1 \u003d Integer.parseInt(wins);\n\t\tint losses1 \u003d Integer.parseInt(losses);\n\t\tint draws1 \u003d Integer.parseInt(draws);\n\t\tint goalsvoor1 \u003d Integer.parseInt(goalsvoor);\n\t\tint goalstegen1 \u003d Integer.parseInt(goalstegen);\n\t\tint aantal1 \u003d Integer.parseInt(aantal);\n\t\tTeam team \u003d new Team(naam, wins1, losses1, draws1, goalsvoor1,\n\t\t\t\tgoalstegen1, id1);\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tif (SaveData.getTag(sc.next()).equals(\"Speler\")) {\n\t\t\t\tteam.voegToe(Speler.read(sc));\n\t\t\t} else {\n\t\t\t\tteam.voegToe(Keeper.read(sc));\n\t\t\t}\n\t\t}\n\t\tsc.next();\n\t\treturn team;\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\Brain\\TeamLijst.java",
    "code": "\"package Brain;\n\nimport java.io.PrintWriter;\nimport java.util.ArrayList;\nimport java.util.Scanner;\n\n/**\n * \n * Klasse voor een Lijst van teams\n *\n */\npublic class TeamLijst {\n\n\tprivate ArrayList\u003cTeam\u003e teamlijst;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic TeamLijst() {\n\t\tteamlijst \u003d new ArrayList\u003cTeam\u003e();\n\t}\n\n\t/**\n\t * Voegt een team toe aan de lijst als deze nog niet in de lijst zit.\n\t * \n\t * @param team\n\t */\n\tpublic void voegToe(Team team) {\n\t\tif (!(teamlijst.contains(team))) {\n\t\t\tteamlijst.add(team);\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * @return ArrayList van teams\n\t */\n\tpublic ArrayList\u003cTeam\u003e getTeamlijst() {\n\t\treturn teamlijst;\n\t}\n\n\t/**\n\t * Verander de lijst van teams.\n\t * \n\t * @param ArrayList\n\t *            van teams\n\t */\n\tpublic void setTeamlijst(ArrayList\u003cTeam\u003e teamlijst) {\n\t\tthis.teamlijst \u003d teamlijst;\n\t}\n\n\t/**\n\t * Berekent welk team de minste spelers bevat.\n\t * \n\t * @return team met de minste spelers\n\t */\n\tpublic Team getSmallestTeam() {\n\t\tTeam t \u003d teamlijst.get(0);\n\t\tfor (int i \u003d 1; i \u003c teamlijst.size(); i++) {\n\t\t\tif (teamlijst.get(i).getTeam().size() \u003c t.getTeam().size()) {\n\t\t\t\tt \u003d teamlijst.get(i);\n\t\t\t}\n\t\t}\n\t\treturn t;\n\t}\n\n\t/**\n\t * @return Stringrepresentatie van de teamlijst\n\t */\n\tpublic String toString() {\n\t\tString s \u003d \"\";\n\t\tfor (int i \u003d 0; i \u003c teamlijst.size(); i++) {\n\t\t\ts \u003d s + teamlijst.get(i).getNaam() + \"\\t\\tRating: \"\n\t\t\t\t\t+ teamlijst.get(i).getRating() + \"\\n\";\n\t\t}\n\t\treturn s;\n\t}\n\n\t/**\n\t * Schrijft de teamlijst weg naar de savefile.\n\t * \n\t * @param out\n\t *            , de printwriter waarmee wordt weggeschreven\n\t */\n\tpublic void write(PrintWriter out) {\n\t\tout.println(\" \u003cAantalTeams\u003e\" + teamlijst.size() + \"\u003c/AantalTeams\u003e\");\n\t\tfor (int i \u003d 0; i \u003c teamlijst.size(); i++) {\n\t\t\tteamlijst.get(i).write(out);\n\t\t}\n\t}\n\n\t/**\n\t * Leest een teamlijst in van de savefile.\n\t * \n\t * @param sc\n\t *            , de scanner waarmee ingelezen wordt\n\t * @return de ingelezen teamlijst\n\t */\n\tpublic static TeamLijst read(Scanner sc) {\n\t\tString aantal \u003d SaveData.getContent(sc.next());\n\t\tint aantal1 \u003d Integer.parseInt(aantal);\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tfor (int i \u003d 0; i \u003c aantal1; i++) {\n\t\t\tlijst.voegToe(Team.read(sc));\n\t\t}\n\t\treturn lijst;\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\CompetitionRankingController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport javafx.beans.property.ReadOnlyObjectWrapper;\nimport javafx.beans.value.ObservableValue;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableColumn.CellDataFeatures;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.util.Callback;\n\nimport org.controlsfx.dialog.Dialogs;\n\nimport Brain.SaveData;\nimport Brain.Team;\nimport Brain.TeamLijst;\n\n/**\n * \n * Klasse voor de Ranking van alle teams\n * \n */\n@SuppressWarnings(\"deprecation\")\npublic class CompetitionRankingController implements Initializable {\n\n\t// Structuur van de Tabel aanmaken\n\t@FXML\n\tprivate TableView\u003cTeam\u003e tableID;\n\t@FXML\n\tprivate Button gamebutton;\n\t@FXML\n\tprivate Button tacticsbutton;\n\t@FXML\n\tprivate Button schedulebutton;\n\t@FXML\n\tprivate Button marketbutton;\n\t@FXML\n\tprivate Button settingsbutton;\n\t@FXML\n\tprivate Label myteamlabel;\n\t@FXML\n\tprivate Label difficulty;\n\n\tTeam myteam \u003d SaveData.getMyteam();\n\tTeamLijst opponents \u003d SaveData.getOpponents();\n\t// Data voor de tabel aanmaken\n\tfinal ObservableList\u003cTeam\u003e data \u003d FXCollections.observableArrayList(myteam);\n\n\t/**\n\t * @see javafx.fxml.Initializable#initialize(java.net.URL,\n\t *      java.util.ResourceBundle) Initialiseert de tabel met de attributen:\n\t *      naam, wins, loss, draws, goalsvoor en goalstegen van elk team.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\n\t\t// Voeg elk team toe aan de data lijst\n\t\tfor (int i \u003d 0; i \u003c opponents.getTeamlijst().size(); i++) {\n\t\t\tdata.add(opponents.getTeamlijst().get(i));\n\t\t}\n\n\t\t// Definieer de kolommen van de tabel\n\t\tTableColumn\u003cTeam, Number\u003e rankCol \u003d new TableColumn\u003cTeam, Number\u003e(\n\t\t\t\t\"Rank\");\n\t\trankCol.setMinWidth(100);\n\t\trankCol.setCellValueFactory(new Callback\u003cCellDataFeatures\u003cTeam, Number\u003e, ObservableValue\u003cNumber\u003e\u003e() {\n\t\t\tint rankcounter \u003d -1;\n\n\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\tpublic ObservableValue\u003cNumber\u003e call(CellDataFeatures\u003cTeam, Number\u003e p) {\n\t\t\t\trankcounter++;\n\t\t\t\treturn new ReadOnlyObjectWrapper(rankcounter);\n\t\t\t}\n\t\t});\n\t\trankCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e nameCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Team\");\n\t\tnameCol.setMinWidth(300);\n\t\tnameCol.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tnameCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e puntenCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Points\");\n\t\tpuntenCol.setMinWidth(150);\n\t\tpuntenCol.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\"punten\"));\n\t\tpuntenCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e winsCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Wins\");\n\t\twinsCol.setMinWidth(75);\n\t\twinsCol.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\"wins\"));\n\t\twinsCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e drawCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Draws\");\n\t\tdrawCol.setMinWidth(75);\n\t\tdrawCol.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\"draw\"));\n\t\tdrawCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e lossCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Losses\");\n\t\tlossCol.setMinWidth(75);\n\t\tlossCol.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\"loss\"));\n\t\tlossCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e goalstotalCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Goals total\");\n\t\tgoalstotalCol.setMinWidth(150);\n\t\tgoalstotalCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\t\t\"goalstotal\"));\n\t\tgoalstotalCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e goalsvoorCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Goals +\");\n\t\tgoalsvoorCol.setMinWidth(80);\n\t\tgoalsvoorCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\t\t\"goalsvoor\"));\n\t\tgoalsvoorCol.setSortable(false);\n\t\tTableColumn\u003cTeam, String\u003e goalstegenCol \u003d new TableColumn\u003cTeam, String\u003e(\n\t\t\t\t\"Goals -\");\n\t\tgoalstegenCol.setMinWidth(75);\n\t\tgoalstegenCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cTeam, String\u003e(\n\t\t\t\t\t\t\"goalstegen\"));\n\t\tgoalstegenCol.setSortable(false);\n\n\t\t// Vul de tabel met de data lijst en de kolommen\n\t\ttableID.setItems(data);\n\t\ttableID.getColumns().addAll(rankCol, nameCol, puntenCol, winsCol,\n\t\t\t\tdrawCol, lossCol, goalstotalCol, goalsvoorCol, goalstegenCol);\n\n\t\t// Stel de volgorde van de teams in de lijst in\n\t\tpuntenCol.setSortType(TableColumn.SortType.DESCENDING);\n\t\tgoalstotalCol.setSortType(TableColumn.SortType.DESCENDING);\n\n\t\ttableID.getSortOrder().add(puntenCol);\n\t\ttableID.getSortOrder().add(goalstotalCol);\n\t\t\n\t\tendCompetition();\n\n\t\tmyteamlabel.setText(SaveData.getMyteam().getNaam());\n\t\tif (SaveData.getDifficulty() \u003d\u003d 0) {\n\t\t\tdifficulty.setText(\"Easy\");\n\t\t} else if (SaveData.getDifficulty() \u003d\u003d 1) {\n\t\t\tdifficulty.setText(\"Medium\");\n\t\t} else {\n\t\t\tdifficulty.setText(\"Hard\");\n\t\t}\n\n\t}\n\n\t/**\n\t * Checkt of de competitie afgelopen is. Als de laatste wedstrijd gespeeld\n\t * is worden alle mogelijkheden van het spel geblokkeerd behalve de menu\n\t * optie. Bovendien wordt dan de savefile verwijdert.\n\t */\n\tpublic void endCompetition() {\n\t\tif (SaveData.getMatchCounter() \u003d\u003d 34) {\n\t\t\tgamebutton.setDisable(true);\n\t\t\ttacticsbutton.setDisable(true);\n\t\t\tschedulebutton.setDisable(true);\n\t\t\tmarketbutton.setDisable(true);\n\t\t\tDialogs.create().owner(GUI.stage).title(\"End of Season\")\n\t\t\t\t\t.message(\"End of the competition\").showInformation();\n\n\t\t\tnew File(SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t\t.getLocation().getPath()\n\t\t\t\t\t+ \"SaveFiles/\" + SaveData.getSavefile()).delete();\n\t\t}\n\t}\n\n\t/**\n\t * Terug naar Main Menu.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void menuButtonClicked() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar gameMenu.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void GameMenuClicked() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar Tactics.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void TacticsClicked() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"Tactics.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MatchSchedule.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void ScheduleClicked() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MatchSchedule.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MarketPlace.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void MarketClicked() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MarketPlace.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar CompetitionRanking\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void ShowCompetition() throws IOException {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\GameMenuController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.VBox;\nimport javafx.util.Callback;\n\nimport org.controlsfx.dialog.Dialogs;\n\nimport Brain.Formation;\nimport Brain.Keeper;\nimport Brain.Match;\nimport Brain.SaveData;\nimport Brain.Speler;\nimport Brain.Team;\nimport Brain.TeamLijst;\n\n/**\n * \n * Klasse voor het spel menu\n * \n */\n@SuppressWarnings(\"deprecation\")\npublic class GameMenuController implements Initializable {\n\n\t@FXML\n\tprivate VBox attx;\n\t@FXML\n\tprivate VBox midx;\n\t@FXML\n\tprivate VBox defx;\n\t@FXML\n\tprivate Button keeperbutton;\n\t@FXML\n\tprivate Button def1;\n\t@FXML\n\tprivate Button def2;\n\t@FXML\n\tprivate Button def3;\n\t@FXML\n\tprivate Button def4;\n\t@FXML\n\tprivate Button mid1;\n\t@FXML\n\tprivate Button mid2;\n\t@FXML\n\tprivate Button mid3;\n\t@FXML\n\tprivate Button att1;\n\t@FXML\n\tprivate Button att2;\n\t@FXML\n\tprivate Button att3;\n\t@FXML\n\tprivate Label Wins; // Amount of wins of your team\n\t@FXML\n\tprivate Label Losses; // Amount of loses of your team\n\t@FXML\n\tprivate Label Draws; // Amount of draws of your team\n\t@FXML\n\tprivate Label Money; // Amount of money for the current player\n\t@FXML\n\tprivate Label Opponent;\n\t@FXML\n\tprivate Label budgetlabel;\n\t@FXML\n\tprivate TableView\u003cSpeler\u003e spelertable;\n\t@FXML\n\tprivate TableView\u003cKeeper\u003e keepertable;\n\t@FXML\n\tprivate TextArea defenseArea;\n\t@FXML\n\tprivate TextArea midArea;\n\t@FXML\n\tprivate TextArea offenseArea;\n\t@FXML\n\tprivate Label myteamlabel;\n\t@FXML\n\tprivate Label difficulty;\n\n\tprivate Team myteam \u003d SaveData.getMyteam();\n\tprivate Formation form \u003d myteam.getFormation();\n\tprivate TeamLijst opponents \u003d SaveData.getOpponents();\n\n\t/**\n\t * Leegt de spelerstabellen en vult ze opnieuw met spelersdata van het team\n\t * van de tegenstander.\n\t */\n\t@FXML\n\tprivate void ShowOpponent() throws IOException {\n\t\tint mc \u003d SaveData.getMatchCounter();\n\t\tif (mc \u003e 16) {\n\t\t\tmc \u003d mc - 17;\n\t\t}\n\t\tTeam t \u003d opponents.getTeamlijst().get(mc);\n\t\tObservableList\u003cSpeler\u003e list \u003d spelertable.getItems();\n\t\tlist.removeAll(list);\n\t\tfor (int i \u003d 0; i \u003c t.getTeam().size(); i++) {\n\t\t\tif (t.getTeam().get(i) instanceof Speler) {\n\t\t\t\tlist.add((Speler) t.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tObservableList\u003cKeeper\u003e list1 \u003d keepertable.getItems();\n\t\tlist1.removeAll(list1);\n\t\tfor (int i \u003d 0; i \u003c t.getTeam().size(); i++) {\n\t\t\tif (t.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tlist1.add((Keeper) t.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Leegt de spelerstabellen en vult ze opnieuw met spelersdata van myteam.\n\t */\n\t@FXML\n\tprivate void ShowMyTeam() {\n\t\tObservableList\u003cSpeler\u003e list \u003d spelertable.getItems();\n\t\tlist.removeAll(list);\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Speler) {\n\t\t\t\tlist.add((Speler) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tObservableList\u003cKeeper\u003e list1 \u003d keepertable.getItems();\n\t\tlist1.removeAll(list1);\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tlist1.add((Keeper) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Vult twee tabellen met spelersdata en kolommen\n\t * \n\t * @param data1\n\t *            , data van veldspelers\n\t * @param data2\n\t *            , data van keepers\n\t * @param table1\n\t *            , veldspelers tabel\n\t * @param table2\n\t *            , keepers tabel\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void createTable(ObservableList\u003cSpeler\u003e data1,\n\t\t\tObservableList\u003cKeeper\u003e data2, TableView\u003cSpeler\u003e table1,\n\t\t\tTableView\u003cKeeper\u003e table2) {\n\n\t\t// Definieer de kolommen van de spelerstabel\n\t\tTableColumn\u003cSpeler, String\u003e nameCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Fieldplayer\");\n\t\tnameCol.setMinWidth(200);\n\t\tnameCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cSpeler, Number\u003e kaartCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol.setMinWidth(100);\n\t\tkaartCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t@Override\n\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn cell;\n\t\t\t}\n\t\t});\n\n\t\tTableColumn\u003cSpeler, Number\u003e geblesseerdCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol.setMinWidth(100);\n\t\tgeblesseerdCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t// Vul de spelerstabel met de data lijst en de kolommen\n\t\ttable1.setItems(data1);\n\t\ttable1.getColumns().addAll(nameCol, kaartCol, geblesseerdCol);\n\n\t\t// Definieer de kolommen van de keeperstabel\n\t\tTableColumn\u003cKeeper, String\u003e nameCol1 \u003d new TableColumn\u003cKeeper, String\u003e(\n\t\t\t\t\"Keeper\");\n\t\tnameCol1.setMinWidth(200);\n\t\tnameCol1.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cKeeper, Number\u003e kaartCol1 \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol1.setMinWidth(100);\n\t\tkaartCol1.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol1\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\n\t\t\t\t\t\t\t\t\t\t\t\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\n\t\t\t\t\t\t\t\t\t\t\t\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tTableColumn\u003cKeeper, Number\u003e geblesseerdCol1 \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol1.setMinWidth(100);\n\t\tgeblesseerdCol1\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol1\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t// Vul de keeperstabel met de data lijst en de kolommen\n\t\ttable2.setItems(data2);\n\t\ttable2.getColumns().addAll(nameCol1, kaartCol1, geblesseerdCol1);\n\n\t\t// Style de tabel\n\t\ttable1.getStyleClass().add(\"table-view\");\n\t\ttable2.getStyleClass().add(\"table-view\");\n\t}\n\n\t/**\n\t * Start een speelronde. Volgens het Robin Round systeem wat met de\n\t * SaveData.matchcounter wordt bijgehouden speelt elk team afwisselend tegen\n\t * een ander team. Uiteindelijk speelt elk team twee keer tegen een ander\n\t * team. AutoSaved na de wedstrijd.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void PlayGame() throws IOException {\n\t\t// De opstellingen van de teams van alle tegenstanders worden op default\n\t\t// gezet voor het geval er spelers uit zijn gevallen vanwegen een rode\n\t\t// kaart of blessure\n\t\tSaveData.setOpponentsDefaultFormation();\n\n\t\t// In de nieuwe speelronde is er nog geen speler gekocht of verkocht\n\t\tSaveData.setVerkocht(false);\n\t\tSaveData.setGekocht(false);\n\n\t\tTeam myteam \u003d SaveData.getMyteam();\n\t\tTeamLijst opponents \u003d SaveData.getOpponents();\n\n\t\tif (myteam.getFormation().size() \u003d\u003d 11) {\n\n\t\t\t// De lijst wordt correct afgesteld voor de huidige speelronde\n\t\t\tfor (int i \u003d 0; i \u003c SaveData.getMatchCounter(); i++) {\n\t\t\t\topponents \u003d nextRound(opponents);\n\t\t\t}\n\n\t\t\tint counter \u003d SaveData.getMatchCounter();\n\n\t\t\t// In de eerste of tweede helft van de competitie speelt myteam\n\t\t\t// tegen een team\n\t\t\tif (counter \u003c 17) {\n\t\t\t\tMatch m \u003d new Match(myteam, opponents.getTeamlijst().get(0));\n\t\t\t\tSaveData.setCurrentMatch(m);\n\t\t\t\tSaveData.incrBudget(m.getEarned());\n\t\t\t} else {\n\t\t\t\tMatch m \u003d new Match(opponents.getTeamlijst().get(0), myteam);\n\t\t\t\tSaveData.setCurrentMatch(m);\n\t\t\t\tSaveData.incrBudget(m.getEarned());\n\t\t\t}\n\n\t\t\t// Er worden nog 8 andere wedstrijden door tegenstanders onderling\n\t\t\t// gespeeld\n\t\t\tfor (int j \u003d 0; j \u003c 8; j++) {\n\t\t\t\tif (counter \u003c 17) {\n\t\t\t\t\tnew Match(opponents.getTeamlijst().get(j + 1), opponents\n\t\t\t\t\t\t\t.getTeamlijst().get(16 - j)).toString();\n\t\t\t\t} else {\n\t\t\t\t\tnew Match(opponents.getTeamlijst().get(16 - j), opponents\n\t\t\t\t\t\t\t.getTeamlijst().get(j + 1)).toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tSaveData.incrMatchCounter();\n\t\t\tSaveData.write();\n\t\t\tGUI.clear();\n\t\t\tGUI.addPane(\"RealTimeMatch.fxml\", \"top\");\n\t\t} else {\n\t\t\tDialogs.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Formation incomplete\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"There are not enough players in your current formation. Go to tactics to change your formation.\")\n\t\t\t\t\t.showInformation();\n\t\t}\n\t}\n\n\t/**\n\t * Schuift alle teams in de teamlijst 1 plek naar links. Het eerste team\n\t * komt op de laatste plek.\n\t * \n\t * @param de\n\t *            door te wisselen teamlijst\n\t * @return de doorgewisselde teamlijst\n\t */\n\tpublic static TeamLijst nextRound(TeamLijst teams) {\n\t\tTeam temp \u003d teams.getTeamlijst().get(0);\n\t\tTeamLijst res \u003d new TeamLijst();\n\t\tfor (int i \u003d 0; i \u003c 16; i++) {\n\t\t\tres.voegToe(teams.getTeamlijst().get(i + 1));\n\t\t}\n\t\tres.voegToe(temp);\n\t\treturn res;\n\t}\n\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\t\tinitGameResults();\n\t\tinitTables();\n\t\tinitFormation();\n\n\t}\n\n\tpublic void initFormation() {\n\t\tfor (int i \u003d 0; i \u003c 4; i++) {\n\t\t\tButton z \u003d (Button) defx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tButton z \u003d (Button) midx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tButton z \u003d (Button) attx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tif (form.getKeeper() !\u003d null) {\n\t\t\tkeeperbutton.setText(form.getKeeper().getNaam() + \"\\n\" + \"kp:\"\n\t\t\t\t\t+ form.getKeeper().getKp());\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c form.getVerdedigers().size(); i++) {\n\t\t\tButton d \u003d (Button) defx.getChildren().get(i);\n\t\t\tif (form.getVerdedigers().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getVerdedigers().get(i).getNaam() + \"\\n\"\n\t\t\t\t\t\t+ \"ap: \" + form.getVerdedigers().get(i).getAp()\n\t\t\t\t\t\t+ \" dp: \" + form.getVerdedigers().get(i).getDp()\n\t\t\t\t\t\t+ \" st: \" + form.getVerdedigers().get(i).getStamina());\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c form.getMiddenvelders().size(); i++) {\n\t\t\tButton d \u003d (Button) midx.getChildren().get(i);\n\t\t\tif (form.getMiddenvelders().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getMiddenvelders().get(i).getNaam() + \"\\n\"\n\t\t\t\t\t\t+ \"ap: \" + form.getMiddenvelders().get(i).getAp()\n\t\t\t\t\t\t+ \" dp: \" + form.getMiddenvelders().get(i).getDp()\n\t\t\t\t\t\t+ \" st: \" + form.getMiddenvelders().get(i).getStamina());\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c form.getAanvallers().size(); i++) {\n\t\t\tButton d \u003d (Button) attx.getChildren().get(i);\n\t\t\tif (form.getAanvallers().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getAanvallers().get(i).getNaam() + \"\\n\" + \"ap: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getAp() + \" dp: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getDp() + \" st: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getStamina());\n\t\t\t}\n\t\t}\n\n\t}\n\n\tpublic void initTables() {\n\t\tObservableList\u003cSpeler\u003e data1 \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Speler) {\n\t\t\t\tdata1.add((Speler) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t\tObservableList\u003cKeeper\u003e data2 \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tdata2.add((Keeper) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t\tcreateTable(data1, data2, spelertable, keepertable);\n\t}\n\n\tprivate void initGameResults() {\n\t\tint mc \u003d SaveData.getMatchCounter();\n\t\tif (mc \u003e 16) {\n\t\t\tmc \u003d mc - 17;\n\t\t}\n\t\tif (SaveData.getMatchCounter() \u003d\u003d 34) {\n\t\t\tDialogs.create().owner(GUI.stage).title(\"End of Season\")\n\t\t\t\t\t.message(\"End of the competition\").showInformation();\n\t\t\tGUI.clear();\n\t\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t\t} else {\n\t\t\tShowMyTeam();\n\t\t\tmyteamlabel.setText(SaveData.getMyteam().getNaam());\n\t\t\tif (SaveData.getDifficulty() \u003d\u003d 0) {\n\t\t\t\tdifficulty.setText(\"Easy\");\n\t\t\t} else if (SaveData.getDifficulty() \u003d\u003d 1) {\n\t\t\t\tdifficulty.setText(\"Medium\");\n\t\t\t} else {\n\t\t\t\tdifficulty.setText(\"Hard\");\n\t\t\t}\n\t\t\tOpponent.setText(\"Next Opponent: \"\n\t\t\t\t\t+ SaveData.getOpponents().getTeamlijst().get(mc).getNaam()\n\t\t\t\t\t+ \"    \"\n\t\t\t\t\t+ SaveData.getOpponents().getTeamlijst().get(mc)\n\t\t\t\t\t\t\t.getRating());\n\t\t\tWins.setText(\"\" + SaveData.getMyteam().getWins());\n\t\t\tLosses.setText(\"\" + SaveData.getMyteam().getLoss());\n\t\t\tDraws.setText(\"\" + SaveData.getMyteam().getDraw());\n\t\t\tbudgetlabel.setText(\"$\" + SaveData.getBudget());\n\t\t}\n\t}\n\n\t/**\n\t * Terug naar MainMenu.\n\t */\n\t@FXML\n\tprivate void menuButtonClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar gameMenu.\n\t * \n\t */\n\t@FXML\n\tprivate void GameMenuClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar Tactics.\n\t * \n\t */\n\t@FXML\n\tprivate void TacticsClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"Tactics.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MatchSchedule.\n\t * \n\t */\n\t@FXML\n\tprivate void ScheduleClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MatchSchedule.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MarketPlace.\n\t * \n\t */\n\t@FXML\n\tprivate void MarketClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MarketPlace.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar CompetitionRanking\n\t * \n\t */\n\t@FXML\n\tprivate void ShowCompetition() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\GUI.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.FileNotFoundException;\n\nimport javafx.application.Application;\nimport javafx.fxml.FXMLLoader;\nimport javafx.scene.ImageCursor;\nimport javafx.scene.Scene;\nimport javafx.scene.image.Image;\nimport javafx.scene.input.KeyCombination;\nimport javafx.scene.layout.BorderPane;\nimport javafx.scene.layout.Pane;\nimport javafx.stage.Stage;\n\n/**\n * Main GUI klasse, zet andere fxml bestanden op de mainframe\n * \n */\npublic class GUI extends Application {\n\n\tpublic static BorderPane borderPane;\n\tpublic static Stage stage;\n\n\t/**\n\t * Laad MainFrame.fxml in de borderpane.\n\t */\n\t@Override\n\tpublic void start(Stage stage) throws Exception {\n\n\t\tborderPane \u003d (BorderPane) FXMLLoader.load(getClass().getResource(\n\t\t\t\t\"MainFrame.fxml\"));\n\t\tGUI.stage \u003d stage;\n\n\t\ttry {\n\t\t\taddPane(\"MainMenu.fxml\", \"up\");\n\t\t} catch (Exception e) {\n\t\t\tSystem.out.println(\"Something went wrong appending the MainMenu\");\n\t\t}\n\t\tScene scene \u003d new Scene(borderPane);\n\t\tscene.getStylesheets().addAll(\n\t\t\t\tthis.getClass().getResource(\"test.css\").toExternalForm());\n\t\tImage image \u003d new Image(\"GUI/Data/soccer.png\");\n\t\tscene.setCursor(new ImageCursor(image));\n\n\t\tstage.setScene(scene);\n\t\tstage.getIcons().add(\n\t\t\t\tnew Image(GUI.class.getResourceAsStream(\"Data/icon.png\")));\n\t\tstage.setTitle(\"Shaolin Soccer\");\n\t\tstage.show();\n\t\tstage.setFullScreenExitHint(\"\");\n\t\tstage.setFullScreenExitKeyCombination(KeyCombination.NO_MATCH);\n\t\tstage.setFullScreen(true);\n\n\t}\n\n\t/**\n\t * Voeg andere fxml files toe aan de borderpane op 1 van de vijf mogelijke\n\t * plekken.\n\t * \n\t * @param file\n\t *            , FXML file dat toegevoegd wordt\n\t * @param loc\n\t *            , locatie in het scherm bijvoorbeeld:\n\t *            addPane(\"MainMenu.fxml\",\"UP\");\n\t */\n\tpublic static void addPane(String file, String loc) {\n\n\t\tFXMLLoader loader \u003d new FXMLLoader();\n\t\tloader.setLocation(GUI.class.getResource(file));\n\t\tPane pane;\n\t\ttry {\n\t\t\tpane \u003d (Pane) loader.load();\n\t\t\tswitch (loc.toUpperCase()) {\n\t\t\tcase \"TOP\":\n\t\t\tcase \"UP\":\n\t\t\t\tSystem.out.println(\"Appending a pane to up: \" + file);\n\t\t\t\tborderPane.setTop(pane);\n\t\t\t\tbreak;\n\n\t\t\tcase \"RIGHT\":\n\t\t\t\tSystem.out.println(\"Appending a pane to the right: \" + file);\n\t\t\t\tborderPane.setRight(pane);\n\t\t\t\tbreak;\n\n\t\t\tcase \"BOTTOM\":\n\t\t\tcase \"DOWN\":\n\t\t\t\tSystem.out.println(\"Appending a pane to bottom: \" + file);\n\t\t\t\tborderPane.setBottom(pane);\n\t\t\t\tbreak;\n\n\t\t\tcase \"LEFT\":\n\t\t\t\tSystem.out.println(\"Appending a pane to the left: \" + file);\n\t\t\t\tborderPane.setLeft(pane);\n\t\t\t\tbreak;\n\n\t\t\tcase \"MIDDLE\":\n\t\t\tcase \"CENTER\":\n\t\t\t\tSystem.out.println(\"Appending a pane to the center: \" + file);\n\t\t\t\tborderPane.setCenter(pane);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tSystem.out.println(\"That is not an accepted location\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} catch (Exception ex) {\n\t\t\tSystem.out.println(\"Could not load the pane: \" + file);\n\t\t\tex.printStackTrace();\n\t\t}\n\n\t}\n\n\t/**\n\t * Leegt de gehele borderpane\n\t */\n\tpublic static void clear() {\n\n\t\tborderPane.setTop(null);\n\t\tborderPane.setRight(null);\n\t\tborderPane.setLeft(null);\n\t\tborderPane.setBottom(null);\n\t\tborderPane.setCenter(null);\n\n\t}\n\n\t/**\n\t * Main\n\t * \n\t * @throws FileNotFoundException\n\t */\n\tpublic static void main(String[] args) throws FileNotFoundException {\n\n\t\tlaunch(args);\n\t}\n\n\t/**\n\t * \n\t * @return huidige stage\n\t */\n\tpublic static Stage getStage() {\n\t\treturn stage;\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\LoadPlayers1Controller.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.File;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.TextField;\n\nimport javax.accessibility.Accessible;\nimport javax.swing.JComponent;\n\nimport org.controlsfx.control.action.Action;\nimport org.controlsfx.dialog.Dialog;\nimport org.controlsfx.dialog.Dialogs;\n\nimport Brain.SaveData;\n\n/**\n * \n * Klasse voor de keuze van difficulty en manager/savefile naam.\n * \n */\n\n@SuppressWarnings({ \"deprecation\", \"serial\" })\npublic class LoadPlayers1Controller extends JComponent implements Accessible {\n\n\t@FXML\n\tprivate TextField nameinput;\n\t@FXML\n\tprivate Button easybutton;\n\t@FXML\n\tprivate Button mediumbutton;\n\t@FXML\n\tprivate Button hardbutton;\n\t@FXML\n\tprivate Button selectteambutton;\n\n\t/**\n\t * Stelt de difficulty in op easy.\n\t */\n\t@FXML\n\tprivate void setEasy() {\n\t\teasybutton.setDisable(true);\n\t\tmediumbutton.setDisable(false);\n\t\thardbutton.setDisable(false);\n\t\tSaveData.setDifficulty(0);\n\t}\n\n\t/**\n\t * Stelt de difficulty in op medium.\n\t */\n\t@FXML\n\tprivate void setMedium() {\n\t\teasybutton.setDisable(false);\n\t\tmediumbutton.setDisable(true);\n\t\thardbutton.setDisable(false);\n\t\tSaveData.setDifficulty(1);\n\t}\n\n\t/**\n\t * Stelt de difficulty op hard.\n\t */\n\t@FXML\n\tprivate void setHard() {\n\t\teasybutton.setDisable(false);\n\t\tmediumbutton.setDisable(false);\n\t\thardbutton.setDisable(true);\n\t\tSaveData.setDifficulty(2);\n\t}\n\n\t/**\n\t * Slaat de manager/savefile naam op. Valideert de input van de naam\n\t * (ongeldige tekens worden verwijderd en de input mag niet leeg zijn). Er\n\t * moet een difficulty zijn gekozen. Als de savefilenaam al bestaat wordt\n\t * gevraagd of hij overschreven moet worden.\n\t */\n\t@FXML\n\tprivate void selectteam() {\n\t\tString input \u003d nameinput.getText();\n\t\tinput \u003d input.replace(\",\", \"\").replace(\"/\", \"\").replace(\"\\\\\", \"\")\n\t\t\t\t.replace(\"/\", \"\").replace(\"%\", \"\").replace(\"*\", \"\")\n\t\t\t\t.replace(\":\", \"\").replace(\"|\", \"\").replace(\"\\\"\", \"\")\n\t\t\t\t.replace(\"\u003c\", \"\").replace(\"\u003e\", \"\").replace(\".\", \"\")\n\t\t\t\t.replace(\" \", \"\");\n\t\tif (!input.equals(\"\")\n\t\t\t\t\u0026\u0026 (easybutton.isDisabled() || mediumbutton.isDisabled() || hardbutton\n\t\t\t\t\t\t.isDisabled())\n\t\t\t\t\u0026\u0026 !new File(SaveData.class.getProtectionDomain()\n\t\t\t\t\t\t.getCodeSource().getLocation().getPath()\n\t\t\t\t\t\t+ \"SaveFiles/\" + input + \".xml\").exists()) {\n\n\t\t\tSaveData.setSavefile(input + \".xml\");\n\t\t\tGUI.addPane(\"LoadPlayers.fxml\", \"top\");\n\t\t} else if (input.equals(\"\")) {\n\t\t\tDialogs.create().owner(GUI.stage).title(\"Save Name\")\n\t\t\t\t\t.message(\"Enter a name for your save file.\")\n\t\t\t\t\t.showInformation();\n\t\t} else if (easybutton.isDisabled() \u003d\u003d false\n\t\t\t\t\u0026\u0026 mediumbutton.isDisabled() \u003d\u003d false\n\t\t\t\t\u0026\u0026 hardbutton.isDisabled() \u003d\u003d false) {\n\t\t\tDialogs.create().owner(GUI.stage).title(\"Select Difficulty\")\n\t\t\t\t\t.message(\"You have not selected a difficulty yet.\")\n\t\t\t\t\t.showInformation();\n\t\t} else {\n\t\t\tAction response \u003d Dialogs\n\t\t\t\t\t.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Confirm savefile name\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"This savefile already exists. Do you want to overwrite the existing one?\")\n\t\t\t\t\t.showConfirm();\n\t\t\tif (response \u003d\u003d Dialog.ACTION_YES) {\n\t\t\t\tSaveData.setSavefile(input + \".xml\");\n\t\t\t\tGUI.addPane(\"LoadPlayers.fxml\", \"top\");\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Terug naar Main Menu.\n\t */\n\t@FXML\n\tprivate void BackToMainMenu() {\n\t\tGUI.clear();\n\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\LoadPlayersController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\n\nimport javafx.fxml.FXML;\nimport javafx.scene.control.Label;\n\nimport javax.accessibility.Accessible;\nimport javax.swing.JComponent;\n\nimport Brain.SaveData;\nimport Brain.Team;\n\n/**\n * \n * Klasse voor kiezen van een team\n * \n */\n\n@SuppressWarnings(\"serial\")\npublic class LoadPlayersController extends JComponent implements Accessible {\n\n\t@FXML\n\tprivate Label label;\n\t@FXML\n\tprivate Label Spelers;\n\n\tprivate ArrayList\u003cTeam\u003e teamlist \u003d SaveData.getOpponents().getTeamlijst();\n\n\t/**\n\t * Elk van de volgende methode wordt aangeroepen bij een hoover over de\n\t * button. Laat de gemiddelde rating en alle spelers van het team zien.\n\t */\n\n\t@FXML\n\tprivate void WeergeefTeam1() {\n\t\tSpelers.setText(teamlist.get(0).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam2() {\n\t\tSpelers.setText(teamlist.get(1).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam3() {\n\t\tSpelers.setText(teamlist.get(2).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam4() {\n\t\tSpelers.setText(teamlist.get(3).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam5() {\n\t\tSpelers.setText(teamlist.get(4).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam6() {\n\t\tSpelers.setText(teamlist.get(5).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam7() {\n\t\tSpelers.setText(teamlist.get(6).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam8() {\n\t\tSpelers.setText(teamlist.get(7).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam9() {\n\t\tSpelers.setText(teamlist.get(8).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam10() {\n\t\tSpelers.setText(teamlist.get(9).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam11() {\n\t\tSpelers.setText(teamlist.get(10).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam12() {\n\t\tSpelers.setText(teamlist.get(11).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam13() {\n\t\tSpelers.setText(teamlist.get(12).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam14() {\n\t\tSpelers.setText(teamlist.get(13).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam15() {\n\t\tSpelers.setText(teamlist.get(14).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam16() {\n\t\tSpelers.setText(teamlist.get(15).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam17() {\n\t\tSpelers.setText(teamlist.get(16).toString());\n\t}\n\n\t@FXML\n\tprivate void WeergeefTeam18() {\n\t\tSpelers.setText(teamlist.get(17).toString());\n\t}\n\n\t/**\n\t * Elk van de volgende methode wordt aangeroepen bij een klik op de button.\n\t * Selecteert een team.\n\t */\n\t@FXML\n\tprivate void SelectTeam1() {\n\t\tsaveTeam(0);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam2() {\n\t\tsaveTeam(1);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam3() {\n\t\tsaveTeam(2);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam4() {\n\t\tsaveTeam(3);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam5() {\n\t\tsaveTeam(4);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam6() {\n\t\tsaveTeam(5);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam7() {\n\t\tsaveTeam(6);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam8() {\n\t\tsaveTeam(7);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam9() {\n\t\tsaveTeam(8);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam10() {\n\t\tsaveTeam(9);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam11() {\n\t\tsaveTeam(10);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam12() {\n\t\tsaveTeam(11);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam13() {\n\t\tsaveTeam(12);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam14() {\n\t\tsaveTeam(13);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam15() {\n\t\tsaveTeam(14);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam16() {\n\t\tsaveTeam(15);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam17() {\n\t\tsaveTeam(16);\n\t}\n\n\t@FXML\n\tprivate void SelectTeam18() {\n\t\tsaveTeam(17);\n\t}\n\n\t/**\n\t * Selecteert een team als myteam. Initialiseert de gegevens van het spel:\n\t * default opstelling, matchounter op 0, budget op 1000 etc. AutoSaved.\n\t * \n\t * @param index\n\t */\n\tpublic void saveTeam(int index) {\n\t\tSaveData.SelectTeam(teamlist.get(index));\n\t\tSaveData.getMyteam().setDefaultFormation(1);\n\t\tSaveData.setOpponentsDefaultFormation();\n\t\tSaveData.setMatchCounter(0);\n\t\tSaveData.setBudget(1000);\n\t\tSaveData.setVerkocht(false);\n\t\tSaveData.setGekocht(false);\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t\ttry {\n\t\t\tSaveData.write();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n\t/**\n\t * Terug naar Main Menu\n\t */\n\t@FXML\n\tprivate void BackToMainMenu() {\n\t\tGUI.clear();\n\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\MainMenuController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport Brain.SaveData;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.stage.FileChooser;\n\n/**\n *\n * Klasse voor Main Menu\n *\n */\npublic class MainMenuController implements Initializable {\n\n\t/**\n\t * Leest de database van spelers en teams in. Stelt alle data beschikbaar\n\t * voor de rest van het spel.\n\t */\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\t\ttry {\n\t\t\tSaveData.readPlayerdb();\n\t\t} catch (FileNotFoundException e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.out.println(\"het lezen van de db is niet gelukt\");\n\t\t}\n\t}\n\n\t/**\n\t * Naar het manager/savefile naam en difficulty menu.\n\t */\n\t@FXML\n\tpublic void newGameClicked() {\n\n\t\tGUI.clear();\n\n\t\tGUI.addPane(\"LoadPlayers1.fxml\", \"top\");\n\n\t}\n\n\t/**\n\t * Opent de dialog in de default directory van alle savefiles. Leest de\n\t * geselecteerde savefile in het gaat naar het spel menu.\n\t * \n\t * @throws FileNotFoundException\n\t */\n\t@FXML\n\tpublic void loadGameClicked() throws FileNotFoundException {\n\t\tFileChooser chooser \u003d new FileChooser();\n\t\tString initdir \u003d SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t.getLocation().getPath()\n\t\t\t\t+ \"SaveFiles\";\n\t\tchooser.setInitialDirectory(new File(initdir));\n\t\tString s \u003d chooser.showOpenDialog(GUI.stage).getName();\n\t\tSaveData.setSavefile(s);\n\t\tSaveData.readSavefile();\n\t\tSaveData.setOpponentsDefaultFormation();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Sluit het spel af\n\t */\n\t@FXML\n\tprivate void exitButtonClick() {\n\t\tSystem.exit(0);\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\MarketPlaceController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport javafx.beans.property.ReadOnlyObjectWrapper;\nimport javafx.beans.value.ObservableValue;\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableColumn.CellDataFeatures;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.layout.VBox;\nimport javafx.util.Callback;\n\nimport org.controlsfx.control.action.Action;\nimport org.controlsfx.dialog.Dialog;\nimport org.controlsfx.dialog.Dialogs;\n\nimport Brain.Formation;\nimport Brain.Keeper;\nimport Brain.Man;\nimport Brain.SaveData;\nimport Brain.Speler;\nimport Brain.Team;\nimport Brain.TeamLijst;\n\n/**\n * \n * Klasse voor het kopen en verkopen van spelers\n * \n */\n\n@SuppressWarnings(\"deprecation\")\npublic class MarketPlaceController implements Initializable {\n\n\t@FXML\n\tprivate TableView\u003cSpeler\u003e spelertable;\n\t@FXML\n\tprivate TableView\u003cKeeper\u003e keepertable;\n\t@FXML\n\tprivate TableView\u003cSpeler\u003e spelertablemarket;\n\t@FXML\n\tprivate TableView\u003cKeeper\u003e keepertablemarket;\n\t@FXML\n\tprivate Label myteamlabel;\n\t@FXML\n\tprivate Label budgetlabel;\n\t@FXML\n\tprivate Label difficulty;\n\n\tprivate Team myteam \u003d SaveData.getMyteam();\n\tprivate TeamLijst opponents \u003d SaveData.getOpponents();\n\n\t/**\n\t * Initialiseert de gehele market place.\n\t */\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\t\tinitMyTeam();\n\t\tinitMarket();\n\t\tmyteamlabel.setText(myteam.getNaam());\n\t\tbudgetlabel.setText(\"$\" + SaveData.getBudget());\n\t\tif (SaveData.getDifficulty() \u003d\u003d 0) {\n\t\t\tdifficulty.setText(\"Easy\");\n\t\t} else if (SaveData.getDifficulty() \u003d\u003d 1) {\n\t\t\tdifficulty.setText(\"Medium\");\n\t\t} else {\n\t\t\tdifficulty.setText(\"Hard\");\n\t\t}\n\t}\n\n\t/**\n\t * Voegt alle spelers van myteam toe aan een data lijst.\n\t */\n\tpublic void initMyTeam() {\n\t\tObservableList\u003cSpeler\u003e data \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Speler) {\n\t\t\t\tdata.add((Speler) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tObservableList\u003cKeeper\u003e data1 \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tdata1.add((Keeper) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tcreateTable(spelertable, keepertable, data, data1);\n\t}\n\n\t/**\n\t * Voegt alle spelers van de teams van alle tegenstanders aan een data\n\t * lijst.\n\t */\n\tpublic void initMarket() {\n\t\tObservableList\u003cSpeler\u003e data \u003d FXCollections.observableArrayList();\n\t\tfor (int j \u003d 0; j \u003c opponents.getTeamlijst().size(); j++) {\n\t\t\tTeam temp \u003d opponents.getTeamlijst().get(j);\n\t\t\tfor (int i \u003d 0; i \u003c temp.getTeam().size(); i++) {\n\t\t\t\tif (temp.getTeam().get(i) instanceof Speler) {\n\t\t\t\t\tdata.add((Speler) temp.getTeam().get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tObservableList\u003cKeeper\u003e data1 \u003d FXCollections.observableArrayList();\n\t\tfor (int j \u003d 0; j \u003c opponents.getTeamlijst().size(); j++) {\n\t\t\tTeam temp \u003d opponents.getTeamlijst().get(j);\n\t\t\tfor (int i \u003d 0; i \u003c temp.getTeam().size(); i++) {\n\t\t\t\tif (temp.getTeam().get(i) instanceof Keeper) {\n\t\t\t\t\tdata1.add((Keeper) temp.getTeam().get(i));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcreateTable(spelertablemarket, keepertablemarket, data, data1);\n\t}\n\n\t/**\n\t * Vult twee tabellen met spelersdata en kolommen\n\t * \n\t * @param data1\n\t *            , data van veldspelers\n\t * @param data2\n\t *            , data van keepers\n\t * @param table1\n\t *            , veldspelers tabel\n\t * @param table2\n\t *            , keepers tabel\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void createTable(TableView\u003cSpeler\u003e table, TableView\u003cKeeper\u003e table1,\n\t\t\tObservableList\u003cSpeler\u003e data, ObservableList\u003cKeeper\u003e data1) {\n\n\t\t// Cree�r veldspelers tabel\n\t\tTableColumn\u003cSpeler, String\u003e nameCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Fieldplayer\");\n\t\tnameCol.setMinWidth(200);\n\t\tnameCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cSpeler, String\u003e typeCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Type\");\n\t\ttypeCol.setMinWidth(100);\n\t\ttypeCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\"type\"));\n\t\tTableColumn\u003cSpeler, String\u003e apCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"AP\");\n\t\tapCol.setMinWidth(100);\n\t\tapCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\"ap\"));\n\t\tTableColumn\u003cSpeler, String\u003e dpCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"DP\");\n\t\tdpCol.setMinWidth(100);\n\t\tdpCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\"dp\"));\n\t\tTableColumn\u003cSpeler, String\u003e staminaCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Stamina\");\n\t\tstaminaCol.setMinWidth(100);\n\t\tstaminaCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\t\t\"stamina\"));\n\t\tTableColumn\u003cSpeler, Number\u003e kaartCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\tkaartCol.setMinWidth(100);\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t@Override\n\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn cell;\n\t\t\t}\n\t\t});\n\n\t\tTableColumn\u003cSpeler, Number\u003e geblesseerdCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol.setMinWidth(100);\n\t\tgeblesseerdCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tTableColumn\u003cSpeler, String\u003e prijsCol;\n\t\t// Als de het de spelers van myteam betreft stel de gehalveerde\n\t\t// verkoopprijs in\n\t\t// anders de volle koopprijs\n\t\tif (table.equals(spelertable)) {\n\t\t\tprijsCol \u003d new TableColumn\u003cSpeler, String\u003e(\"Retail Price\");\n\t\t\tprijsCol.setMinWidth(150);\n\t\t\tprijsCol.setCellValueFactory(new Callback\u003cCellDataFeatures\u003cSpeler, String\u003e, ObservableValue\u003cString\u003e\u003e() {\n\t\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\t\tpublic ObservableValue\u003cString\u003e call(\n\t\t\t\t\t\tCellDataFeatures\u003cSpeler, String\u003e p) {\n\t\t\t\t\treturn new ReadOnlyObjectWrapper(\n\t\t\t\t\t\t\tp.getValue().getPrijs() / 2);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tprijsCol \u003d new TableColumn\u003cSpeler, String\u003e(\"Price\");\n\t\t\tprijsCol.setMinWidth(100);\n\t\t\tprijsCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\t\"prijs\"));\n\t\t}\n\n\t\ttable.setItems(data);\n\t\ttable.getColumns().addAll(nameCol, typeCol, apCol, dpCol, staminaCol,\n\t\t\t\tkaartCol, geblesseerdCol, prijsCol);\n\n\t\t// Cree�r keepers tabel\n\t\tTableColumn\u003cKeeper, String\u003e nameCol1 \u003d new TableColumn\u003cKeeper, String\u003e(\n\t\t\t\t\"Keeper\");\n\t\tnameCol1.setMinWidth(200);\n\t\tnameCol1.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cKeeper, String\u003e kpCol \u003d new TableColumn\u003cKeeper, String\u003e(\n\t\t\t\t\"KP\");\n\t\tkpCol.setMinWidth(100);\n\t\tkpCol.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\"kp\"));\n\t\tTableColumn\u003cKeeper, Number\u003e kaartCol1 \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol1.setMinWidth(100);\n\t\tkaartCol1.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol1\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\n\t\t\t\t\t\t\t\t\t\t\t\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\n\t\t\t\t\t\t\t\t\t\t\t\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tTableColumn\u003cKeeper, Number\u003e geblesseerdCol1 \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol1.setMinWidth(100);\n\t\tgeblesseerdCol1\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol1\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tTableColumn\u003cKeeper, String\u003e prijsCol1;\n\t\t// Als de het de de keepers van myteam betreft stel de gehalveerde\n\t\t// verkoopprijs in\n\t\t// anders de volle koopprijs\n\t\tif (table.equals(spelertable)) {\n\t\t\tprijsCol1 \u003d new TableColumn\u003cKeeper, String\u003e(\"Retail Price\");\n\t\t\tprijsCol1.setMinWidth(150);\n\t\t\tprijsCol1\n\t\t\t\t\t.setCellValueFactory(new Callback\u003cCellDataFeatures\u003cKeeper, String\u003e, ObservableValue\u003cString\u003e\u003e() {\n\t\t\t\t\t\t@SuppressWarnings(\"rawtypes\")\n\t\t\t\t\t\tpublic ObservableValue\u003cString\u003e call(\n\t\t\t\t\t\t\t\tCellDataFeatures\u003cKeeper, String\u003e p) {\n\t\t\t\t\t\t\treturn new ReadOnlyObjectWrapper(p.getValue()\n\t\t\t\t\t\t\t\t\t.getPrijs() / 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t} else {\n\t\t\tprijsCol1 \u003d new TableColumn\u003cKeeper, String\u003e(\"Price\");\n\t\t\tprijsCol1.setMinWidth(100);\n\t\t\tprijsCol1\n\t\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\n\t\t\t\t\t\t\t\"prijs\"));\n\t\t}\n\n\t\ttable1.setItems(data1);\n\t\ttable1.getColumns().addAll(nameCol1, kpCol, kaartCol1, geblesseerdCol1,\n\t\t\t\tprijsCol1);\n\t}\n\n\t/**\n\t * Deze 4 methoden zorgen dat de juiste speler wordt geselecteerd in de\n\t * juiste tabel.\n\t */\n\t@FXML\n\tpublic void deselectSpelerTable() {\n\t\tspelertable.getSelectionModel().select(null);\n\t}\n\n\t@FXML\n\tpublic void deselectKeeperTable() {\n\t\tkeepertable.getSelectionModel().select(null);\n\t}\n\n\t@FXML\n\tpublic void deselectSpelerTableMarket() {\n\t\tspelertablemarket.getSelectionModel().select(null);\n\t}\n\n\t@FXML\n\tpublic void deselectKeeperTableMarket() {\n\t\tkeepertablemarket.getSelectionModel().select(null);\n\t}\n\n\t/**\n\t * Koopt een speler van de market.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tpublic void koopSpeler() throws IOException {\n\t\tif (spelertablemarket.getSelectionModel().getSelectedItem() !\u003d null) {\n\t\t\tkoop(spelertablemarket.getSelectionModel().getSelectedItem());\n\t\t} else if (keepertablemarket.getSelectionModel().getSelectedItem() !\u003d null) {\n\t\t\tkoop(keepertablemarket.getSelectionModel().getSelectedItem());\n\t\t}\n\t}\n\n\t/**\n\t * Verkoopt een speler uit myteam.\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tpublic void verkoopSpeler() throws IOException {\n\t\tif (spelertable.getSelectionModel().getSelectedItem() !\u003d null\n\t\t\t\t\u0026\u0026 spelertable.getItems().size() \u003e 15) {\n\t\t\tverkoop(spelertable.getSelectionModel().getSelectedItem());\n\t\t} else if (spelertable.getSelectionModel().getSelectedItem() !\u003d null) {\n\t\t\tDialogs.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Minimum Reached\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"You have reached the minimum amount of fieldplayers in your team.\")\n\t\t\t\t\t.showInformation();\n\t\t} else if (keepertable.getSelectionModel().getSelectedItem() !\u003d null\n\t\t\t\t\u0026\u0026 keepertable.getItems().size() \u003e 2) {\n\t\t\tverkoop(keepertable.getSelectionModel().getSelectedItem());\n\t\t} else if (keepertable.getSelectionModel().getSelectedItem() !\u003d null) {\n\t\t\tDialogs.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Minimum Reached\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"You have reached the minimum amount of keepers in your team.\")\n\t\t\t\t\t.showInformation();\n\t\t}\n\t}\n\n\t/**\n\t * Koopt een speler als het budget groot genoeg is en er deze speelronde nog\n\t * geen speler gekocht is.\n\t * \n\t * @param de\n\t *            te kopen speler\n\t * @throws IOException\n\t */\n\tpublic void koop(Man m) throws IOException {\n\t\tint budget \u003d SaveData.getBudget();\n\t\tif (budget \u003e\u003d m.getPrijs() \u0026\u0026 SaveData.isGekocht() \u003d\u003d false) {\n\t\t\tAction response \u003d Dialogs\n\t\t\t\t\t.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Confirm purchase\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"Confirm that you want to purchase \" + m.getNaam()\n\t\t\t\t\t\t\t\t\t+ \".\").showConfirm();\n\t\t\tif (response \u003d\u003d Dialog.ACTION_YES) {\n\t\t\t\tmyteam.voegToe(m);\n\t\t\t\tTeam t \u003d null;\n\t\t\t\tfor (int i \u003d 0; i \u003c opponents.getTeamlijst().size(); i++) {\n\t\t\t\t\tif (m.getTeam().equals(\n\t\t\t\t\t\t\topponents.getTeamlijst().get(i).getNaam())) {\n\t\t\t\t\t\tt \u003d opponents.getTeamlijst().get(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tt.getTeam().remove(m);\n\t\t\t\tm.setTeam(myteam.getNaam());\n\t\t\t\tSaveData.setBudget(budget - m.getPrijs());\n\t\t\t\tSaveData.setGekocht(true);\n\t\t\t\tSaveData.write();\n\t\t\t\trefreshTables();\n\t\t\t}\n\t\t} else if (SaveData.isGekocht() \u003d\u003d false) {\n\t\t\tDialogs.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Insufficient Funds\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"You don\u0027t have enough money to buy \" + m.getNaam()\n\t\t\t\t\t\t\t\t\t+ \".\").showInformation();\n\t\t} else {\n\t\t\tDialogs.create().owner(GUI.stage).title(\"Wait for the next round\")\n\t\t\t\t\t.message(\"You can only buy one player per round.\")\n\t\t\t\t\t.showInformation();\n\t\t}\n\t}\n\n\t/**\n\t * Verkoopt een speler als er deze speelronde nog geen speler verkocht is\n\t * \n\t * @param de\n\t *            te verkopen speler\n\t * @throws IOException\n\t */\n\tpublic void verkoop(Man m) throws IOException {\n\t\tif (SaveData.isVerkocht() \u003d\u003d false) {\n\t\t\tAction response \u003d Dialogs\n\t\t\t\t\t.create()\n\t\t\t\t\t.owner(GUI.stage)\n\t\t\t\t\t.title(\"Confirm Sale\")\n\t\t\t\t\t.message(\n\t\t\t\t\t\t\t\"Confirm that you want to sell \" + m.getNaam()\n\t\t\t\t\t\t\t\t\t+ \".\").showConfirm();\n\t\t\tif (response \u003d\u003d Dialog.ACTION_YES) {\n\t\t\t\tmyteam.getTeam().remove(m);\n\t\t\t\tFormation form \u003d myteam.getFormation();\n\t\t\t\tif (form.getKeeper().equals(m)) {\n\t\t\t\t\tform.setKeeper(null);\n\t\t\t\t}\n\t\t\t\tif (form.getVerdedigers().contains(m)) {\n\t\t\t\t\tint i \u003d form.getVerdedigers().indexOf(m);\n\t\t\t\t\tform.getVerdedigers().set(i, null);\n\n\t\t\t\t} else if (form.getMiddenvelders().contains(m)) {\n\t\t\t\t\tint i \u003d form.getMiddenvelders().indexOf(m);\n\t\t\t\t\tform.getMiddenvelders().set(i, null);\n\n\t\t\t\t} else if (form.getAanvallers().contains(m)) {\n\t\t\t\t\tint i \u003d form.getAanvallers().indexOf(m);\n\t\t\t\t\tform.getAanvallers().set(i, null);\n\t\t\t\t}\n\t\t\t\tm.setTeam(opponents.getSmallestTeam().getNaam());\n\t\t\t\topponents.getSmallestTeam().getTeam().add(m);\n\t\t\t\tSaveData.incrBudget(m.getPrijs() / 2);\n\t\t\t\tSaveData.setVerkocht(true);\n\t\t\t\tSaveData.write();\n\t\t\t\trefreshTables();\n\t\t\t}\n\t\t} else {\n\t\t\tDialogs.create().owner(GUI.stage).title(\"Wait for the next round\")\n\t\t\t\t\t.message(\"You can only sell one player per round\")\n\t\t\t\t\t.showInformation();\n\t\t}\n\t}\n\n\t/**\n\t * Leegt de tabellen en laadt de nieuwe spelers data in na een aankoop of\n\t * verkoop.\n\t */\n\tpublic void refreshTables() {\n\t\tTeam t \u003d null;\n\t\tObservableList\u003cSpeler\u003e list \u003d spelertable.getItems();\n\t\tlist.removeAll(list);\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Speler) {\n\t\t\t\tlist.add((Speler) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t\tlist \u003d spelertablemarket.getItems();\n\t\tlist.removeAll(list);\n\t\tfor (int i \u003d 0; i \u003c opponents.getTeamlijst().size(); i++) {\n\t\t\tt \u003d opponents.getTeamlijst().get(i);\n\t\t\tfor (int j \u003d 0; j \u003c t.getTeam().size(); j++) {\n\t\t\t\tif (t.getTeam().get(j) instanceof Speler) {\n\t\t\t\t\tlist.add((Speler) t.getTeam().get(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tObservableList\u003cKeeper\u003e list1 \u003d keepertable.getItems();\n\t\tlist1.removeAll(list1);\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tlist1.add((Keeper) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\t\tlist1 \u003d keepertablemarket.getItems();\n\t\tlist1.removeAll(list1);\n\t\tfor (int i \u003d 0; i \u003c opponents.getTeamlijst().size(); i++) {\n\t\t\tt \u003d opponents.getTeamlijst().get(i);\n\t\t\tfor (int j \u003d 0; j \u003c t.getTeam().size(); j++) {\n\t\t\t\tif (t.getTeam().get(j) instanceof Keeper) {\n\t\t\t\t\tlist1.add((Keeper) t.getTeam().get(j));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tbudgetlabel.setText(\"$\" + SaveData.getBudget());\n\t}\n\n\t/**\n\t * Terug naar Main Menu.\n\t * \n\t */\n\t@FXML\n\tprivate void menuButtonClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar gameMenu.\n\t * \n\t */\n\t@FXML\n\tprivate void GameMenuClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar Tactics.\n\t * \n\t */\n\t@FXML\n\tprivate void TacticsClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"Tactics.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MatchSchedule.\n\t * \n\t */\n\t@FXML\n\tprivate void ScheduleClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MatchSchedule.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MarketPlace.\n\t * \n\t */\n\t@FXML\n\tprivate void MarketClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MarketPlace.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar CompetitionRanking\n\t * \n\t */\n\t@FXML\n\tprivate void ShowCompetition() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\MatchScheduleController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport Brain.SaveData;\nimport Brain.Team;\nimport Brain.TeamLijst;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Label;\n\n/**\n *\n * Klasse voor het overzicht van wedstrijden in de aankomende speelronde\n *\n */\n\npublic class MatchScheduleController implements Initializable {\n\n\t@FXML\n\tprivate Label Mteam1;\n\t@FXML\n\tprivate Label Mteam2;\n\t@FXML\n\tprivate Label Mteam3;\n\t@FXML\n\tprivate Label Mteam4;\n\t@FXML\n\tprivate Label Mteam5;\n\t@FXML\n\tprivate Label Mteam6;\n\t@FXML\n\tprivate Label Mteam7;\n\t@FXML\n\tprivate Label Mteam8;\n\t@FXML\n\tprivate Label Mteam9;\n\t@FXML\n\tprivate Label Mteam10;\n\t@FXML\n\tprivate Label Mteam11;\n\t@FXML\n\tprivate Label Mteam12;\n\t@FXML\n\tprivate Label Mteam13;\n\t@FXML\n\tprivate Label Mteam14;\n\t@FXML\n\tprivate Label Mteam15;\n\t@FXML\n\tprivate Label Mteam16;\n\t@FXML\n\tprivate Label Mteam17;\n\t@FXML\n\tprivate Label Mteam18;\n\t@FXML\n\tprivate Label myteamlabel;\n\t@FXML\n\tprivate Label difficulty;\n\n\t/**\n\t * Initialiseert het overzicht van aankomende wedstrijden\n\t */\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\n\t\tint counter \u003d SaveData.getMatchCounter();\n\t\tTeamLijst opponents \u003d SaveData.getOpponents();\n\n\t\tfor (int i \u003d 0; i \u003c counter; i++) {\n\t\t\topponents \u003d nextRound(opponents);\n\t\t}\n\n\t\tMteam1.setText(SaveData.getMyteam().getNaam());\n\t\tMteam2.setText(opponents.getTeamlijst().get(0).getNaam());\n\t\tMteam3.setText(opponents.getTeamlijst().get(1).getNaam());\n\t\tMteam4.setText(opponents.getTeamlijst().get(16).getNaam());\n\t\tMteam5.setText(opponents.getTeamlijst().get(2).getNaam());\n\t\tMteam6.setText(opponents.getTeamlijst().get(15).getNaam());\n\t\tMteam7.setText(opponents.getTeamlijst().get(3).getNaam());\n\t\tMteam8.setText(opponents.getTeamlijst().get(14).getNaam());\n\t\tMteam9.setText(opponents.getTeamlijst().get(4).getNaam());\n\t\tMteam10.setText(opponents.getTeamlijst().get(13).getNaam());\n\t\tMteam11.setText(opponents.getTeamlijst().get(5).getNaam());\n\t\tMteam12.setText(opponents.getTeamlijst().get(12).getNaam());\n\t\tMteam13.setText(opponents.getTeamlijst().get(6).getNaam());\n\t\tMteam14.setText(opponents.getTeamlijst().get(11).getNaam());\n\t\tMteam15.setText(opponents.getTeamlijst().get(7).getNaam());\n\t\tMteam16.setText(opponents.getTeamlijst().get(10).getNaam());\n\t\tMteam17.setText(opponents.getTeamlijst().get(8).getNaam());\n\t\tMteam18.setText(opponents.getTeamlijst().get(9).getNaam());\n\n\t\tmyteamlabel.setText(SaveData.getMyteam().getNaam());\n\t\tif (SaveData.getDifficulty() \u003d\u003d 0) {\n\t\t\tdifficulty.setText(\"Easy\");\n\t\t} else if (SaveData.getDifficulty() \u003d\u003d 1) {\n\t\t\tdifficulty.setText(\"Medium\");\n\t\t} else {\n\t\t\tdifficulty.setText(\"Hard\");\n\t\t}\n\n\t}\n\n\t/**\n\t * Schuift alle teams in de teamlijst 1 plek naar links. Het eerste team\n\t * komt op de laatste plek.\n\t * \n\t * @param de\n\t *            door te wisselen teamlijst\n\t * @return de doorgewisselde teamlijst\n\t */\n\tpublic static TeamLijst nextRound(TeamLijst teams) {\n\t\tTeam temp \u003d teams.getTeamlijst().get(0);\n\t\tTeamLijst res \u003d new TeamLijst();\n\t\tfor (int i \u003d 0; i \u003c 16; i++) {\n\t\t\tres.voegToe(teams.getTeamlijst().get(i + 1));\n\t\t}\n\t\tres.voegToe(temp);\n\t\treturn res;\n\t}\n\n\t/**\n\t * Terug naar Main Menu.\n\t * \n\t */\n\t@FXML\n\tprivate void menuButtonClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar gameMenu.\n\t * \n\t */\n\t@FXML\n\tprivate void GameMenuClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar Tactics.\n\t * \n\t */\n\t@FXML\n\tprivate void TacticsClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"Tactics.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MatchSchedule.\n\t * \n\t */\n\t@FXML\n\tprivate void ScheduleClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MatchSchedule.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MarketPlace.\n\t * \n\t */\n\t@FXML\n\tprivate void MarketClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MarketPlace.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar CompetitionRanking\n\t * \n\t * @throws IOException\n\t */\n\t@FXML\n\tprivate void ShowCompetition() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\RealTimeMatchController.java",
    "code": "\"package GUI;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport javafx.application.Platform;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.media.Media;\nimport javafx.scene.media.MediaPlayer;\n\nimport org.controlsfx.dialog.Dialogs;\n\nimport Brain.Goal;\nimport Brain.Injury;\nimport Brain.Kaart;\nimport Brain.Match;\nimport Brain.SaveData;\n\n/**\n * \n * Klasse voor een wedstrijd simulatie. De daadwerkelijke wedstrijd is al\n * gespeeld. Deze klasse geeft een visueel verloop van de wedstrijd.\n *\n */\n@SuppressWarnings(\"deprecation\")\npublic class RealTimeMatchController implements Initializable, Runnable {\n\n\t@FXML\n\tprivate TextArea thuisArea;\n\t@FXML\n\tprivate TextArea uitArea;\n\t@FXML\n\tprivate Label minuutlabel;\n\t@FXML\n\tprivate Label team1label;\n\t@FXML\n\tprivate Label team2label;\n\t@FXML\n\tprivate Label scorelabel;\n\n\tprivate Thread t;\n\tprivate Match m;\n\tprivate MediaPlayer goal;\n\tprivate MediaPlayer goal2;\n\tprivate MediaPlayer goal3;\n\tprivate MediaPlayer kaart;\n\tprivate MediaPlayer blessure;\n\tprivate MediaPlayer achtergrond;\n\tprivate int thuisScore \u003d 0;\n\tprivate int uitScore \u003d 0;\n\n\t/**\n\t * Initialiseert het scherm. Stelt de juiste teams in, stelt de MediaPlayers\n\t * in voor de soundeffects en start de thread.\n\t */\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\t\tm \u003d SaveData.getCurrentMatch();\n\t\tteam1label.setText(m.getThuisTeam().getNaam());\n\t\tteam2label.setText(m.getUitTeam().getNaam());\n\t\tthuisArea.setEditable(false);\n\t\tuitArea.setEditable(false);\n\t\tURL resource \u003d getClass().getResource(\"Data/goal.mp3\");\n\t\tMedia media \u003d new Media(resource.toString());\n\t\tgoal \u003d new MediaPlayer(media);\n\n\t\tresource \u003d getClass().getResource(\"Data/goal2.mp3\");\n\t\tmedia \u003d new Media(resource.toString());\n\t\tgoal2 \u003d new MediaPlayer(media);\n\t\tresource \u003d getClass().getResource(\"Data/goal3.mp3\");\n\t\tmedia \u003d new Media(resource.toString());\n\t\tgoal3 \u003d new MediaPlayer(media);\n\n\t\tresource \u003d getClass().getResource(\"Data/kaart.mp3\");\n\t\tmedia \u003d new Media(resource.toString());\n\t\tkaart \u003d new MediaPlayer(media);\n\t\tresource \u003d getClass().getResource(\"Data/blessure.mp3\");\n\t\tmedia \u003d new Media(resource.toString());\n\t\tblessure \u003d new MediaPlayer(media);\n\t\tresource \u003d getClass().getResource(\"Data/achtergrond.mp3\");\n\t\tmedia \u003d new Media(resource.toString());\n\t\tachtergrond \u003d new MediaPlayer(media);\n\t\tachtergrond.play();\n\t\tachtergrond.setVolume(0.35);\n\t\tt \u003d new Thread(this);\n\t\tt.start();\n\t}\n\n\t/**\n\t * Stopt de thread en sluit de wedstrijd simulatie af.\n\t */\n\t@FXML\n\tpublic void skipMatch() {\n\t\tt.stop();\n\t\tescape();\n\t}\n\n\t/**\n\t * De wedstrijdsimulatie. Met minuut counter en meldingen van goals,\n\t * blessures en kaarten.\n\t */\n\t@Override\n\tpublic void run() {\n\t\tfor (int i \u003d 0; i \u003c 90; i++) {\n\t\t\tfinal int min \u003d i;\n\t\t\tPlatform.runLater(new Runnable() {\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tminuutlabel.setText((min + 1) + \"th minute\");\n\t\t\t\t\t// Weergeef elk doelpunt\n\t\t\t\t\tfor (int i \u003d 0; i \u003c m.getGoals().size(); i++) {\n\t\t\t\t\t\tGoal g \u003d m.getGoals().get(i);\n\t\t\t\t\t\tif (g.getMinuut() \u003d\u003d min) {\n\t\t\t\t\t\t\tif (g.getTeam().equals(m.getThuisTeam())) {\n\t\t\t\t\t\t\t\tthuisScore++;\n\t\t\t\t\t\t\t\tthuisArea.appendText(g.toString() + \"\\n\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuitScore++;\n\t\t\t\t\t\t\t\tuitArea.appendText(g.toString() + \"\\n\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tdouble whatsound \u003d Math.random();\n\t\t\t\t\t\t\tif (whatsound \u003c .33) {\n\t\t\t\t\t\t\t\tgoal.stop();\n\t\t\t\t\t\t\t\tgoal.play();\n\t\t\t\t\t\t\t} else if (whatsound \u003c .66) {\n\t\t\t\t\t\t\t\tgoal2.stop();\n\t\t\t\t\t\t\t\tgoal2.play();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tgoal3.stop();\n\t\t\t\t\t\t\t\tgoal3.play();\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tscorelabel.setText(thuisScore + \" - \" + uitScore);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Weergeef elke blessure\n\t\t\t\t\tfor (int i \u003d 0; i \u003c m.getBlessures().size(); i++) {\n\t\t\t\t\t\tInjury j \u003d m.getBlessures().get(i);\n\t\t\t\t\t\tif (j.getMinuut() \u003d\u003d min) {\n\t\t\t\t\t\t\tif (j.getTeam().equals(m.getThuisTeam())) {\n\t\t\t\t\t\t\t\tthuisArea.appendText(j.toString() + \"\\n\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuitArea.appendText(j.toString() + \"\\n\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tblessure.stop();\n\t\t\t\t\t\t\tblessure.play();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Weergeef elke kaart\n\t\t\t\t\tfor (int i \u003d 0; i \u003c m.getKaarten().size(); i++) {\n\t\t\t\t\t\tKaart k \u003d m.getKaarten().get(i);\n\t\t\t\t\t\tif (k.getMinuut() \u003d\u003d min) {\n\t\t\t\t\t\t\tif (k.getTeam().equals(m.getThuisTeam())) {\n\t\t\t\t\t\t\t\tthuisArea.appendText(k.toString() + \"\\n\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tuitArea.appendText(k.toString() + \"\\n\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tkaart.stop();\n\t\t\t\t\t\t\tkaart.play();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\ttry {\n\t\t\t\tThread.sleep(300);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t\tPlatform.runLater(new Runnable() {\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tescape();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Geeft een melding van het resultaat van de wedstrijd en gaat afhankelijk\n\t * van de matchcounter naar het spel menu of aan het einde van het seizoen\n\t * naar de Ranking.\n\t */\n\tpublic void escape() {\n\t\tachtergrond.stop();\n\t\tDialogs.create().owner(GUI.stage).title(\"Match Results\")\n\t\t\t\t.message(m.toString() + \"\\nYou earned $\" + m.getEarned() + \".\")\n\t\t\t\t.showInformation();\n\t\tif (SaveData.getMatchCounter() \u003d\u003d 34) {\n\t\t\tGUI.clear();\n\t\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t\t} else {\n\t\t\tGUI.clear();\n\t\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t\t}\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\GUI\\TacticsController.java",
    "code": "\"/*\n * To change this license header, choose License Headers in Project Properties.\n * To change this template file, choose Tools | Templates\n * and open the template in the editor.\n */\npackage GUI;\n\nimport java.net.URL;\nimport java.util.ResourceBundle;\n\nimport javafx.collections.FXCollections;\nimport javafx.collections.ObservableList;\nimport javafx.event.EventHandler;\nimport javafx.fxml.FXML;\nimport javafx.fxml.Initializable;\nimport javafx.geometry.Pos;\nimport javafx.scene.control.Button;\nimport javafx.scene.control.Label;\nimport javafx.scene.control.TableCell;\nimport javafx.scene.control.TableColumn;\nimport javafx.scene.control.TableView;\nimport javafx.scene.control.TextArea;\nimport javafx.scene.control.cell.PropertyValueFactory;\nimport javafx.scene.image.Image;\nimport javafx.scene.image.ImageView;\nimport javafx.scene.input.ClipboardContent;\nimport javafx.scene.input.DragEvent;\nimport javafx.scene.input.Dragboard;\nimport javafx.scene.input.MouseEvent;\nimport javafx.scene.input.TransferMode;\nimport javafx.scene.layout.VBox;\nimport javafx.util.Callback;\nimport Brain.Formation;\nimport Brain.Keeper;\nimport Brain.SaveData;\nimport Brain.Speler;\nimport Brain.Team;\n\n/**\n * \n * Klasse voor het instellen van de opstelling van myteam\n *\n */\n\npublic class TacticsController implements Initializable {\n\n\tImage image \u003d new Image(\"GUI/Data/speler.png\");\n\t@FXML\n\tprivate VBox attx;\n\t@FXML\n\tprivate VBox midx;\n\t@FXML\n\tprivate VBox defx;\n\t@FXML\n\tprivate Button keeperbutton;\n\t@FXML\n\tprivate Button def1;\n\t@FXML\n\tprivate Button def2;\n\t@FXML\n\tprivate Button def3;\n\t@FXML\n\tprivate Button def4;\n\t@FXML\n\tprivate Button mid1;\n\t@FXML\n\tprivate Button mid2;\n\t@FXML\n\tprivate Button mid3;\n\t@FXML\n\tprivate Button att1;\n\t@FXML\n\tprivate Button att2;\n\t@FXML\n\tprivate Button att3;\n\t@FXML\n\tprivate Label Wins; // Amount of wins of your team\n\t@FXML\n\tprivate Label Losses; // Amount of loses of your team\n\t@FXML\n\tprivate Label Draws; // Amount of draws of your team\n\t@FXML\n\tprivate Label budgetlabel;\n\t@FXML\n\tprivate TableView\u003cSpeler\u003e spelertable;\n\t@FXML\n\tprivate TableView\u003cKeeper\u003e keepertable;\n\t@FXML\n\tprivate Label keeperLabel;\n\t@FXML\n\tprivate TextArea defenseArea;\n\t@FXML\n\tprivate TextArea midArea;\n\t@FXML\n\tprivate TextArea offenseArea;\n\t@FXML\n\tprivate Label myteamlabel;\n\t@FXML\n\tprivate Label difficulty;\n\n\tprivate Team myteam \u003d SaveData.getMyteam();\n\n\tprivate Formation form \u003d myteam.getFormation();\n\n\t/**\n\t * Initialiseert het scherm met de huidige opstelling.\n\t */\n\t@Override\n\tpublic void initialize(URL url, ResourceBundle rb) {\n\t\tinitializeListeners();\n\t\tinitPlayers();\n\t\tinitKeepers();\n\t\tinitFormation();\n\n\t\tmyteamlabel.setText(SaveData.getMyteam().getNaam());\n\t\tif (SaveData.getDifficulty() \u003d\u003d 0) {\n\t\t\tdifficulty.setText(\"Easy\");\n\t\t} else if (SaveData.getDifficulty() \u003d\u003d 1) {\n\t\t\tdifficulty.setText(\"Medium\");\n\t\t} else {\n\t\t\tdifficulty.setText(\"Hard\");\n\t\t}\n\n\t}\n\n\t/**\n\t * Methoden voor het instellen van formatie posities\n\t */\n\t@FXML\n\tpublic void setDef1() {\n\t\tsetDef(0);\n\t}\n\n\t@FXML\n\tpublic void setDef2() {\n\t\tsetDef(1);\n\t}\n\n\t@FXML\n\tpublic void setDef3() {\n\t\tsetDef(2);\n\t}\n\n\t@FXML\n\tpublic void setDef4() {\n\t\tsetDef(3);\n\t}\n\n\t@FXML\n\tpublic void setMid1() {\n\t\tsetMid(0);\n\t}\n\n\t@FXML\n\tpublic void setMid2() {\n\t\tsetMid(1);\n\t}\n\n\t@FXML\n\tpublic void setMid3() {\n\t\tsetMid(2);\n\t}\n\n\t@FXML\n\tpublic void setAtt1() {\n\t\tsetAtt(0);\n\t}\n\n\t@FXML\n\tpublic void setAtt2() {\n\t\tsetAtt(1);\n\t}\n\n\t@FXML\n\tpublic void setAtt3() {\n\t\tsetAtt(2);\n\t}\n\n\t/**\n\t * Initialiseert Eventhandelers voor dragging en dropping.\n\t */\n\tprivate void initializeListeners() {\n\t\tspelertable.setOnDragDetected(new EventHandler\u003cMouseEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(MouseEvent event) {\n\t\t\t\tDragboard dragBoard \u003d spelertable\n\t\t\t\t\t\t.startDragAndDrop(TransferMode.MOVE);\n\t\t\t\tdragBoard.setDragView(image, 25, 25);\n\t\t\t\t;\n\n\t\t\t\tClipboardContent content \u003d new ClipboardContent();\n\t\t\t\tcontent.putString(\"1\");\n\n\t\t\t\tdragBoard.setContent(content);\n\t\t\t}\n\t\t});\n\n\t\tkeepertable.setOnDragDetected(new EventHandler\u003cMouseEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(MouseEvent event) {\n\t\t\t\tDragboard dragBoard \u003d keepertable\n\t\t\t\t\t\t.startDragAndDrop(TransferMode.MOVE);\n\t\t\t\tdragBoard.setDragView(image, 25, 25);\n\t\t\t\t;\n\n\t\t\t\tClipboardContent content \u003d new ClipboardContent();\n\t\t\t\tcontent.putString(\"0\");\n\n\t\t\t\tdragBoard.setContent(content);\n\t\t\t}\n\t\t});\n\n\t\tkeeperbutton.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tkeeperbutton.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"0\")) {\n\t\t\t\t\tsetGK();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\t\tdef1.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tdef1.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetDef1();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tdef2.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tdef2.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetDef2();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tdef3.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tdef3.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetDef3();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tdef4.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tdef4.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetDef4();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tmid1.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tmid1.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetMid1();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tmid2.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tmid2.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetMid2();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tmid3.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tmid3.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetMid3();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tatt1.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tatt1.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetAtt1();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tatt2.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tatt2.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetAtt2();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\n\t\tatt3.setOnDragOver(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tdragEvent.acceptTransferModes(TransferMode.MOVE);\n\t\t\t}\n\t\t});\n\t\tatt3.setOnDragDropped(new EventHandler\u003cDragEvent\u003e() {\n\t\t\t@Override\n\t\t\tpublic void handle(DragEvent dragEvent) {\n\t\t\t\tif (dragEvent.getDragboard().getString().equals(\"1\")) {\n\t\t\t\t\tsetAtt3();\n\t\t\t\t}\n\t\t\t\tdragEvent.setDropCompleted(true);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Stel een geselecteerde speler op op positie k in de verdediging als de\n\t * speler is geselecteerd uit de tabel, niet geblesseerd is en geen rode\n\t * kaart heeft. Als de speler al in het veld stelt verwijder hem dan van\n\t * zijn oude positie.\n\t * \n\t * @param k\n\t */\n\tprivate void setDef(int k) {\n\t\tSpeler o \u003d spelertable.getSelectionModel().getSelectedItem();\n\t\tif (o !\u003d null \u0026\u0026 o.isGeblesseerd() !\u003d 1 \u0026\u0026 o.getTypekaart() !\u003d 2) {\n\t\t\tif (form.contains(o)) {\n\t\t\t\tif (form.getVerdedigers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getVerdedigers().indexOf(o);\n\t\t\t\t\tform.getVerdedigers().set(i, null);\n\n\t\t\t\t} else if (form.getMiddenvelders().contains(o)) {\n\t\t\t\t\tint i \u003d form.getMiddenvelders().indexOf(o);\n\t\t\t\t\tform.getMiddenvelders().set(i, null);\n\n\t\t\t\t} else if (form.getAanvallers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getAanvallers().indexOf(o);\n\t\t\t\t\tform.getAanvallers().set(i, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tform.getVerdedigers().set(k, o);\n\t\t}\n\t\tinitFormation();\n\n\t}\n\n\t/**\n\t * Stel een geselecteerde speler op op positie k op het middenveld als de\n\t * speler is geselecteerd uit de tabel, niet geblesseerd is en geen rode\n\t * kaart heeft. Als de speler al in het veld stelt verwijder hem dan van\n\t * zijn oude positie.\n\t * \n\t * @param k\n\t */\n\tprivate void setMid(int k) {\n\t\tSpeler o \u003d spelertable.getSelectionModel().getSelectedItem();\n\t\tif (o !\u003d null \u0026\u0026 o.isGeblesseerd() !\u003d 1 \u0026\u0026 o.getTypekaart() !\u003d 2) {\n\t\t\tif (form.contains(o)) {\n\t\t\t\tif (form.getVerdedigers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getVerdedigers().indexOf(o);\n\t\t\t\t\tform.getVerdedigers().set(i, null);\n\n\t\t\t\t} else if (form.getMiddenvelders().contains(o)) {\n\t\t\t\t\tint i \u003d form.getMiddenvelders().indexOf(o);\n\t\t\t\t\tform.getMiddenvelders().set(i, null);\n\n\t\t\t\t} else if (form.getAanvallers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getAanvallers().indexOf(o);\n\t\t\t\t\tform.getAanvallers().set(i, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tform.getMiddenvelders().set(k, o);\n\t\t}\n\t\tinitFormation();\n\n\t}\n\n\t/**\n\t * Stel een geselecteerde speler op op positie k in de aanval als de speler\n\t * is geselecteerd uit de tabel, niet geblesseerd is en geen rode kaart\n\t * heeft. Als de speler al in het veld stelt verwijder hem dan van zijn oude\n\t * positie.\n\t * \n\t * @param k\n\t */\n\tprivate void setAtt(int k) {\n\t\tSpeler o \u003d spelertable.getSelectionModel().getSelectedItem();\n\t\tif (o !\u003d null \u0026\u0026 o.isGeblesseerd() !\u003d 1 \u0026\u0026 o.getTypekaart() !\u003d 2) {\n\t\t\tif (form.contains(o)) {\n\t\t\t\tif (form.getVerdedigers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getVerdedigers().indexOf(o);\n\t\t\t\t\tform.getVerdedigers().set(i, null);\n\n\t\t\t\t} else if (form.getMiddenvelders().contains(o)) {\n\t\t\t\t\tint i \u003d form.getMiddenvelders().indexOf(o);\n\t\t\t\t\tform.getMiddenvelders().set(i, null);\n\n\t\t\t\t} else if (form.getAanvallers().contains(o)) {\n\t\t\t\t\tint i \u003d form.getAanvallers().indexOf(o);\n\t\t\t\t\tform.getAanvallers().set(i, null);\n\t\t\t\t}\n\t\t\t}\n\t\t\tform.getAanvallers().set(k, o);\n\t\t}\n\t\tinitFormation();\n\n\t}\n\n\t/**\n\t * Stel de geselecteerde goalkeeper op als de keeper is geselecteerd uit de\n\t * tabel, niet geblesseerd is en geen rode kaart heeft.\n\t */\n\t@FXML\n\tpublic void setGK() {\n\t\tKeeper k \u003d keepertable.getSelectionModel().getSelectedItem();\n\t\tif (k !\u003d null \u0026\u0026 k.isGeblesseerd() !\u003d 1 \u0026\u0026 k.getTypekaart() !\u003d 2) {\n\t\t\tform.setKeeper(k);\n\t\t\tkeeperbutton.setText(k.getNaam() + \"\\n\" + \"kp: \" + k.getKp());\n\t\t}\n\t}\n\n\t/**\n\t * Initialiseert de tabel van veldspelers met spelersdata van myteam.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void initPlayers() {\n\t\tObservableList\u003cSpeler\u003e data \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Speler) {\n\t\t\t\tdata.add((Speler) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tTableColumn\u003cSpeler, String\u003e nameCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Fieldplayer\");\n\t\tnameCol.setMinWidth(200);\n\t\tnameCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cSpeler, String\u003e typeCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Type\");\n\t\ttypeCol.setMinWidth(75);\n\t\ttypeCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\"type\"));\n\t\tTableColumn\u003cSpeler, String\u003e apCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"AP\");\n\t\tapCol.setMinWidth(75);\n\t\tapCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\"ap\"));\n\t\tTableColumn\u003cSpeler, String\u003e dpCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"DP\");\n\t\tdpCol.setMinWidth(75);\n\t\tdpCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\"dp\"));\n\t\tTableColumn\u003cSpeler, String\u003e staminaCol \u003d new TableColumn\u003cSpeler, String\u003e(\n\t\t\t\t\"Stamina\");\n\t\tstaminaCol.setMinWidth(100);\n\t\tstaminaCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cSpeler, String\u003e(\n\t\t\t\t\t\t\"stamina\"));\n\t\tTableColumn\u003cSpeler, Number\u003e kaartCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol.setMinWidth(100);\n\t\tkaartCol.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t@Override\n\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn cell;\n\t\t\t}\n\t\t});\n\n\t\tTableColumn\u003cSpeler, Number\u003e geblesseerdCol \u003d new TableColumn\u003cSpeler, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol.setMinWidth(100);\n\t\tgeblesseerdCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cSpeler, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cSpeler, Number\u003e, TableCell\u003cSpeler, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cSpeler, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cSpeler, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cSpeler, Number\u003e cell \u003d new TableCell\u003cSpeler, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tspelertable.setItems(data);\n\t\tspelertable.getColumns().addAll(nameCol, typeCol, apCol, dpCol,\n\t\t\t\tstaminaCol, kaartCol, geblesseerdCol);\n\t}\n\n\t/**\n\t * Initialiseert de tabel van keepers met spelersdata van myteam.\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tpublic void initKeepers() {\n\t\tObservableList\u003cKeeper\u003e data \u003d FXCollections.observableArrayList();\n\t\tfor (int i \u003d 0; i \u003c myteam.getTeam().size(); i++) {\n\t\t\tif (myteam.getTeam().get(i) instanceof Keeper) {\n\t\t\t\tdata.add((Keeper) myteam.getTeam().get(i));\n\t\t\t}\n\t\t}\n\n\t\tTableColumn\u003cKeeper, String\u003e nameCol \u003d new TableColumn\u003cKeeper, String\u003e(\n\t\t\t\t\"Keeper\");\n\t\tnameCol.setMinWidth(200);\n\t\tnameCol.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\n\t\t\t\t\"naam\"));\n\t\tTableColumn\u003cKeeper, String\u003e kpCol \u003d new TableColumn\u003cKeeper, String\u003e(\n\t\t\t\t\"KP\");\n\t\tkpCol.setMinWidth(100);\n\t\tkpCol.setCellValueFactory(new PropertyValueFactory\u003cKeeper, String\u003e(\"kp\"));\n\t\tTableColumn\u003cKeeper, Number\u003e kaartCol \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Card\");\n\t\tkaartCol.setMinWidth(100);\n\t\tkaartCol.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\"typekaart\"));\n\t\t// Afbeelding gele/rode kaart\n\t\tkaartCol.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t@Override\n\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/gelekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else if (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 2) {\n\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/rodekaart.jpg\");\n\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\timg.setFitWidth(15);\n\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn cell;\n\t\t\t}\n\t\t});\n\n\t\tTableColumn\u003cKeeper, Number\u003e geblesseerdCol \u003d new TableColumn\u003cKeeper, Number\u003e(\n\t\t\t\t\"Injured\");\n\t\tgeblesseerdCol.setMinWidth(100);\n\t\tgeblesseerdCol\n\t\t\t\t.setCellValueFactory(new PropertyValueFactory\u003cKeeper, Number\u003e(\n\t\t\t\t\t\t\"geblesseerd\"));\n\t\t// Afbeelding rood kruis bij blessure\n\t\tgeblesseerdCol\n\t\t\t\t.setCellFactory(new Callback\u003cTableColumn\u003cKeeper, Number\u003e, TableCell\u003cKeeper, Number\u003e\u003e() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic TableCell\u003cKeeper, Number\u003e call(\n\t\t\t\t\t\t\tTableColumn\u003cKeeper, Number\u003e param) {\n\t\t\t\t\t\tTableCell\u003cKeeper, Number\u003e cell \u003d new TableCell\u003cKeeper, Number\u003e() {\n\t\t\t\t\t\t\t@Override\n\t\t\t\t\t\t\tpublic void updateItem(Number item, boolean empty) {\n\t\t\t\t\t\t\t\tif (item !\u003d null \u0026\u0026 item.intValue() \u003d\u003d 1) {\n\t\t\t\t\t\t\t\t\tVBox vb \u003d new VBox();\n\t\t\t\t\t\t\t\t\tvb.setAlignment(Pos.CENTER);\n\t\t\t\t\t\t\t\t\tImage m \u003d new Image(\"GUI/Data/kruis.png\");\n\t\t\t\t\t\t\t\t\tImageView img \u003d new ImageView();\n\t\t\t\t\t\t\t\t\timg.setImage(m);\n\t\t\t\t\t\t\t\t\timg.setFitHeight(20);\n\t\t\t\t\t\t\t\t\timg.setFitWidth(20);\n\t\t\t\t\t\t\t\t\tvb.getChildren().add(img);\n\t\t\t\t\t\t\t\t\tsetGraphic(vb);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tsetGraphic(null);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn cell;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tkeepertable.setItems(data);\n\t\tkeepertable.getColumns().addAll(nameCol, kpCol, kaartCol,\n\t\t\t\tgeblesseerdCol);\n\t}\n\n\t/**\n\t * Initialiseert de representatie van de opstelling van myteam.\n\t */\n\tpublic void initFormation() {\n\t\tfor (int i \u003d 0; i \u003c 4; i++) {\n\t\t\tButton z \u003d (Button) defx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tButton z \u003d (Button) midx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c 3; i++) {\n\t\t\tButton z \u003d (Button) attx.getChildren().get(i);\n\t\t\tz.setText(\"none\");\n\t\t}\n\n\t\tif (form.getKeeper() !\u003d null) {\n\t\t\tkeeperbutton.setText(form.getKeeper().getNaam() + \"\\n\" + \"kp:\"\n\t\t\t\t\t+ form.getKeeper().getKp());\n\t\t} else {\n\t\t\tkeeperbutton.setText(\"none\");\n\t\t}\n\n\t\tfor (int i \u003d 0; i \u003c form.getVerdedigers().size(); i++) {\n\t\t\tButton d \u003d (Button) defx.getChildren().get(i);\n\t\t\tif (form.getVerdedigers().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getVerdedigers().get(i).getNaam() + \"\\n\"\n\t\t\t\t\t\t+ \"ap: \" + form.getVerdedigers().get(i).getAp()\n\t\t\t\t\t\t+ \" dp: \" + form.getVerdedigers().get(i).getDp()\n\t\t\t\t\t\t+ \" st: \" + form.getVerdedigers().get(i).getStamina());\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c form.getMiddenvelders().size(); i++) {\n\t\t\tButton d \u003d (Button) midx.getChildren().get(i);\n\t\t\tif (form.getMiddenvelders().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getMiddenvelders().get(i).getNaam() + \"\\n\"\n\t\t\t\t\t\t+ \"ap: \" + form.getMiddenvelders().get(i).getAp()\n\t\t\t\t\t\t+ \" dp: \" + form.getMiddenvelders().get(i).getDp()\n\t\t\t\t\t\t+ \" st: \" + form.getMiddenvelders().get(i).getStamina());\n\t\t\t}\n\t\t}\n\t\tfor (int i \u003d 0; i \u003c form.getAanvallers().size(); i++) {\n\t\t\tButton d \u003d (Button) attx.getChildren().get(i);\n\t\t\tif (form.getAanvallers().get(i) \u003d\u003d null) {\n\t\t\t\td.setText(\"None\");\n\t\t\t} else {\n\t\t\t\td.setText(form.getAanvallers().get(i).getNaam() + \"\\n\" + \"ap: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getAp() + \" dp: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getDp() + \" st: \"\n\t\t\t\t\t\t+ form.getAanvallers().get(i).getStamina());\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Leeg de verdediging.\n\t */\n\t@FXML\n\tpublic void emptyDefense() {\n\t\tform.getVerdedigers().clear();\n\t\tdefenseArea.setText(\"No Defenders\");\n\t\tmyteam.getFormation().getVerdedigers().clear();\n\t}\n\n\t/**\n\t * Leeg het middenveld.\n\t */\n\t@FXML\n\tpublic void emptyMidfield() {\n\t\tform.getMiddenvelders().clear();\n\t\tmidArea.setText(\"No Midfielders\");\n\t\tmyteam.getFormation().getMiddenvelders().clear();\n\t\t;\n\n\t}\n\n\t/**\n\t * Leeg de aanval.\n\t */\n\t@FXML\n\tpublic void emptyOffense() {\n\t\tform.getAanvallers().clear();\n\t\toffenseArea.setText(\"No Attackers\");\n\t\tmyteam.getFormation().getAanvallers().clear();\n\n\t}\n\n\t/**\n\t * Terug naar Main Menu.\n\t * \n\t */\n\t@FXML\n\tprivate void menuButtonClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MainMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar gameMenu.\n\t * \n\t */\n\t@FXML\n\tprivate void GameMenuClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"GameMenu.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar Tactics.\n\t * \n\t */\n\t@FXML\n\tprivate void TacticsClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"Tactics.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MatchSchedule.\n\t * \n\t */\n\t@FXML\n\tprivate void ScheduleClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MatchSchedule.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar MarketPlace.\n\t * \n\t */\n\t@FXML\n\tprivate void MarketClicked() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"MarketPlace.fxml\", \"top\");\n\t}\n\n\t/**\n\t * Naar CompetitionRanking\n\t * \n\t */\n\t@FXML\n\tprivate void ShowCompetition() {\n\t\tGUI.clear();\n\t\tGUI.addPane(\"CompetitionRanking.fxml\", \"top\");\n\t}\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\FormationTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.*;\n\nimport java.io.File;\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\nimport java.util.Scanner;\n\nimport org.junit.Test;\n\nimport Brain.Formation;\nimport Brain.Keeper;\nimport Brain.SaveData;\nimport Brain.Speler;\n\n/**\n * JUnit Test for Formation class\n * \n * @author Sunwei\n *\n */\npublic class FormationTest {\n\n\t@Test\n\tpublic void testFormation() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tassertEquals(formation1, formation1);\n\t}\n\n\t@Test\n\tpublic void testFormation1() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertNotEquals(formation1, formation2);\n\t}\n\t\n\t@Test\n\tpublic void testGetVerdedigers() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.getVerdedigers(), formation2.getVerdedigers());\n\t}\n\n\t@Test\n\tpublic void testVoegVerdedigerToe() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.getVerdedigers(), formation2.getVerdedigers());\n\t}\n\t\n\t@Test\n\tpublic void testVerwijderVerdediger() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(A);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.voegVerdedigerToe(B);\n\t\tformation2.setKeeper(D);\n\t\tformation1.verwijderVerdediger(1);\n\t\tformation2.verwijderVerdediger(1);\n\t\tassertEquals(formation1.getVerdedigers(), formation2.getVerdedigers());\n\t}\n\n\t@Test\n\tpublic void testGetMiddenvelders() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.getMiddenvelders(), formation2.getMiddenvelders());\n\t}\n\n\t@Test\n\tpublic void testGetMiddenvelders1() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(C);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(A);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertNotEquals(formation1.getMiddenvelders(), formation2.getMiddenvelders());\n\t}\n\n\t@Test\n\tpublic void testVoegMiddenvelderToe() {\n\t\t\tString naam \u003d \"Fname Lname\";\n\t\t\tint id \u003d 123;\n\t\t\tint prijs \u003d 3000;\n\t\t\tint typek \u003d 1;\n\t\t\tint ble \u003d 1;\n\t\t\tString type \u003d \"keeper\";\n\t\t\tint kp \u003d 3;\n\t\t\tString team \u003d \"Ajax\";\n\t\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tFormation formation1 \u003d new Formation();\n\t\t\tFormation formation2 \u003d new Formation();\n\t\t\tformation1.voegAanvallerToe(A);\n\t\t\tformation1.voegMiddenvelderToe(B);\n\t\t\tformation1.voegVerdedigerToe(C);\n\t\t\tformation1.setKeeper(D);\n\t\t\tformation2.voegAanvallerToe(A);\n\t\t\tformation2.voegMiddenvelderToe(B);\n\t\t\tformation2.voegVerdedigerToe(C);\n\t\t\tformation2.setKeeper(D);\n\t\t\tassertEquals(formation1.getMiddenvelders(), formation2.getMiddenvelders());\n\t\t\n\t}\n\n\t@Test\n\tpublic void testVerwijderMiddenvelder() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(A);\n\t\tformation1.voegMiddenvelderToe(C);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(C);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tformation1.verwijderMiddenvelder(0);\n\t\tformation2.verwijderMiddenvelder(0);\n\t\tassertEquals(formation1.getMiddenvelders(), formation2.getMiddenvelders());\n\t}\n\n\t@Test\n\tpublic void testVoegAanvallerToe() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.getAanvallers(), formation2.getAanvallers());\n\t}\n\n\t@Test\n\tpublic void testVerwijderSpeler() {\n\t\t\tString naam \u003d \"Fname Lname\";\n\t\t\tint id \u003d 123;\n\t\t\tint prijs \u003d 3000;\n\t\t\tint typek \u003d 1;\n\t\t\tint ble \u003d 1;\n\t\t\tString type \u003d \"keeper\";\n\t\t\tint kp \u003d 3;\n\t\t\tString team \u003d \"Ajax\";\n\t\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tFormation formation1 \u003d new Formation();\n\t\t\tformation1.voegAanvallerToe(A);\n\t\t\tformation1.voegMiddenvelderToe(B);\n\t\t\tformation1.voegVerdedigerToe(C);\n\t\t\tformation1.setKeeper(D);\n\t\t\tformation1.verwijderSpeler(D);\n\t\t\tassertEquals(null,formation1.getKeeper());\t\n\t}\n\n\t@Test\n\tpublic void testVerwijderSpeler1() {\n\t\t\tString naam \u003d \"Fname Lname\";\n\t\t\tint id \u003d 123;\n\t\t\tint prijs \u003d 3000;\n\t\t\tint typek \u003d 1;\n\t\t\tint ble \u003d 1;\n\t\t\tString type \u003d \"keeper\";\n\t\t\tint kp \u003d 3;\n\t\t\tString team \u003d \"Ajax\";\n\t\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\t\tFormation formation1 \u003d new Formation();\n\t\t\tformation1.voegAanvallerToe(A);\n\t\t\tformation1.voegMiddenvelderToe(B);\n\t\t\tformation1.voegVerdedigerToe(C);\n\t\t\tformation1.setKeeper(D);\n\t\t\tformation1.verwijderSpeler(B);\n\t\t\tString expected \u003d \"Fname Lname, Bob\";\n\t\t\tassertEquals(expected,formation1.toString());\t\n\t}\n\t\n\n\t@Test\n\tpublic void testToString() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegAanvallerToe(null);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(null);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(null);\n\t\tformation1.setKeeper(D);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.toString(), formation2.toString());\n\t}\n\n\t@Test\n\tpublic void testSize() {\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegAanvallerToe(null);\n\t\tformation1.voegAanvallerToe(B);\n\t\tformation1.voegAanvallerToe(C);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(null);\n\t\tformation1.voegMiddenvelderToe(C);\n\t\tformation1.voegMiddenvelderToe(A);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(null);\n\t\tformation1.voegVerdedigerToe(A);\n\t\tformation1.voegVerdedigerToe(B);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegAanvallerToe(null);\n\t\tformation2.voegAanvallerToe(B);\n\t\tformation2.voegAanvallerToe(C);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(null);\n\t\tformation2.voegMiddenvelderToe(C);\n\t\tformation2.voegMiddenvelderToe(A);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.voegVerdedigerToe(null);\n\t\tformation2.voegVerdedigerToe(B);\n\t\tformation2.voegVerdedigerToe(A);\n\t\tassertEquals(formation1.size(),formation2.size());\n\t}\n\t\n\t@Test\n\tpublic void testSize1() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegAanvallerToe(B);\n\t\tformation1.voegAanvallerToe(C);\n\t\tformation1.voegAanvallerToe(null);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(null);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(A);\n\t\tformation1.voegVerdedigerToe(B);\n\t\tformation1.voegVerdedigerToe(null);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegAanvallerToe(B);\n\t\tformation2.voegAanvallerToe(C);\n\t\tformation2.voegAanvallerToe(null);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(null);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.voegVerdedigerToe(A);\n\t\tformation2.voegVerdedigerToe(B);\n\t\tformation2.voegVerdedigerToe(null);\n\t\tformation1.setKeeper(D);\n\t\tformation1.setKeeper(null);\n\t\tformation2.setKeeper(D);\n\t\tformation2.setKeeper(null);\n\t\tassertEquals(formation1.size(),formation2.size());\n\t}\n\t\n\n\t@Test\n\tpublic void testSize2() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tFormation formation2 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegAanvallerToe(B);\n\t\tformation1.voegAanvallerToe(C);\n\t\tformation1.voegAanvallerToe(null);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(null);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(A);\n\t\tformation1.voegVerdedigerToe(B);\n\t\tformation1.voegVerdedigerToe(null);\n\t\tformation2.voegAanvallerToe(A);\n\t\tformation2.voegAanvallerToe(B);\n\t\tformation2.voegAanvallerToe(C);\n\t\tformation2.voegAanvallerToe(null);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(B);\n\t\tformation2.voegMiddenvelderToe(null);\n\t\tformation2.voegVerdedigerToe(C);\n\t\tformation2.voegVerdedigerToe(A);\n\t\tformation2.voegVerdedigerToe(B);\n\t\tformation2.voegVerdedigerToe(null);\n\t\tformation1.setKeeper(D);\n\t\tformation2.setKeeper(D);\n\t\tassertEquals(formation1.size(),formation2.size());\n\t}\n\t\n\t@Test\n\tpublic void testContains() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(A);\n\t\tformation1.voegVerdedigerToe(B);\n\t\tformation1.setKeeper(D);\n\t\tassertTrue(formation1.contains(A));\n\t}\n\t\n\t@Test\n\tpublic void testContains1() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tassertTrue(formation1.contains(B));\n\t}\n\n/*\tpublic void testContains2() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler E \u003d new Speler(\"Carlos\", 4, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tassertFalse(formation1.contains(E));\n\t}*/\n\t\n\t@Test\n\tpublic void testContains3() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tassertTrue(formation1.contains(A));\n\t}\n\t\n\t@Test\n\tpublic void testWrite() {\n\t\tString naam \u003d \"Fname Lname\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.setKeeper(D);\n\t\tStringWriter output \u003d new StringWriter();\n\t\tformation1.write(new PrintWriter(output));\n\t\tString expected \u003d \"\";\n\t\tassertNotEquals(expected.toString(), output.toString());\n\t}\n\t\n\t@Test\n\tpublic void testWrite1() {\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tStringWriter output \u003d new StringWriter();\n\t\tformation1.write(new PrintWriter(output));\n\t\tString expected \u003d \"\";\n\t\tassertNotEquals(expected.toString(), output.toString());\n\t}\n\t\n\t@Test\n\tpublic void testWrite2() {\n\t\tSpeler A \u003d new Speler(\"Bob\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"John\", 2, 5500, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 6000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tFormation formation1 \u003d new Formation();\n\t\tformation1.voegAanvallerToe(A);\n\t\tformation1.voegAanvallerToe(null);\n\t\tformation1.voegMiddenvelderToe(B);\n\t\tformation1.voegMiddenvelderToe(null);\n\t\tformation1.voegVerdedigerToe(C);\n\t\tformation1.voegVerdedigerToe(null);\n\t\tStringWriter output \u003d new StringWriter();\n\t\tformation1.write(new PrintWriter(output));\n\t\tString expected \u003d \"\";\n\t\tassertNotEquals(expected.toString(), output.toString());\n\t}\n\n\n\t@Test\n\tpublic void testRead() throws FileNotFoundException {\n\t\tString s \u003d SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t.getLocation().getPath()\n\t\t\t\t+ \"SaveFiles/DoNotEdit.xml\";\n\t\tScanner sc \u003d new Scanner(new File(s));\n\t\tfor (int i \u003d 0; i\u003c6; i++){\n\t\t\tsc.next();\n\t\t}\n\t\tFormation form \u003d Formation.read(sc);\nassertEquals(form.toString(),\"Robert Zwinkels, Richelo Fecunda, Timothy Derijck, Vidarell Merencia, Mike van Duinen, Tyronne Ebuehi, Aaron Meijers, Michiel Kramer, Kevin Jansen, Xander Houtkoop, Robin Buwalda\");\t\n\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testRead1() throws FileNotFoundException {\n\t\tString s \u003d SaveData.class.getProtectionDomain().getCodeSource()\n\t\t\t\t.getLocation().getPath()\n\t\t\t\t+ \"SaveFiles/TestFormationRead.xml\";\n\t\tScanner sc \u003d new Scanner(new File(s));\n\t\tfor (int i \u003d 0; i\u003c6; i++){\n\t\t\tsc.next();\n\t\t}\n\t\tFormation form \u003d Formation.read(sc);\nassertEquals(form.toString(),\"Robert Zwinkels, Richelo Fecunda, Timothy Derijck, Vidarell Merencia, Tyronne Ebuehi, Michiel Kramer, Xander Houtkoop, Robin Buwalda\");\t\n\n\t\t\n\t}\n\t\n\t\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\GoalTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.*;\n\nimport java.io.FileNotFoundException;\n\nimport org.junit.Test;\n\nimport Brain.Goal;\nimport Brain.Keeper;\n\nimport Brain.SaveData;\nimport Brain.Team;\n\npublic class GoalTest {\n\n\n\t@Test\n\tpublic void testToString1() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\t\t\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\t\t\t\t\n\t\tKeeper Isha \u003d new Keeper(\"Isha\", 0, 9000, 0, 0, \"attacker\", 100, \"team\");\n\t\tGoal goal1 \u003d new Goal(Isha, 4, ishateam);\n\t\tSystem.out.println(goal1.toString());\n\t\tassertTrue(goal1.toString().equals(\"Isha scored in 4th minute\"));\n\t}\n\t\n\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\InjuryTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.assertTrue;\n\nimport org.junit.Test;\n\nimport Brain.Injury;\nimport Brain.Keeper;\n\n\npublic class InjuryTest {\n\t\n\t@Test\n\tpublic void testSetInjury() {\n\t\tKeeper D \u003d new Keeper(\"Isha\", 0, 9000, 0, 0, \"attacker\", 100, \"team\");\n\t\tInjury injury \u003d new Injury(D, 40, null);\n\t\tinjury.setInjury(\"is opgegeten door een krokodil\");\n\t\t\n\t\tassertTrue(\"Isha is opgegeten door een krokodil in 40th minute\".equals(injury.toString()));\n\t\t\n\t\t\n\t}\n\n\t@Test\n\tpublic void testGenerateInjury(){\n\t\tKeeper D \u003d new Keeper(\"Isha\", 0, 9000, 0, 0, \"attacker\", 100, \"team\");\n\t\tInjury injury \u003d new Injury(D, 40, null);\n\t\tString output0 \u003d injury.generateInjury(0);\n\t\tassertTrue(\"broke his leg\".equals(output0));\n\t\tString output1 \u003d injury.generateInjury(1);\n\t\tassertTrue(\"got a concussion\".equals(output1));\n\t\tString output2 \u003d injury.generateInjury(2);\n\t\tassertTrue(\"bit his tongue\".equals(output2));\n\t\tString output3 \u003d injury.generateInjury(3);\n\t\tassertTrue(\"got transported to the hospital\".equals(output3));\n\t\tString output4 \u003d injury.generateInjury(4);\n\t\tassertTrue(\"suffered a heartattack\".equals(output4));\n\t\tString output5 \u003d injury.generateInjury(5);\n\t\tassertTrue(\"\".equals(output5));\n\t\t\n\t\t\n\t\n\t}\n\n\n\t\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\KaartTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport Brain.Kaart;\nimport Brain.Keeper;\n\npublic class KaartTest {\n\t\n\tKeeper D \u003d new Keeper(\"Isha\", 0, 9000, 0, 0, \"attacker\", 100, \"team\");\n\t\n\t@Test\n\tpublic void testGetOvertreder() {\n\t\tKaart kaart \u003d new Kaart(D,1, 30, null);\n\t\tassertTrue(kaart.getOvertreder().equals(D));\n\t}\n\n\t@Test\n\tpublic void testSetOvertreder(){\n\t\tKaart kaart \u003d new Kaart(null,1, 30, null);\n\t\tkaart.setOvertreder(D);\n\t\tassertTrue(kaart.getOvertreder().equals(D));\n\t}\n\n\t@Test\n\tpublic void testToString1(){\n\t\tKaart kaart \u003d new Kaart(D,1,30, null);\n\t\tSystem.out.println(kaart.toString());\n\t\tassertTrue(kaart.toString().equals(\"Isha Yellow Card in 30th minute\"));\n\t}\n\t\n\t@Test\n\tpublic void testToString2(){\n\t\tKaart kaart \u003d new Kaart(D,0,30, null);\n\t\tSystem.out.println(kaart.toString());\n\t\tassertTrue(kaart.toString().equals(\"Isha Red Card in 30th minute\"));\n\t}\n\t\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\KeeperTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\nimport org.junit.Test;\n\nimport Brain.Keeper;\n\n/**\n * JUnit Test for Keeper class\n * \n * @author Sunwei\n *\n */\npublic class KeeperTest {\n\n\t@Test\n\tpublic void testKeeper() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper A \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tassertEquals(A, A);\n\t}\n\n\t@Test\n\tpublic void testGetKp() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tassertEquals(kp, D.getKp());\n\t}\n\n\t@Test\n\tpublic void testSetKp() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tD.setKp(5);\n\t\tassertEquals(5, D.getKp());\n\t}\n\n\t@Test\n\tpublic void testToString() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString name \u003d \"Boning Gong\\t\\tGeblesseerd\\t\\tGele Kaart\";\n\t\tassertEquals(name, D.toString());\n\t}\n\n\t@Test\n\tpublic void testToString1() {\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tString naam \u003d \"ThisIsJust AReallyLongName\";\n\t\tKeeper C \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString expected \u003d \"ThisIsJust AReallyLongName\\t\\tGeblesseerd\\t\\tGele Kaart\";\n\t\tassertEquals(expected, C.toString());\n\t}\n\n\t@Test\n\tpublic void testToString2() {\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\ttypek \u003d 2;\n\t\tString naam \u003d \"ThisIsJust AReallyLongName\";\n\t\tKeeper C \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString expected \u003d \"ThisIsJust AReallyLongName\\t\\tGeblesseerd\\t\\tRode Kaart\";\n\t\tassertEquals(expected, C.toString());\n\t}\n\t\n\t@Test\n\tpublic void testToString4() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString name \u003d \"Boning Gong\\t\\tGele Kaart\";\n\t\tassertEquals(name, D.toString());\n\t}\n\t\n\t@Test\n\tpublic void testToString5() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 2;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString name \u003d \"Boning Gong\\t\\tRode Kaart\";\n\t\tassertEquals(name, D.toString());\n\t}\n\t\n\t@Test\n\tpublic void testToString6() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 3;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tString name \u003d \"Boning Gong\";\n\t\tassertEquals(name, D.toString());\n\t}\n\n\t@Test\n\tpublic void testisGeblesseerd() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tassertEquals(1, D.isGeblesseerd());\n\t\tKeeper e \u003d new Keeper(naam, id, prijs, typek, 0, type, kp, team);\n\n\t\tassertEquals(0,e.isGeblesseerd());\n\t}\n\n\t@Test\n\tpublic void testgetTypekaart() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(naam, id, prijs, typek, ble, type, kp, team);\n\t\tassertEquals(1, D.getTypekaart());\n\t\tKeeper e \u003d new Keeper(naam, id, prijs, 2, 1, type, kp, team);\n\t\tassertEquals(2,e.getTypekaart());\n\t}\n\t\n\t@Test\n\tpublic void testEquals(){\n\t\tString naam \u003d \"Okay Test\";\n\t\tint id1 \u003d 123;\n\t\tint id2 \u003d 1234;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper E \u003d new Keeper(naam, id1, prijs, typek, ble, type, kp, team);\n\t\tKeeper D \u003d new Keeper(naam, id2, prijs, typek, ble, type, kp, team);\n//\t\tString testString \u003d \"Okay Test\";\n\t\tassertNotEquals(E, D);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testEquals1(){\n\t\tString naam \u003d \"Okay Test\";\n\t\tint id1 \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"attacker\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper E \u003d new Keeper(naam, id1, prijs, typek, ble, type, kp, team);\n\n\t\tString testString \u003d \"Okay Test\";\n\t\tassertNotEquals(E, testString);\n\t\t\n\t}\n\n\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\MatchTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertTrue;\n\nimport java.io.FileNotFoundException;\nimport java.util.ArrayList;\n\nimport org.junit.Test;\n\nimport Brain.Match;\nimport Brain.SaveData;\nimport Brain.Speler;\nimport Brain.Team;\n\npublic class MatchTest {\n\n\t@Test\n\tpublic void testGenerateMatch() {\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testGenerateInjuries() {\n\t\tTeam team1 \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam team2 \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tteam1.setDefaultFormation(0);\n\t\tteam1.setDefaultFormation(0);\n\t\tMatch newMatch \u003d new Match(team1,team2);\n\t\tnewMatch.generateInjuries(180);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testGenerateInjuries1() {\n\t\tTeam team1 \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam team2 \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tteam1.setDefaultFormation(0);\n\t\tteam1.getFormation().setKeeper(null);\n\t\tteam1.setDefaultFormation(0);\n\t\tteam2.getFormation().setKeeper(null);\n\t\tMatch newMatch \u003d new Match(team1,team2);\n\t\tnewMatch.generateInjuries(180);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testGenerateCards() {\n\t\tTeam team1 \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam team2 \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tteam1.setDefaultFormation(0);\n\t\tteam1.getFormation().setKeeper(null);\n\t\tteam1.getFormation().voegAanvallerToe(null);\n\t\tteam1.getFormation().voegMiddenvelderToe(null);\n\t\tteam1.getFormation().voegVerdedigerToe(null);\n\t\tteam2.setDefaultFormation(0);\n\n\t\tMatch newMatch \u003d new Match(team1,team2);\n\t\tnewMatch.generateInjuries(1000);\n\t\tnewMatch.generateCards(1000);\n\t\t\n\t}\n\t\n\t@Test\n\tpublic void testApRating() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\n\t\tassertTrue(match.apRating(ishateam.getFormation()) \u003c\u003d 413);\n\t}\n\t\n\t@Test\n\tpublic void testApRating2() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tishateam.getFormation().setVerdedigers(null);\n\t\tArrayList\u003cSpeler\u003e verdedigers \u003d new ArrayList\u003cSpeler\u003e();\n\t\tishateam.getFormation().setVerdedigers(verdedigers);\n\t\tassertTrue(match.apRating(ishateam.getFormation()) \u003c\u003d 413);\n\t}\n\n\t@Test\n\tpublic void testDpRating() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tassertTrue(262 \u003e\u003d match.dpRating(ishateam.getFormation()));\n\t}\n\n\t@Test\n\tpublic void testStaminaRating() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tassertTrue(match.staminaRating(ishateam.getFormation()) \u003c\u003d 467);\n\t}\n\n\t@Test\n\tpublic void testGetThuisTeam() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tassertEquals(\n\t\t\t\tmatch.getThuisTeam().toString(),\n\t\t\t\t(\"Ajax\t65\\nJasper Cillessen\\nDavy Klaassen\\nLasse Schone\\nNiklas Moisander\\nDavy Klaassen\\nViktor Fischer\\nJoel Veltman\\nThulani Serero\\nRicardo van Rhijn\\nNiki Zimling\\nKolbeinn Sigthorsson\\nLerin Duarte\\nNicolai Boilesen\\nRicardo van Rhijn\\nRicardo Kishna\\nStefano Denswil\\nMike van der Hoorn\\nAnwar El Ghazi\\nNick Viergever\\nLucas Andersen\\nDiederik Boer\\nArkadiusz Milik\\nRichairo Zivkovic\\nRuben Ligeon\\nTobias Sana\"));\n\n\t}\n\n\t@Test\n\tpublic void testGetUitTeam() throws FileNotFoundException {\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tassertEquals(\n\t\t\t\tmatch.getUitTeam().toString(),\n\t\t\t\t(\"AZ\t62\\nAron Johannsson\\nNemanja Gudelj\\nEsteban Alvarado\\nCelso Ortiz\\nSteven Berghuis\\nJeffrey Gouweleeuw\\nViktor Elm\\nMarkus Henriksen\\nGuus Hupperts\\nJan Wuytens\\nSimon Poulsen\\nMattias Johansson\\nYves De Winter\\nMikhail Rosheuvel\\nThom Haye\\nMuamer Tankovic\\nSergio Rochet\\nRidgeciano Haps\\nWesley Hoedt\\nDjavan Anderson\\nEli Babalj\\nDerrick Luckassen\"));\n\t}\n\n\t@Test\n\tpublic void testGetEarned1() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 2;\n\t\tSaveData.setDifficulty(dif);\n\n\t\tmatch.setThuisScore(3);\n\t\tmatch.setUitScore(2);\n\n\t\tassertEquals(match.getEarned(), 390);\n\t}\n\n\t@Test\n\tpublic void testGetEarned2() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 1;\n\t\tSaveData.setDifficulty(dif);\n\n\t\tmatch.setThuisScore(2);\n\t\tmatch.setUitScore(3);\n\n\t\tassertEquals(match.getEarned(), 40);\n\t}\n\n\t@Test\n\tpublic void testGetEarned3() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 3;\n\t\tSaveData.setDifficulty(dif);\n\n\t\tmatch.setThuisScore(100);\n\t\tmatch.setUitScore(2);\n\n\t\tassertEquals(match.getEarned(), 0);\n\t}\n\n\t@Test\n\tpublic void testGetEarned4() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 0;\n\t\tSaveData.setDifficulty(dif);\n\t\tSaveData.setMatchCounter(20);\n\t\tmatch.setThuisScore(100);\n\t\tmatch.setUitScore(100);\n\t\n\t\tassertEquals(match.getEarned(), 1030);\n\t}\n\t\n\t@Test\n\tpublic void testGetEarned5() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 0;\n\t\tSaveData.setDifficulty(dif);\n\t\tSaveData.setMatchCounter(20);\n\t\tmatch.setThuisScore(1);\n\t\tmatch.setUitScore(100);\n\t\tassertEquals(match.getEarned(), 1100);\n\t}\n\n\t@Test\n\tpublic void testGetEarned6() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 0;\n\t\tSaveData.setDifficulty(dif);\n\t\tSaveData.setMatchCounter(2);\n\t\tmatch.setThuisScore(100);\n\t\tmatch.setUitScore(100);\n\t\t\n\t\tassertEquals(match.getEarned(), 1030);\n\t}\n\t\n\t@Test\n\tpublic void testGetEarned7() throws FileNotFoundException {\n\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\n\t\tishateam.setDefaultFormation(0);\n\t\tloserteam.setDefaultFormation(0);\n\n\t\tMatch match \u003d new Match(ishateam, loserteam);\n\t\tint dif \u003d 0;\n\t\tSaveData.setDifficulty(dif);\n\t\tSaveData.setMatchCounter(20);\n\t\tmatch.setThuisScore(100);\n\t\tmatch.setUitScore(1);\n\t\tSystem.out.println(match.getEarned());\n\t\tassertEquals(match.getEarned(), 10);\n\t}\n\t\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\SpelerTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\nimport org.junit.Test;\n\nimport Brain.Man;\nimport Brain.Speler;\n\n/**\n * JUnit Test for Keeper class\n * \n * @author Sunwei\n *\n */\npublic class SpelerTest {\n\n\tString naam \u003d \"Boning Gong\";\n\tint id \u003d 123;\n\tint prijs \u003d 3000;\n\tint typek \u003d 1;\n\tint ble \u003d 3;\n\tString type \u003d \"CM\";\n\tint ap \u003d 3;\n\tint dp \u003d 3;\n\tint stamina \u003d 3;\n\tString team \u003d \"Ajax\";\n\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp, stamina,\n\t\t\tteam);\n\tSpeler E \u003d new Speler(naam, id, prijs, typek, 0, type, ap, dp, stamina,\n\t\t\tteam);\n\t\n\tString name \u003d \"Boning Gong\\t\\t\\tRating: 3\";\n\n\t@Test\n\tpublic void testSpeler() {\n\t\tSpeler A \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tassertEquals(A, A);\n\t}\n\n\t@Test\n\tpublic void testSpeler1() {\n\t\tble \u003d 0;\n\t\tSpeler A \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tassertEquals(A, A);\n\t}\n\n\t@Test\n\tpublic void testSpeler3() {\n\t\tSpeler A \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tassertEquals(D, A);\n\t}\n\n\t@Test\n\tpublic void testGetAp() {\n\t\tassertEquals(ap, D.getAp());\n\t}\n\n\t@Test\n\tpublic void testSetAp() {\n\t\tD.setAp(5);\n\t\tassertEquals(5, D.getAp());\n\t}\n\n\t@Test\n\tpublic void testGetDp() {\n\t\tassertEquals(dp, D.getDp());\n\t}\n\n\t@Test\n\tpublic void testSetDp() {\n\t\tD.setDp(6);\n\t\tassertEquals(6, D.getDp());\n\t}\n\n\t@Test\n\tpublic void testGetStamina() {\n\t\tassertEquals(stamina, D.getStamina());\n\t}\n\n\t@Test\n\tpublic void testSetStamina() {\n\t\tD.setStamina(1);\n\t\tassertEquals(1, D.getStamina());\n\t}\n\n\t@Test\n\tpublic void testGetRating() {\n\t\tassertEquals(3, D.getRating());\n\t}\n\n\t@Test\n\tpublic void testGetNaam() {\n\t\tassertEquals(naam, D.getNaam());\n\t}\n\n\t@Test\n\tpublic void testSetNaam() {\n\t\tD.setNaam(\"Adam\");\n\t\tassertEquals(\"Adam\", D.getNaam());\n\t}\n\n\t// In class Man, attribute Geblesseerd can be set to any attributes,but the\n\t// method isGeblesseerd always return 1 or 0\n\t@Test\n\tpublic void testIsGeblesseerd() {\n\t\t\tble \u003d 1;\n\t\tassertEquals(ble, D.isGeblesseerd());\n\t\t\n\t\n\t}\n\t\n\t@Test\n\tpublic void testIsNietGeblesseerd(){\n\t\tassertEquals(0, E.isGeblesseerd());\n\t\t\t\n\t}\n\n\t// This is what happens, it always return 1, no matter what the initial\n\t// value is, do we just limit the value to 0 or 1, or do we want to have a\n\t// scale of how bad the injury is?\n\t@Test\n\tpublic void testIsGeblesseerd1() {\n\t\tble \u003d 1;\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tassertEquals(ble, D.isGeblesseerd());\n\t}\n\n\t// the setGelesseerd and isGelesseerd can be a bit weird to test\n\t@Test\n\tpublic void testSetGeblesseerd() {\n\t\tD.setGeblesseerd(false);\n\t\tble \u003d D.isGeblesseerd();\n\t\tassertEquals(ble, D.isGeblesseerd());\n\t}\n\n\t@Test\n\tpublic void testSetGeblesseerd1() {\n\t\tD.setGeblesseerd(false);\n\t\tassertEquals(0, D.isGeblesseerd());\n\t}\n\n\t@Test\n\tpublic void testSetGeblesseerd2() {\n\t\tD.setGeblesseerd(true);\n\t\tassertEquals(1, D.isGeblesseerd());\n\t}\n\n\t@Test\n\tpublic void testGetType() {\n\t\tassertEquals(type, D.getType());\n\t}\n\n\t@Test\n\tpublic void testSetType() {\n\t\ttype \u003d \"defender\";\n\t\tD.setType(type);\n\t\tassertEquals(type, D.getType());\n\t}\n\n\t@Test\n\tpublic void testGetId() {\n\t\tassertEquals(id, D.getId());\n\t}\n\n\t@Test\n\tpublic void testSetId() {\n\t\tid \u003d 976;\n\t\tD.setId(id);\n\t\tassertEquals(id, D.getId());\n\t}\n\n\t@Test\n\tpublic void testGetPrijs() {\n\t\tassertEquals(prijs, D.getPrijs());\n\t}\n\n\t@Test\n\tpublic void testSetPrijs() {\n\t\tprijs \u003d 5000;\n\t\tD.setPrijs(prijs);\n\t\tassertEquals(prijs, D.getPrijs());\n\t}\n\n\t@Test\n\tpublic void testGetTeam() {\n\t\tassertEquals(team, D.getTeam());\n\t}\n\n\t@Test\n\tpublic void testSetTeam() {\n\t\tteam \u003d \"Spartan\";\n\t\tD.setTeam(team);\n\t\tassertEquals(team, D.getTeam());\n\t}\n\n\t@Test\n\tpublic void testGetTypekaart() {\n\t\tassertEquals(typek, D.getTypekaart());\n\t}\n\n\t@Test\n\tpublic void testSetTypekaart() {\n\t\ttypek \u003d 0;\n\t\tD.setTypekaart(typek);\n\t\tassertEquals(typek, D.getTypekaart());\n\t}\n\n\t@Test\n\tpublic void testToString1() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 3;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp, stamina,\n\t\t\t\tteam);\n\t\tString expected \u003d \"Boning Gong\\t\\tGeblesseerd\\t\\tGele Kaart\";\n\t\tassertEquals(expected, D.toString());\n\t}\n\n\t@Test\n\tpublic void testToString2() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 2;\n\t\tint ble \u003d 3;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tnaam \u003d \"ThisnameisLongerthan15\";\n\t\tD.setNaam(naam);\n\t\tString expected \u003d \"ThisnameisLongerthan15\\t\\tGeblesseerd\\t\\tRode Kaart\";\n\t\tassertEquals(expected, D.toString());\n\t}\n\n\t@Test\n\tpublic void testToString3() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 0;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tnaam \u003d \"ThisnameisLongerthan15\";\n\t\tD.setNaam(naam);\n\t\tString expected \u003d \"ThisnameisLongerthan15\\t\\tGeblesseerd\";\n\t\tassertEquals(expected, D.toString());\n\t}\n\t\n\t@Test\n\tpublic void testToString4() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 0;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tnaam \u003d \"ThisnameisLongerthan15\";\n\t\tD.setNaam(naam);\n\t\tString expected \u003d \"ThisnameisLongerthan15\";\n\t\tassertEquals(expected, D.toString());\n\t}\n\t\n\t@Test\n\tpublic void testToString5() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tnaam \u003d \"ThisnameisLongerthan15\";\n\t\tD.setNaam(naam);\n\t\tString expected \u003d \"ThisnameisLongerthan15\\t\\tGeblesseerd\\t\\tGele Kaart\";\n\t\tassertEquals(expected, D.toString());\n\t}\n\t\n\t\n\t@Test\n\tpublic void testEquals() {\n\t\tMan test1 \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tassertEquals(test1, D);\n\t}\n\n//This drops 5% coverage in Brain, and suppose to be assertEquals\n\t@Test\n\tpublic void testWrite() {\n\t\tString naam \u003d \"Boning Gong\";\n\t\tint id \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 3;\n\t\tint ble \u003d 3;\n\t\tString type \u003d \"CM\";\n\t\tint ap \u003d 3;\n\t\tint dp \u003d 3;\n\t\tint stamina \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tStringWriter output \u003d new StringWriter();\n\t\tSpeler D \u003d new Speler(naam, id, prijs, typek, ble, type, ap, dp,\n\t\t\t\tstamina, team);\n\t\tD.write(new PrintWriter(output));\n\t\tString expected \u003d \"  \u003cSpeler\u003e\\n  \u003cID\u003e123\u003c/ID\u003e\\n   \u003cNaam\u003eBoning Gong\u003c/Naam\u003e\\n   \u003cType\u003eCM\u003c/Type\u003e\\n   \u003cAP\u003e3\u003c/AP\u003e\\n   \u003cDP\u003e3\u003c/DP\u003e\\n   \u003cStamina\u003e3\u003c/Stamina\u003e\\n   \u003cKaart\u003e3\u003c/Kaart\u003e\\n   \u003cGeblesseerd\u003e1\u003c/Geblesseerd\u003e\\n   \u003cPrijs\u003e3000\u003c/Prijs\u003e\\n   \u003cTeam\u003eAjax\u003c/Team\u003e\\n  \u003c/Speler\u003e\\n\";\n\t\tassertNotEquals(expected.toString(), output.toString());\n\t}\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\TeamLijstTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.*;\n\nimport java.io.FileNotFoundException;\nimport java.io.PrintWriter;\nimport java.io.StringWriter;\n\nimport org.junit.Test;\n\nimport Brain.SaveData;\n\nimport Brain.Team;\nimport Brain.TeamLijst;\n\npublic class TeamLijstTest {\n\n\t\n\t@Test\n\tpublic void testVoegToe() throws FileNotFoundException {\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\n\t\tlijst.voegToe(ishateam);\n\t\t\n\t\tassertTrue(lijst.toString().equals(\"Ajax\\t\\tRating: 65\\n\"));\n\t}\n\n\t@Test\n\tpublic void testVoegToe2() throws FileNotFoundException {\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\n\t\tlijst.voegToe(ishateam);\n\t\tlijst.voegToe(ishateam);\n\t\n\t\tassertTrue(lijst.toString().equals(\"Ajax\\t\\tRating: 65\\n\"));\n\t}\n\t\n\n\t@Test\n\tpublic void testGetSmallestTeam() throws FileNotFoundException {\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\n\t\tlijst.voegToe(ishateam);\n\n\t\t\n\t\tassertTrue(lijst.getSmallestTeam().equals(ishateam));\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\t\tlijst.voegToe(loserteam);\n\t\n\t\tassertTrue(lijst.getSmallestTeam().equals(loserteam));\n\t}\n\n\t@Test\n\tpublic void testGetSmallestTeam2() throws FileNotFoundException {\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tTeam loserteam \u003d SaveData.getOpponents().getTeamlijst().get(2);\n\t\tlijst.voegToe(loserteam);\n\t\tlijst.voegToe(ishateam);\n\t\n\t\t\n\t\n\t\tassertTrue(lijst.getSmallestTeam().equals(loserteam));\n\t}\n\n\n\n\n\t@Test\n\tpublic void testWrite() throws FileNotFoundException {\n\t\tStringWriter output \u003d new StringWriter();\n\t\tPrintWriter writer \u003d new PrintWriter(output);\n\t\tTeamLijst lijst \u003d new TeamLijst();\n\t\tSaveData.readPlayerdb();\n\t\tTeam ishateam \u003d SaveData.getOpponents().getTeamlijst().get(1);\n\t\tlijst.voegToe(ishateam);\n\t\tlijst.write(writer);\n\t\tassertTrue(\" \u003cAantalTeams\u003e1\u003c/AantalTeams\u003e\".equals(output.toString().substring(0, 29)));\n\t}\n\n\n}\n\""
  },
  {
    "path": "C:\\users\\clint\\Downloads\\src\\junitTests\\TeamTest.java",
    "code": "\"package junitTests;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertNotEquals;\n\nimport org.junit.Test;\n\nimport Brain.Formation;\nimport Brain.Keeper;\nimport Brain.Speler;\nimport Brain.Team;\n\n/**\n * JUnit Test for Team class\n * \n * @author Sunwei\n *\n */\npublic class TeamTest {\n\n\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\tSpeler D \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\tSpeler C \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\tSpeler E \u003d new Speler(\"Jane\", 7, 5000, 1, 1, \"CM\", 0, 0, 0, \"PSV\");\n\tString naam \u003d \"TeamName\";\n\tint wins \u003d 23;\n\tint loss \u003d 12;\n\tint draw \u003d 3;\n\tint id \u003d 54;\n\tint goalsvoor \u003d 45;\n\tint goalstegen \u003d 31;\n\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\n\t@Test\n\tpublic void testTeam() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tDefault.voegToe(A);\n\t\tTest.voegToe(A);\n\t\tassertEquals(Default.toString(), Test.toString());\n\t}\n\n\t@Test\n\tpublic void testTeam1() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 23;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tDefault.voegToe(A);\n\t\tTest.voegToe(A);\n\t\tassertEquals(Default.toString(), Test.toString());\n\t}\n\n\t@Test\n\tpublic void testTeam2() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tassertNotEquals(Default, Test);\n\t}\n\n\t@Test\n\tpublic void testVoegToe() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tDefault.voegToe(A);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tTest.voegToe(A);\n\t\tassertEquals(Default.getTeam(), Test.getTeam());\n\t}\n\n\t@Test\n\tpublic void testVoegToe1() {\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler D \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(D);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tTest.voegToe(A);\n\t\tTest.voegToe(D);\n\t\tassertEquals(Default.getTeam(), Test.getTeam());\n\t}\n\n\t// this is really weird\n/*\t@Test\n\tpublic void testVoegToe2() {\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler D \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tSpeler B \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler E \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler F \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler G \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler H \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler I \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler J \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler K \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler L \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(B);\n\t\tDefault.voegToe(C);\n\t\tDefault.voegToe(D);\n\t\tDefault.voegToe(E);\n\t\tDefault.voegToe(F);\n\t\tDefault.voegToe(G);\n\t\tDefault.voegToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tTest.voegToe(A);\n\t\tTest.voegToe(B);\n\t\tTest.voegToe(C);\n\t\tTest.voegToe(D);\n\t\tTest.voegToe(E);\n\t\tTest.voegToe(F);\n\t\tTest.voegToe(G);\n\t\tTest.voegToe(H);\n\t\tTest.voegToe(I);\n\t\tTest.voegToe(J);\n\t\tTest.voegToe(K);\n\t\tTest.voegToe(L);\n\t\tassertEquals(Default.getFormation(), Test.getFormation());\n\t}*/\n\n\t@Test\n\tpublic void testVoegToe3() {\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler D \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(D);\n\t\tTeam Test \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen, id);\n\t\tTest.voegToe(A);\n\t\tTest.voegToe(D);\n\t\tTest.voegToe(D);\n\t\tassertEquals(Default.getTeam(), Test.getTeam());\n\t}\n\t\n\t@Test\n\tpublic void setFormationCondition0() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tFormation testF \u003d new Formation();\n\t\tDefault.setFormation(testF);\n\t}\n\t\n\t@Test\n\tpublic void setFormationCondition1() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tFormation testF \u003d new Formation();\n\t\tKeeper loop0 \u003d new Keeper(\"Jane\", 6, 5000, 2, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop2 \u003d new Keeper(\"Jane\", 6, 5000, 2, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop3 \u003d new Keeper(\"Jane\", 6, 5000, 0, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop4 \u003d new Keeper(\"Jane\", 6, 5000, 0, 2, \"keeper\", 0,\"PSV\");\n\t\n\t\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 0, 0, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 2, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop1 \u003d new Speler(\"Jane\", 6, 5000, 2, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop5 \u003d new Speler(\"Jane\", 6, 5000, 2, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop6 \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop7 \u003d new Speler(\"Jane\", 6, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 3, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler E \u003d new Speler(\"Jane\", 4, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler H \u003d new Speler(\"Jane\", 7, 5000, 0,0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler I \u003d new Speler(\"Jane\", 8, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler J \u003d new Speler(\"Jane\", 9, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler K \u003d new Speler(\"Jane\", 10, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler L \u003d new Speler(\"Jane\", 11, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler M \u003d new Speler(\"Jane\", 12, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler N \u003d new Speler(\"Jane\", 13, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler O \u003d new Speler(\"Jane\", 14, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\ttestF.voegAanvallerToe(A);\n\t\ttestF.voegAanvallerToe(B);\n\t\ttestF.voegMiddenvelderToe(C);\n\t\ttestF.voegMiddenvelderToe(E);\n\t\ttestF.voegVerdedigerToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tDefault.voegToe(M);\n\t\tDefault.voegToe(N);\n\t\tDefault.voegToe(O);\n\t\ttestF.setKeeper(loop0);\n\t\tDefault.voegToe(loop2);\n\t\tDefault.voegToe(loop3);\n\t\tDefault.voegToe(loop4);\n\t\tDefault.voegToe(loop1);\n\t\tDefault.voegToe(loop5);\n\t\tDefault.voegToe(loop6);\n\t\tDefault.voegToe(loop7);\n\t\tDefault.setFormation(testF);\n\t}\n\n\t@Test\n\tpublic void setFormationCondition2() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tFormation testF \u003d new Formation();\n\t\tKeeper loop0 \u003d new Keeper(\"Jane\", 6, 5000, 2, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop2 \u003d new Keeper(\"Jane\", 6, 5000, 2, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop3 \u003d new Keeper(\"Jane\", 6, 5000, 0, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop4 \u003d new Keeper(\"Jane\", 6, 5000, 0, 2, \"keeper\", 0,\"PSV\");\n\t\n\t\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 0, 0, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 2, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop1 \u003d new Speler(\"Jane\", 6, 5000, 2, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop5 \u003d new Speler(\"Jane\", 6, 5000, 2, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop6 \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop7 \u003d new Speler(\"Jane\", 6, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 3, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler E \u003d new Speler(\"Jane\", 4, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler H \u003d new Speler(\"Jane\", 7, 5000, 0,0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler I \u003d new Speler(\"Jane\", 8, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler J \u003d new Speler(\"Jane\", 9, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler K \u003d new Speler(\"Jane\", 10, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler L \u003d new Speler(\"Jane\", 11, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler M \u003d new Speler(\"Jane\", 12, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler N \u003d new Speler(\"Jane\", 13, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler O \u003d new Speler(\"Jane\", 14, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\ttestF.voegAanvallerToe(A);\n\t\ttestF.voegAanvallerToe(null);\n\t\ttestF.voegAanvallerToe(B);\n\t\ttestF.voegMiddenvelderToe(C);\n\t\ttestF.voegMiddenvelderToe(E);\n\t\ttestF.voegMiddenvelderToe(null);\n\t\ttestF.voegVerdedigerToe(null);\n\t\ttestF.voegVerdedigerToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tDefault.voegToe(M);\n\t\tDefault.voegToe(N);\n\t\tDefault.voegToe(O);\n\t\ttestF.setKeeper(loop0);\n\t\tDefault.voegToe(loop2);\n\t\tDefault.voegToe(loop3);\n\t\tDefault.voegToe(loop4);\n\t\tDefault.voegToe(loop1);\n\t\tDefault.voegToe(loop5);\n\t\tDefault.voegToe(loop6);\n\t\tDefault.voegToe(loop7);\n\t\tDefault.setFormation(testF);\n\t}\n\n\t@Test\n\tpublic void setFormationCondition3() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tFormation testF \u003d new Formation();\n\t\tKeeper loop2 \u003d new Keeper(\"Jane\", 6, 5000, 2, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop3 \u003d new Keeper(\"Jane\", 6, 5000, 0, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop4 \u003d new Keeper(\"Jane\", 6, 5000, 0, 2, \"keeper\", 0,\"PSV\");\n\t\n\t\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 0, 0, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 2, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop1 \u003d new Speler(\"Jane\", 6, 5000, 2, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop5 \u003d new Speler(\"Jane\", 6, 5000, 2, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop6 \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop7 \u003d new Speler(\"Jane\", 6, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 3, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler E \u003d new Speler(\"Jane\", 4, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler H \u003d new Speler(\"Jane\", 7, 5000, 0,0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler I \u003d new Speler(\"Jane\", 8, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler J \u003d new Speler(\"Jane\", 9, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler K \u003d new Speler(\"Jane\", 10, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler L \u003d new Speler(\"Jane\", 11, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler M \u003d new Speler(\"Jane\", 12, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler N \u003d new Speler(\"Jane\", 13, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler O \u003d new Speler(\"Jane\", 14, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\ttestF.voegAanvallerToe(A);\n\t\ttestF.voegAanvallerToe(null);\n\t\ttestF.voegAanvallerToe(B);\n\t\ttestF.voegMiddenvelderToe(C);\n\t\ttestF.voegMiddenvelderToe(E);\n\t\ttestF.voegMiddenvelderToe(null);\n\t\ttestF.voegVerdedigerToe(null);\n\t\ttestF.voegVerdedigerToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tDefault.voegToe(M);\n\t\tDefault.voegToe(N);\n\t\tDefault.voegToe(O);\n\t\ttestF.setKeeper(null);\n\t\tDefault.voegToe(loop2);\n\t\tDefault.voegToe(loop3);\n\t\tDefault.voegToe(loop4);\n\t\tDefault.voegToe(loop1);\n\t\tDefault.voegToe(loop5);\n\t\tDefault.voegToe(loop6);\n\t\tDefault.voegToe(loop7);\n\t\tDefault.setFormation(testF);\n\t}\n\t\n\t// need to discuss this one\n\t@Test\n\tpublic void setDefaultFormationCondition0() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tDefault.setDefaultFormation(0);\n\t\tDefault.setEasyFormation();\n\t\t// assertEquals(Default.setDefaultFormation(0),Default.setEasyFormation());\n\t}\n\t\n\t@Test\n\tpublic void setDefaultFormationCondition01() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tFormation testF \u003d new Formation();\n\t\tKeeper loop2 \u003d new Keeper(\"Jane\", 6, 5000, 2, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop3 \u003d new Keeper(\"Jane\", 6, 5000, 0, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop4 \u003d new Keeper(\"Jane\", 6, 5000, 0, 2, \"keeper\", 0,\"PSV\");\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 0, 0, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 2, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop1 \u003d new Speler(\"Jane\", 6, 5000, 2, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop5 \u003d new Speler(\"Jane\", 6, 5000, 2, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop6 \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop7 \u003d new Speler(\"Jane\", 6, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 3, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler E \u003d new Speler(\"Jane\", 4, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler H \u003d new Speler(\"Jane\", 7, 5000, 0,0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler I \u003d new Speler(\"Jane\", 8, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler J \u003d new Speler(\"Jane\", 9, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler K \u003d new Speler(\"Jane\", 10, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler L \u003d new Speler(\"Jane\", 11, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler M \u003d new Speler(\"Jane\", 12, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler N \u003d new Speler(\"Jane\", 13, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler O \u003d new Speler(\"Jane\", 14, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\ttestF.voegAanvallerToe(A);\n\t\ttestF.voegAanvallerToe(null);\n\t\ttestF.voegAanvallerToe(B);\n\t\ttestF.voegMiddenvelderToe(C);\n\t\ttestF.voegMiddenvelderToe(E);\n\t\ttestF.voegMiddenvelderToe(null);\n\t\ttestF.voegVerdedigerToe(null);\n\t\ttestF.voegVerdedigerToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tDefault.voegToe(M);\n\t\tDefault.voegToe(N);\n\t\tDefault.voegToe(O);\n\t\ttestF.setKeeper(loop3);\n\t\tDefault.voegToe(loop2);\n\t\tDefault.voegToe(loop3);\n\t\tDefault.voegToe(loop4);\n\t\tDefault.voegToe(loop1);\n\t\tDefault.voegToe(loop5);\n\t\tDefault.voegToe(loop6);\n\t\tDefault.voegToe(loop7);\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tDefault.setDefaultFormation(0);\n\t\tDefault.setEasyFormation();\n\t}\n\t\n\t@Test\n\tpublic void setDefaultFormationCondition1() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tString name \u003d \"Fname Lname\";\n\t\tint id1 \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper loop0 \u003d new Keeper(\"Jane\", 6, 5000, 2, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop2 \u003d new Keeper(\"Jane\", 6, 5000, 2, 0, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop3 \u003d new Keeper(\"Jane\", 6, 5000, 0, 1, \"keeper\", 0,\"PSV\");\n\t\tKeeper loop4 \u003d new Keeper(\"Jane\", 6, 5000, 0, 2, \"keeper\", 0,\"PSV\");\n\t\t\n\t\tKeeper D \u003d new Keeper(name, id1, prijs, typek, ble, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 0, 0, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 2, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop1 \u003d new Speler(\"Jane\", 6, 5000, 2, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop5 \u003d new Speler(\"Jane\", 6, 5000, 2, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop6 \u003d new Speler(\"Jane\", 6, 5000, 0, 1, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler loop7 \u003d new Speler(\"Jane\", 6, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 3, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler E \u003d new Speler(\"Jane\", 4, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler F \u003d new Speler(\"Jane\", 5, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler G \u003d new Speler(\"Jane\", 6, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler H \u003d new Speler(\"Jane\", 7, 5000, 0,0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler I \u003d new Speler(\"Jane\", 8, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler J \u003d new Speler(\"Jane\", 9, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler K \u003d new Speler(\"Jane\", 10, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler L \u003d new Speler(\"Jane\", 11, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler M \u003d new Speler(\"Jane\", 12, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler N \u003d new Speler(\"Jane\", 13, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler O \u003d new Speler(\"Jane\", 14, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(B);\n\t\tDefault.voegToe(D);\n\t\tDefault.voegToe(C);\n\t\tDefault.voegToe(E);\n\t\tDefault.voegToe(F);\n\t\tDefault.voegToe(G);\n\t\tDefault.voegToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tDefault.voegToe(M);\n\t\tDefault.voegToe(N);\n\t\tDefault.voegToe(O);\n\t\tDefault.voegToe(loop0);\n\t\tDefault.voegToe(loop2);\n\t\tDefault.voegToe(loop3);\n\t\tDefault.voegToe(loop4);\n\t\tDefault.voegToe(loop1);\n\t\tDefault.voegToe(loop5);\n\t\tDefault.voegToe(loop6);\n\t\tDefault.voegToe(loop7);\n\t\tDefault.setDefaultFormation(1);\n\t\tDefault.setMediumFormation();\n\t}\n\n\t@Test\n\tpublic void setDefaultFormationCondition2() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tString name \u003d \"Fname Lname\";\n\t\tint id1 \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 1;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(name, id1, prijs, typek, ble, type, kp, team);\n//\t\tint ble1 \u003d 0;\n//\t\tKeeper E \u003d new Keeper(name, id1, prijs, typek, ble1, type, kp, team);\n\t\tSpeler A \u003d new Speler(\"John\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler B \u003d new Speler(\"Jane\", 0, 5000, 0, 0, \"CM\", 0, 0, 0, \"PSV\");\n\t\tSpeler C \u003d new Speler(\"Jane\", 0, 5000, 0, 2, \"CM\", 0, 0, 0, \"PSV\");\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(B);\n\t\tDefault.voegToe(D);\n\t\tDefault.voegToe(C);\n//\t\tDefault.voegToe(E);\n\t\tDefault.setDefaultFormation(2);\n\t\tDefault.setHardFormation();\n\t}\n\t\n\t// need to discuss this one\n\t@Test\n\tpublic void setDefaultFormationCondition3() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 13;\n\t\tint loss \u003d 11;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 532;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tString name \u003d \"Fname Lname\";\n\t\tint id1 \u003d 123;\n\t\tint prijs \u003d 3000;\n\t\tint typek \u003d 1;\n\t\tint ble \u003d 0;\n\t\tString type \u003d \"keeper\";\n\t\tint kp \u003d 3;\n\t\tString team \u003d \"Ajax\";\n\t\tKeeper D \u003d new Keeper(name, id1, prijs, typek, ble, type, kp, team);\n\t\tDefault.voegToe(D);\n\t\tDefault.setDefaultFormation(0);\n\t\tDefault.setHardFormation();\n\t\t// assertEquals(Default.setDefaultFormation(0),Default.setEasyFormation());\n\t}\n\n\t@Test\n\tpublic void testGetNaam() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tassertEquals(naam, Default.getNaam());\n\t}\n\n\t@Test\n\tpublic void testSetNaam() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tString newNaam \u003d \"aNewTeamName\";\n\t\tDefault.setNaam(newNaam);\n\t\tassertEquals(\"aNewTeamName\", Default.getNaam());\n\t}\n\n\t@Test\n\tpublic void testGetWins() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tassertEquals(wins, Default.getWins());\n\t}\n\n\t@Test\n\tpublic void testSetWins() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tint newWins \u003d 99;\n\t\tDefault.setWins(newWins);\n\t\tassertEquals(99, Default.getWins());\n\t}\n\n\t@Test\n\tpublic void testGetLoss() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tassertEquals(loss, Default.getLoss());\n\t}\n\n\t@Test\n\tpublic void testSetLoss() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tint newLoss \u003d 77;\n\t\tDefault.setLoss(newLoss);\n\t\tassertEquals(77, Default.getLoss());\n\t}\n\n\t@Test\n\tpublic void testSetLoss1() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tint newLoss \u003d 77;\n\t\tDefault.setLoss(newLoss);\n\t\tassertNotEquals(78, Default.getLoss());\n\t}\n\n\t@Test\n\tpublic void testGetDraw() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tassertEquals(draw, Default.getDraw());\n\t}\n\n\t@Test\n\tpublic void testSetDraw() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tint newDraw \u003d 10;\n\t\tDefault.setDraw(newDraw);\n\t\tassertEquals(10, Default.getDraw());\n\t}\n\n\t@Test\n\tpublic void testGetId() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tassertEquals(id, Default.getId());\n\t}\n\n\t@Test\n\tpublic void testSetId() {\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tint newId \u003d 007;\n\t\tDefault.setId(newId);\n\t\tassertEquals(7, Default.getId());\n\t}\n\n\t@Test\n\tpublic void testToString() {\n\t\tSpeler A \u003d new Speler(\"Isha\", 1, 5000, 1, 1, \"CM\", 3, 3, 3, \"PSV\");\n\t\tSpeler D \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tString naam \u003d \"TeamName\";\n\t\tint wins \u003d 23;\n\t\tint loss \u003d 12;\n\t\tint draw \u003d 3;\n\t\tint id \u003d 54;\n\t\tTeam Default \u003d new Team(naam, wins, loss, draw, goalsvoor, goalstegen,\n\t\t\t\tid);\n\t\tSpeler B \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler C \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler E \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler F \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler G \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler H \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler I \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler J \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler K \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tSpeler L \u003d new Speler(\"Jasper\", 2, 5000, 2, 0, \"CM\", 3, 3, 3, \"Ajax\");\n\t\tDefault.voegToe(A);\n\t\tDefault.voegToe(B);\n\t\tDefault.voegToe(C);\n\t\tDefault.voegToe(D);\n\t\tDefault.voegToe(E);\n\t\tDefault.voegToe(F);\n\t\tDefault.voegToe(G);\n\t\tDefault.voegToe(H);\n\t\tDefault.voegToe(I);\n\t\tDefault.voegToe(J);\n\t\tDefault.voegToe(K);\n\t\tDefault.voegToe(L);\n\t\tString exp \u003d \"TeamName\\t3\\nIsha\\nJasper\";\n\t\tassertEquals(exp, Default.toString());\n\t}\n\n/*\t@Test\n\tpublic void testWrite() {\n\t\tfail(\"Not yet implemented\");\n\t}\n*/\n/*\t@Test\n\tpublic void testRead() {\n\t\tfail(\"Not yet implemented\");\n\t}\n*/\n\t/*\n\t * @Test public void testGetRating() { fail(\"Not yet implemented\"); }\n\t */\n\n}\n\""
  }
];